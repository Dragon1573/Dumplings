function Get-Version {
  $InstallerFileExtracted = New-TempFolder
  7z.exe e -aoa -ba -bd -y '-t#' -o"${InstallerFileExtracted}" $InstallerFile '2.MBAMIService.exe' | Out-Host
  $InstallerFile2 = Join-Path $InstallerFileExtracted '2.MBAMIService.exe'
  $InstallerFile2Extracted = New-TempFolder
  7z.exe e -aoa -ba -bd -y '-t#' -o"${InstallerFile2Extracted}" $InstallerFile2 '4.7z' | Out-Host
  $InstallerFile3 = Join-Path $InstallerFile2Extracted '4.7z'
  $this.CurrentState.Version = (7z.exe e -y -so $InstallerFile3 'srvversion.dat').Trim()
}

# Installer
$this.CurrentState.Installer += [ordered]@{
  InstallerUrl = $InstallerUrl = 'https://data-cdn.mbamupdates.com/web/mb4-setup-consumer/offline/MBSetup.exe'
}

$Object1 = Invoke-WebRequest -Uri $this.CurrentState.Installer[0].InstallerUrl -Method Head
# ETag
$this.CurrentState.ETag = $Object1.Headers.ETag[0]

# Case 0: Force submit the manifest
if ($Global:DumplingsPreference.Contains('Force')) {
  $InstallerFile = Get-TempFile -Uri $this.CurrentState.Installer[0].InstallerUrl
  # Version
  Get-Version
  # InstallerSha256
  $this.CurrentState.Installer[0]['InstallerSha256'] = (Get-FileHash -Path $InstallerFile -Algorithm SHA256).Hash

  $this.Print()
  $this.Write()
  $this.Message()
  $this.Submit()
  return
}

# Case 1: The task is newly created
if ($this.Status.Contains('New')) {
  $InstallerFile = Get-TempFile -Uri $this.CurrentState.Installer[0].InstallerUrl
  # Version
  Get-Version
  # InstallerSha256
  $this.CurrentState.Installer[0]['InstallerSha256'] = (Get-FileHash -Path $InstallerFile -Algorithm SHA256).Hash

  $this.Print()
  $this.Write()
  return
}

# Case 2: The ETag was not updated
if ($this.CurrentState.ETag -eq $this.LastState.ETag) {
  $this.Log("The version $($this.LastState.Version) from the last state is the latest", 'Info')
  return
}

$InstallerFile = Get-TempFile -Uri $InstallerUrl
# Version
Get-Version
# InstallerSha256
$this.CurrentState.Installer[0]['InstallerSha256'] = (Get-FileHash -Path $InstallerFile -Algorithm SHA256).Hash

# Case 3: The installer file has an invalid version
if ([string]::IsNullOrWhiteSpace($this.CurrentState.Version)) {
  throw 'The current state has an invalid version'
}

# Case 4: The ETag was updated, but the hash wasn't
if ($this.CurrentState.Installer[0].InstallerSha256 -eq $this.LastState.Installer[0].InstallerSha256) {
  $this.Log('The ETag was changed, but the hash is the same', 'Info')
  $this.Write()
  return
}

# Case 5: Both the ETag and the hash were updated, but the version wasn't
# The installer might be updated without changing the version (e.g., virus database update)
# Force submit the manifest even if neither the version nor the installer has changed
if ($this.CurrentState.Version -eq $this.LastState.Version) {
  $this.Log('The ETag and the hash were changed, but the version is the same', 'Info')
  $this.Config.IgnorePRCheck = $true
  $this.Print()
  $this.Write()
  $this.Message()
  $this.Submit()
  return
}

# Case 6: The ETag, hash, and version were updated
switch -Regex ($this.Check()) {
  'Updated|Rollbacked' {
    $this.Print()
    $this.Write()
    $this.Message()
    $this.Submit()
    return
  }
  Default {
    throw 'This region should not be reached'
  }
}
