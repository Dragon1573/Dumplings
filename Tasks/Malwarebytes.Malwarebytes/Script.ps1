# Installer
$this.CurrentState.Installer += [ordered]@{
  InstallerUrl = $InstallerUrl = 'https://data-cdn.mbamupdates.com/web/mb4-setup-consumer/offline/MBSetup.exe'
}

$Object1 = Invoke-WebRequest -Uri $InstallerUrl -Method Head -Headers @{'If-Modified-Since' = $this.LastState['LastModified'] } -SkipHttpErrorCheck
if ($Object1.StatusCode -eq 304) {
  $this.Log("The version $($this.LastState.Version) from the last state is the latest, skip checking", 'Info')
  return
}

$InstallerFile = Get-TempFile -Uri $InstallerUrl

# InstallerSha256
$this.CurrentState.Installer[0]['InstallerSha256'] = (Get-FileHash -Path $InstallerFile -Algorithm SHA256).Hash

# Version
$InstallerFileExtracted = New-TempFolder
7z e -aoa -ba -bd '-t#' -o"${InstallerFileExtracted}" $InstallerFile '2.MBAMIService.exe' | Out-Host
$InstallerFile2 = Join-Path $InstallerFileExtracted '2.MBAMIService.exe'
$InstallerFile2Extracted = New-TempFolder
7z e -aoa -ba -bd '-t#' -o"${InstallerFile2Extracted}" $InstallerFile2 '4.7z' | Out-Host
$InstallerFile3 = Join-Path $InstallerFile2Extracted '4.7z'
$this.CurrentState.Version = (7z e -so $InstallerFile3 'srvversion.dat').Trim()

# LastModified
$this.CurrentState.LastModified = $Object1.Headers.'Last-Modified'[0]

# The installer might be updated without changing the version (e.g., virus database update)
# Force submit the manifest even if neither the version nor the installer has changed
$this.Print()
$this.Write()
if (-not $this.Check().Contains('New')) {
  $this.Message()
  $this.Submit()
}
