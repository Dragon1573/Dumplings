Installer:
- Architecture: x64
  InstallerUrl: https://download.unity3d.com/download_unity/d9cf669c6271/Windows64EditorInstaller/UnitySetup64-6000.0.1f1.exe
  ProductCode: Unity 6000.0.1f1
- Architecture: arm64
  InstallerUrl: https://download.unity3d.com/download_unity/d9cf669c6271/WindowsArm64EditorInstaller/UnitySetupArm64-6000.0.1f1.exe
  ProductCode: Unity 6000.0.1f1
Locale:
- Key: ReleaseNotesUrl
  Value: https://unity3d.com/unity/whats-new/6000.0.1
- Locale: en-US
  Key: Documentations
  Value:
  - DocumentLabel: Unity User Manual
    DocumentUrl: https://docs.unity3d.com/6000.0/Documentation/Manual/
- Locale: zh-CN
  Key: Documentations
  Value:
  - DocumentLabel: Unity 用户手册
    DocumentUrl: https://docs.unity3d.com/6000.0/Documentation/Manual/
- Locale: en-US
  Key: ReleaseNotes
  Value: |-
    Known Issues in 6000.0.1f1
    - 3D Physics: 3D Physics Layer Collision Matrix elements are misaligned when new Layers are added (UUM-61750)
    - Asset - Database: Crash in CollectManagedImportDependencyGetters inside OpenScene in batch mode (UUM-57742)
    - Asset Importers: Unity crashes on strtol_l when importing a specific .obj file (UUM-42697)
    - IAP: [Android] The Player crashes with a "JNI ERROR (app bug)" error when the global reference table gets overflowed by BillingClientStateListener (UUM-55105)
    - IL2CPP: [Android] Crash on Android when AndroidJavaProxy is calling from multiple threads (UUM-49357)
    - Lighting: The Editor becomes unresponsive and memory allocation errors are spammed in the Console when Generating Lightning (UUM-58017)
    - Platform Audio: Crash on FMODCodecMPEGsetPositionInternal when a mobile platform is selected and a specific audio clip is played (UUM-62086)
    - Platform Audio: [Linux] No audio output when playing audio (UUM-53143)
    - Shaders: Unlit/Texture material shader is not rendered if added as a skybox in lightning settings
    - UI Toolkit Framework: The "StackOverflowException" error is thrown in the console and the Editor freezes when Spacebar is pressed after selecting the last element of a list (UUM-69616)
    - WebRequest: UnityWebRequest crashes if invoked when player is quitting (UUM-63150)
    - Windows: Two variants of a Windows editor only plugin, one targeting x86 and one targeting x64, prevents the player build (UUM-69382)
    6000.0.1f1 Release Notes
    Features
    - Android: Added the Addressables for Android (com.unity.addressables.android) package. This package provides Play Asset Delivery support for Addressables.
    - DX12: Added support for indirect Dispatch Rays (part of DXR 1.1). The method is similar to RayTracingShader.Dispatch, but the three dispatch dimensions are retrieved from a GraphicsBuffer. Added RayTracingShader.DispatchIndirect and a new CommandBuffer.DispatchRays signature. Added SystemInfo.supportsIndirectDispatchRays capability status.
    - Editor: Added a custom menu on IRenderPipelineGraphicsSettings.
    - Editor: Added a piercing menu that you can open with Ctrl + Right-click in the Scene view. The piercing menu provides a UI that lists all GameObjects under the pointer. GameObjects in the menu can be highlighted and selected.
    - Editor: Added the ForceNoCrunch option to the Build Windows > Asset Import Overrides > Texture Compression dropdown which forces all textures to disable crunch compression and re-import.
    - Editor: Added Additional App IDs to Steam ID Provider Editor Settings for Multiple App ID support.
    - Editor: Integrated new build profile icons.
    - Editor: Introduced IRenderPipelineResources to host SRP resources, which uses the ResourcePath to auto-load resources.
    - Editor: The Build Profile Diagnostic checkbox is no longer available because the Build Settings window has been replaced with the Build Profile window.
    - Graphics: Added a new backend rendering path for rigid GameObjects in Unity that puts them through the Batch Render Group API when the option is enabled on the Render Pipeline asset ('GPU Resident Drawer'). This functionality creates a persistent GPU state for these objects and they will be rendered by the same fast batching path as used by the entities renderer.
    - Graphics: Added small-mesh culling for gpu-driven instances.
    - Graphics: Added support for GPU occlusion culling of instances that are compatible with the 'GPU Resident Drawer', which can be enabled in the Render Pipeline asset.
    - Graphics: Added UITK support for CustomPostProcessOrder.
    - Graphics: Adding a new per batch layer filtering setting for BatchRendererGroup. This setting is useful for the context of culling out specific batches that go through the batch renderer group.
    - Graphics: Enabled SpeedTree GameObjects rendering using GPU Resident Drawer.
    - Graphics: Updated the default IRenderPipelineGraphicsSettings Inspector to trigger notifications when a value is modified.
    - HDRP: Added AMD FidelityFX Super Resolution 2 (FSR2) Unity script bindings and HDRP integration.
    - HDRP: Added support for overriding material properties such as smoothness, albedo, and normal maps on all materials to facilitate material and lighting debugging. The material override feature in HDRP is available through the Rendering Debugger's Lighting panel when rendering through the path tracer pipeline.
    - HDRP: Added support for Spatial Temporal Post-Processing (STP) upscaling solution.
    - HDRP: Added the Sky Occlusion feature to Adaptive Probe Volumes (APV), to allow time of day with static probe volumes.
    - HDRP: Disabled storing of baked data as Streaming Asset in Adaptive Probe Volumes (APV) to make it compatible with Asset Bundles and Addressables.
    - HDRP: Improved on existing Mipmap Streaming debug views and added more. The current offering in HDRP is consistent with what URP offers.
    - iOS: Added Apple Privacy Manifest support.
    - Package: Improved the user experience in the 2.0.8 patch of the User Reporting package.
    - Package Manager: Improved Project manifest files to repopulate with default dependencies when the files are empty or contain only whitespace.
    - Particles: Add BakeTexture and BakeTrailsTexture scripting methods.
    - Particles: Added the Custom Vertex Streams feature for particle trails.
    - Shadergraph: Added a customizable Heatmap color mode, which by default displays the estimated performance impact of each node in a Shader Graph.
    - Shadergraph: Added a new sample content pack that can be installed with the Package Manager. The samples contain descriptions, examples, and break downs for a majority of the nodes in Shader Graph. These samples help users understand the inner workings of the nodes and see examples of how they work and how they can be used.
    - Shadergraph: Added a zoom step size option in the user preferences.
    - Shadergraph: Added new shortcuts for adding new nodes and toggling sub-window visibility, and moved several existing shortcuts to the Shortcut Manager.
    - Shadergraph: Added the Feature Examples Sample to Shader Graph to show users how to achieve specific effects in Shader Graph.
    - SpeedTree: Added the SpeedTree9Importer, which supports .st9 files exported by SpeedTree Modeler 9 and includes the following:
      - Support for SpeedTree Games Wind and SpeedTree Legacy Wind effects
      - The ability to configure wind strength and direction responsiveness through the Importer Settings
      - New SpeedTree9 shaders for built-in (.cg), URP, and HDRP renderers (.shadergraph)
      - New shaders for the new wind effects, but no major changes to lighting
    - SRP Core: Added the option to cache Render Graph compilation for both URP and HDRP.
    - TextCore: Native TextGenerator Rewrite.
    - UI Toolkit: Added a debugger for the UI Toolkit dynamic atlas.
    - UI Toolkit: Added missing UxmlAttribute converters to support UXML authoring: Gradient, AnimationCurve, ToggleButtonGroupState, Unsigned Int and Unsigned Long.
    - UI Toolkit: Added support in PropertyField for ToggleButtonGroupState serialized properties.
    - Universal RP: Added a Camera History Texture manager and basic interfaces to access per-camera history textures.
      History textures are wrapped and stored in types which contain all the textures, additional data, and API methods specific for that history.
      History textures are useful for rendering algorithms that accumulate samples over multiple frames or use data of previous frames as input.
    - Universal RP: Added a new config package that allows you to override the maximum number of lights visible on screen.
    - Universal RP: Added C# script templates to create a post-processing ScriptableRendererFeature that uses a custom VolumeComponent.
    - Universal RP: Added per-camera color and depth history and history access for custom render passes.
    - Universal RP: Added support for foveated rendering in the Forward+ rendering path.
    - Universal RP: Added the 8192x8192 option in Shadow textures.
    - URP: Added Adaptive Probe Volumes (APV) Lighting Scenario Blending to URP
    - URP: Added APV Sky Occlusion support for URP.
    - URP: Added Render Graph Viewer. Access it through the Window > Rendering menu. The tool helps to visualize and debug resource usage of Render Passes in the Render Graph framework.
    - URP: Added six Mipmap Streaming debug views to the Rendering Debugger. These views can be found in the Rendering tab, under Mipmap Streaming. The available debug views are: Mip Streaming Performance, Mip Streaming Status, Mip Streaming Activity, Mip Streaming Priority, Mip Count, and Mip Ratio.
    - URP: Added support for Spatial Temporal Post-Processing (STP) upscaling solution.
    - VFX Graph: Added Camera Buffer Access support in VFX with URP.
    - VFX Graph: Added collision events that allow specific processes upon contact.
    - VFX Graph: Added new profiling/debugging panels in the VFX window.
    - VFX Graph: Added particle count readback for strips, which also allows strips to go to sleep state.
    - VFX Graph: Added support for per-particle sorting in strips.
    - VFX Graph: Allowed instanced rendering of VFX that have exposed textures or graphic buffers.
    - VFX Graph: Built-in and custom attributes can now be handled from the blackboard panel.
    - VFX Graph: Enabled Frustum Culling for strips.
    - VFX Graph: Improved the Shader Graph Cross Pipeline workflow.
    - VFX Graph: Reworked Flipbook player block.
    - VFX Graph: Strips now support the "Indirect draw" option. "Indirect draw" renders only the particles that are active, instead of full capacity.
    - VFX Graph: Support of ShaderKeyword declared in Shader Graph.
    - VFX Graph: The following improvements have been made to shortcuts in VFX Graph:
      - Registered the shortcuts in the global Unity Shortcut window.
      - Synced shortcuts with ShaderGraph where possible.
      - Added new shortcuts.
    - Web: Implemented the following LocationService methods and properties in Web platform:
      - Start()
      - Stop()
      - isEnabledByUser
      - lastData
      - status
    - Web: [Web Platform] Added the ability to copy and paste to and from the Unity player.
    - WebGL: Added support for WebAssembly 2023, which is a Unity-coined term for a collection of newer WebAssembly language features such as, sign-ext opcodes, non-trapping fp-to-int, bulk-memory, bigint, wasm table, native Wasm exceptions, and Wasm SIMD.
    - WebGL: Implemented the following LocationService methods and properties:
      - GetLastHeading()
      - SetHeadingUpdatesEnabled()
      - IsHeadingUpdatesEnabled()
      - GetHeadingStatus()
      - IsHeadingAvailable()
    - XR: Added support for Foveated Rendering on Vision Pro.
    Improvements
    - 2D: Improved performance of shadow generation.
    - Accessibility: Improved multiple API documentation for the Screen Reader API.
    - AI: Increased the speed of the instantiation of NavMeshes into the scene.
    - Android: Added a new Player setting to display warnings when the symbols package size exceeds the specified threshold.
    - Android: Added a new property in .androidlib plug-in inspector to specify dependencies for unityLibrary. You can now configure .androidlib to depend on unityLibrary, and thus expand an activity by overriding UnityPlayerActivity.
    - Android: Fixed https://docs.unity3d.com/ScriptReference/AndroidJavaProxy.html docs, the view in onDateSet should be disposed by calling .Dispose. (UUM-59437)
    - Android: Fixed .androidlib default build.gradle, it will correctly apply android library plugin + targetSDKVersion.
    - Android: When producing the symbols.zip package, Unity will prompt Gradle to produce the zip, which means the symbols.zip package might contain more symbol files, allowing for better stack trace resolution. This also allows you to regenerate the symbols package from within the Gradle project.
    - Android: You can now embed Debug symbols into an app bundle (e.g., in the Build Settings window, choose Debug Symbol > level and format to IncludeInBundle) when uploading .aab files to the Google Play Store. The symbols are uploaded together with aab, which means you don't need to upload the symbols separately.
    - Apple TV: Included platform name in Bundle Identifier error messages. (UUM-52189)
    - Asset Pipeline: Improved error handling when updating ArtifactDB or SourceAssetsDB. (UUM-48669)
    - Audio: Added an "Edit Audio Random Container" button to the Audio Random Container Inspector. Also, disabled presets for the Audio Random Container. (UUM-51019)
    - Audio: Enabled ALT+P as a shortcut to preview the Audio Random Container (ARC).
    - Audio: You can now create an Audio Random Container (ARC) from a selection of audio clips using the following method:
      1. From your Project browser, select a set of audio clips.
      2. Right-click and click Create > Audio > Audio Random Container.
         This creates a fresh audio random container that contains the clips from your selection.
    - Build System: Added deterministic shader ordering in output content.
    - Build System: Content is now deterministically sorted when being pulled from the resource manager.
    - Build System: Made bee_backend's directory deletion explicitly handle read-only files on Windows.
    - Burst: Added a new Math.Clamp API, which is available when the API Compatibility Level is set to .NET Standard 2.1.
    - Burst: Added Burst support for Apple visionOS.
    - Burst: Added support for default interface methods.
    - Burst: Added support for hashing against different target frameworks.
    - Burst: Added support for string interpolation in exception messages.
    - Burst: Added support for System.Math functions Acosh, Asinh, Atanh, Cbrt, CopySign, Log2, SinCos, FusedMultiplyAdd, and ILogB.
    - Compute: Added logging when a ComputeShader variant is created with no keywords.
    - Core: Clean up and clarify areas of the source code.
    - Core: Improved baking of large scenes that use Probe Volumes.
    - Documentation: Add instructions for blending Adaptive Probe Volumes at runtime.
    - Documentation: Added new and updated existing Accelerator cache server command line argument documentation.
    - Documentation: Added two new workflows to the Timeline Workflows documentation
      - The Use markers and signals for footsteps workflow demonstrates how to use Timeline markers, Signal assets, and Signal Receiver components to play audio sources for footsteps.
      - The Create a Sub-Timeline instance workflow demonstrates how to create a single cut-scene by nesting a Timeline instance within another Timeline instance.
    - Documentation: Changed the line summary of Vector2/3/4.normalized to make it clearer that the vector is not modified and that it is a new normalized vector in the same direction that is returned. (UUM-61851)
    - Documentation: Improve the scripting documentation for RaycastHit2D.
    - Documentation: Improved code sample for NavMeshAgent.CalculatePath() to better clarify how to interpret and use its results. (UUM-43219)
    - Documentation: Updated documentation of Mathf.SmoothDamp. (UUM-60504)
    - Documentation: [AI] Added some detail to NavMeshPathStatus.PathInvalid. (UUM-43218)
    - DX12: Implemented a dedicated GPU memory allocator for small acceleration structures (BLASes) to save GPU memory when using ray tracing.
    - DX12: Implemented acceleration structure (BLAS) compaction for static meshes to reduce GPU memory consumption in Ray Tracing effects. Compaction reduces memory requirements by more than 50% for BLASes.
    - DX12: Optimized writing shader records into shader tables before ray tracing dispatches.
    - Editor: Added a column that displays the shortcut type in the Shortcut Manager window.
    - Editor: Added a general Graph category to the search by type option in ProjectBrowser.
    - Editor: Added a new internal Editor API to control Rendering Layer names in Tag & Layers.
    - Editor: Added a toggle in the preferences to show the project path instead of the project name in main window title.
    - Editor: Added Deselect and Invert Selection to the context menu.
    - Editor: Added discrete menu items for pasting cut or copied GameObjects as children while preserving local or world transform. (UUM-43090)
    - Editor: Allow for action and clutch shortcuts to use the same mouse button [with or without modifiers].
    - Editor: Categorised and alphabetised the order of items in the Create menu. (UUM-49318)
    - Editor: Changed the overlay menu into an overlay itself. This allows us to use the new Overlay Popup feature and to remove the need to maintain two code paths for very similar behaviors.
    - Editor: Changed unused System namespaces so they are no longer added to new scripts. (UUM-60811)
    - Editor: Data used for preview is released when the baked lightmap preview system is not used for 30 seconds.
    - Editor: Implement guard for crash in TimeSliceAwakeFromLoadQueue::IntegrateTimeSliced. (UUM-41509)
    - Editor: Improve performance when fetching artifacts that are missing (e.g link to an artifact deleted from the project). (UUM-22002)
    - Editor: Improved exception handling when package load fails. (UUM-16258)
    - Editor: Improved moving files in the Project window. Moving files in the Project window now takes less memory and is faster. (UUM-44466)
    - Editor: Improved the Build window message that appears when a Dedicated Server target is not installed. (UUM-45218)
    - Editor: Improved the Clamp Gizmo icon render size to prevent gizmos from being drawn obstructively large or unreadably small in certain scenes.
    - Editor: Improved visibility on Volume component when Profile Instance used.
    - Editor: Improvements to the Graphics Settings UI.
    - Editor: Improvements to CustomPropertyDrawer to allow filtering per Render Pipeline with the SupportedOnRenderPipeline attribute.
    - Editor: Modified the Create menu so it now contains a script template for an empty C# Script and a Scriptable Object Script. In addition, the C# Script menu item has been renamed to MonoBehaviour Script. (UUM-60811)
    - Editor: Renamed Post-processing and Lighting Quality settings to Tiers.
    - Editor: Reorganized the Edit menu.
    - Editor: The menu Animation item has been renamed to Animation Clip. (UUM-60811)
    - Editor: Updated OpenSSL to 1.1.1w. (UUM-53226)
    - GI: Added missing color legends for the Lighting Visualizations Colors panel, to explain the colors used in the Texel Validity Scene View Mode.
    - GI: Added the Bake Reflection Probes menu item.
    - GI: Added the Clear Baked Data menu item.
    - GI: Changed packing of instances into lightmap atlases to be spatially coherent, and prefer packing instances that are located close to be together.
    - GI: Changed several scene view modes to have lit shading, to make them easier to read.
    - GI: Exposed a "Lightmap Scale" slider for baked preview mode, which lets you quickly change the effective lightmap resolution.
    - GI: Finalize APV baking using new probe baking API.
    - GI: Implemented tests which target meta passes without light baking.
    - GI: Improved and optimized both undo and redo in VFX Graph.
    - GI: Improved Typeset lightmap and light probe numbers in the Lighting Window.
    - GI: Optimized light baking input extraction by parallelizing surface area calculations.
    - GI: Optimized the initialization time for GPU lightmapper bakes.
    - Graphics: Added the option Use Legacy Lightmaps to disable lightmap texture arrays when GPU Resident Drawer is enabled.
    - Graphics: Added three new UNITY_DOTS_INSTANCED_PROP variants to give users more control over DOTS instanced property loading performances.
    - Graphics: Added ShadowDrawingSettings.splitIndex to control which split index is drawn for a shadow renderer list.
    - Graphics: Improved CPU performance when binding geometry buffers (i.e. unity_MeshVertexBuffers_RT) to ray tracing hit shaders
    - Graphics: Improved culling performance when using Batch Render Group.
    - Graphics: Improved the performance and memory requirements of Texture API calls such as LoadRawTextureData that write to a Texture2D that was created with the TextureCreationFlags.DontUploadUponCreate flag. (UUM-35989)
    - Graphics: Kick GameObjects shadow casters culling jobs earlier to improve performance.
    - Graphics: Optimized DOTS instanced properties loading code for URP and HDRP stock shaders.
    - Graphics: Updated platform macros for VRR code.
    - HDRP: Add support for fixing IRenderPipelineGraphicsSettings on the HDRP Wizard.
    - HDRP: Added a new LOD mode for the High Quality Line Renderer that is based on screen coverage.
    - HDRP: Added a warning to the HDRP Wizard if a users project contains materials that can't be upgraded. (UUM-46394)
    - HDRP: Added an Importance property to Reflection Probes. Use this property to indicate the relative priority of the Reflection Probe for sorting.
    - HDRP: Added atmospheric scattering from PBR Sky.
    - HDRP: Added line light support to the Stacklit, Water, Hair, Eye, and Fabric shaders.
    - HDRP: Added new visual effects examples to the HDRP Water Sample example scenes.
    - HDRP: Added support for tube-shaped and disc-shaped area lights in the path tracer.
    - HDRP: Added the ability to express the width of lines in the High Quality Line Renderer in centimeter units on a per-vertex basis.
    - HDRP: Avoid clamping to integers for HDR manipulation. (UUM-29767)
    - HDRP: Following HDRP fixes were made:
      - Support for decals in the Raytracing mode of SSR and SSGI.
      - Changed the value type of Texture Lod Bias from integer to float
      - Support debug rendering of decals' light cluster from Window > Rendering Debugger > Fullscreen Debug Mode > LightCluster, Light Category > Decal.
      - Changed the color of the light cluster in the debug view, so that it uses the same color palette as that of tiled lighting.
    - HDRP: Improved HDRP build time. (UUM-61700)
    - HDRP: Improved implementation of line lights for all materials and performance.
    - HDRP: Improved path tracer denoising when using AOVs in combination with volumetric fog. Added an option to denoise the volumetric scattering effect separately.
    - HDRP: Improved Render Graph Viewer.
    - HDRP: Improved scene culling performance when APV is enabled in the project.
    - HDRP: Improved skyContext caching when the sky renderer changes. (UUM-43697)
    - HDRP: Improved the performance of the FrameSettings.Sanitize method.
    - HDRP: Improved user feedback when a framesetting is disabled.
    - HDRP: Improved water surface underwater backface rendering.
    - HDRP: Improved water system foam generatorattenuation.
    - HDRP: Improved water system performances.
    - HDRP: Improvements in the volumetric lighting performance.
    - HDRP: Made changes to improve the conversion from string to type for each Custom PP.
    - HDRP: Optimized the performance of reflection probe baking by baking all probes in a single batch.
    - HDRP: Optimized water surface scripting interactions.
    - HDRP: Reduced GC Alloc when using raytracing and HDRP. (UUM-40657)
    - HDRP: Reduced the amount of memory that LTC area light tables consume.
    - HDRP: Reduced time taken by default scriptable shader stripping.
    - HDRP: Updated description of Decal Projector Draw Distance setting to mention HDRP asset setting (UUM-42539)
    - HDRP: Updated com.unity.collections package from 1.4.0 to 2.2.0 in HDRP and light-transport packages.
    - Kernel: Added the "-timestamps" command line argument to the player, which makes it prepend timestamps at the beginning of each log line. This setting was previously only available to the Editor.
    - Mono: Implemented stack probes for Windows Arm64.
    - Package: Alembic: Prevented a NullReferenceException when upgrading a project with URP and Alembic to Unity 2023.3.
    - Package Manager: A warning is logged in upm.log when a deprecated UPM environment variable is detected.
    - Package Manager: Added the ability to configure the UPM global cache size via the UPM_MAX_CACHE_SIZE environment variable or the maxCacheSize property in the user configuration file. The default is 10GB.
    - Package Manager: The global cache that contains the uncompressed contents of registry package tarballs is now obsolete and the UPM_CACHE_PATH environment variable is no longer supported.
    - Particles: Improved two error messages to include the name of the Particle System.
    - Physics: Improved Physics callback dispatching performance by jobifying the processing of trigger and joint break events and only dispatching events that have their callback implemented.
    - Profiler: Released Memory Profiler version 1.1.0. Refer to https://docs.unity3d.com/Packages/com.unity.memoryprofiler@1.1/manual/index.html for more information.
    - Scene/Game View: Changed the overlays order for a consistent one in the Overlay Menu.
    - Scene/Game View: Updated the Cameras overlay icon to be more descriptive.
    - Scripting: Fixed Hierarchy.Remove performance issues that could not scale when performed in loop. (UUM-63478)
    - Scripting: Reduced noise in logs by setting logging level to 'Debug' in AssemblyUpdater when collecting ApiUpdater configurations. (UUM-45511)
    - Shadergraph: Added theDisable Color Tinting property to Canvas and Sprite SubTargets. Use this property to override the color completely. (UUM-46771)
    - Shadergraph: Added a shader variant limit to the Project Settings, and clarified the difference between the variant limits in the Preferences tooltip.
    - Shadergraph: Added UV3 and UV4 support for the Canvas SubTarget. (UUM-47684)
      First seen in 6000.0.0b11.
    - Shadergraph: Addressed delays related to graph concretization where certain operations were taking longer than expected.
    - Shadergraph: Exposed a scope option for Texture3D, CubeMap, and Texture2D Array Blackboard properties.
    - Shadergraph: Improved clarity and behavior of Blackboard properties when options change. Renamed Exposed to Show in Inspector.
    - Shadergraph: Improved the performance of undo/redo operations in large graphs. (UUM-52220)
    - Shadergraph: Removed the Global/Local scope for Keyword properties and replaced them with an Is Overridable toggle. Updated the corresponding option enablement to clarify behavior.
    - Shadergraph: Updated the toolbar UI to make it more similar to VFX Graph.
    - Shaders: When compiling shaders with DXC and targeting Metal, HLSL min16float instructions will be converted to 16-bit floating point (MSL half) instructions.
    - SRP Core: Added GPU Resident Drawer debug panel to display culling stats when Instanced Drawing is enabled.
    - SRP Core: Added icons and fixed bugs in Render Graph Viewer.
    - SRP Core: Dumping in the temp folder the stripping of IRenderPipelineGraphicsSettings
    - SRP Core: Improved and unified render graph profiling markers.
    - SRP Core: Improved execution performance with Render Graph.
    - SRP Core: Improved Render Graph Viewer UI to allow jumping to pass definitions in C# IDE.
    - SRP Core: Improved the CPU performance of the Native Render Pass Render Graph compiler by 15-40% (combined with NativeList PR and other optimization), depending on the complexity of the rendering and the runtime device.
    - SRP Core: Improved the Native Render Pass CPU performance by implementing a Render Pass pooling system (URP RG).
    - SRP Core: Improved the resource pooling system in Render Graph.
    - SRP Core: Improved BeginRenderPass CPU performance in the Native Render Pass Render Graph (URP).
    - SRP Core: Merged rendergraph native render passes that have different depths.
    - SRP Core: Prevented the unnecessary store op of MSAA buffers in URP when using Native Render Pass Render Graph.
    - SRP Core: Reduced AddRaster/Compute/UnsafeRenderPass Render Graph API CPU cost by not clearing internal arrays. Now it relies on the handle IsValid() API instead.
    - SRP Core: Replaced the overlays inside the RenderGraph Viewer with a fixed side panel.
    - SRP Core: Replaced DynamicArray with NativeList in NativeRenderPassCompiler to improve performance.
    - SRP Core: Reworked the additional properties. (UUM-59559)
    - SRP Core: Small optimization, frame allocation checks of the Render Graph resource pool are now enabled through Validation checks.
    - SRP Core: Validation checks of Render Graph can now be enabled or disabled from the Editor. They are enabled by default, and disabling them slightly improves Render Graph performance.
    - SRP Core: RenderGraphObjectPool is now three times faster with RasterRenderRenderGraphPass objects by using UnityEngine.Pool.
    - Text: Improved dynamic FontAsset initialization time and reduced the required number of managed memory allocations.
    - uGUI: Provided early out to scenarios where a null mesh was being set on a CanvasRenderer.
    - UI Elements: Refactored the TreeView and MultiColumnTreeView control to use the Hierarchy as its data structure.
    - UI Toolkit: Added support for defining null UxmlObjects by using the <null/> tag.
    - UI Toolkit: Added support for generic UxmlAttributeConverters and Types.
    - UI Toolkit: Added support for setting the searchfield placeholder text via UXML.
    - UI Toolkit: Added support for UxmlObjects to use custom property drawers for their serialized data.
    - UI Toolkit: Added the ability to preview changes to the inline value of a UXML attribute or a USS property In the UI Builder, even if they are bound.
    - UI Toolkit: Added undo/redo functionality for when you create a binding on attributes or style properties. (UUM-49503)
    - UI Toolkit: Added validation of UXML attribute and element names to ensure they are valid XML names. (UUM-54829)
    - UI Toolkit: Added warning for UxmlAttributes in a non UxmlElement class. (UIT-2017)
    - UI Toolkit: Changing a UxmlElements namespace or class name is now supported with the MovedFromAttribute.
    - UI Toolkit: Exposed the align-content API in the Editor, via the Align Content property in the Align section of the Builder Inspector. (UIT-1703)
    - UI Toolkit: Improved the performance of the UXML attributes view in the builder during undo/redo operations. (UIT-2161)
    - UI Toolkit: Improved the UI Builder performance when using UXML serialization and data bindings.
    - UI Toolkit: Improved the UI Toolkit performance by reducing the number of managed memory allocations (GC.Alloc), specifically when using a virtualized ListView containing Label items. (UUM-57824)
    - UI Toolkit: Improved UI Builder Attribute type picker field to use a popup selector instead of a completer. (UUM-59486)
    - UI Toolkit: Modified the builder attribute field tooltips so they now include the value.
    - UI Toolkit: The Editor now tracks which fields are overridden in UXML in the UxmlSerializedData. During the deserialize process, the Editor only applies the overridden fields instead of all of them.
    - UI Toolkit: The UI Builder is improved to no longer react to asset changes unnecessarily if it's not opened. (UIT-2157)
    - UI Toolkit: Updated the bound fields in the UI Builder Inspector so they can be navigated through keyboard events.
    - Universal RP: Added checks to avoid building shadow atlases, adjusting shadow resolution, calculating rendering layers, and running other related operations when their features are disabled.
    - Universal RP: Bloom shader variants are now stripped per feature (LQ, LQ Dirt, HQ, HQ Dirt).
    - Universal RP: Disabled implicit use of all globals in URP passes
    - Universal RP: Improved performance for Deferred Rendering when using many lights.
    - Universal RP: Improved performance for AdditionalLightShadowCasterPass and BuildAdditionalLightsShadowAtlasLayout.
    - Universal RP: Improved performance when creating shadow data.
    - Universal RP: Improved runtime performance by adding checks for _ALPHATEST_ON when rendering depth, shadows, and depth normals.
    - Universal RP: Improved stripping logic for Accurate G-buffer normals when using Deferred rendering on Vulkan.
    - Universal RP: New Renderer Feature updated with Render Graph code.
    - Universal RP: Optimized bloom post processing effect CPU performance. Converted many RasterPass into a single UnsafePass.
    - Universal RP: SSAO CPU optimization. Many RasterPass into single UnsafePass.
    - Universal RP: Updated NewRendererFeature Template.
    - Universal Windows Platform: Improved the performance of repeating checks on whether the accelerometer and gyrometer are supported.
    - URP: Enabled APV Disk Streaming in URP.
    - URP: Enabled the APV Lighting Scenario Baking in URP.
    - URP: Enabled renderViewportScale for XR intermediate textures.
    - VFX Graph: Improved AddComponent performance for VFX by precaching script pointers in common case operation.
    - VFX Graph: Improved and optimized both undo and redo.
    - VFX Graph: Improved compilation times with VFX Graph using Subgraphs.
    - VFX Graph: Improved error feedback and added more error feedback.
    - VFX Graph: Improved Position, Collision, and Kill blocks.
    - VFX Graph: Improved the collision system so it is more stable, robust, and energy conservative.
    - VFX Graph: Improved the performance of VFX.ProcessCommandList by skipping the use of a RenderingCommandBuffer.
    - VFX Graph: Improvements to texture types to allow using in branch operators. (UUM-38037)
    - VisionOS: Added VisionOS as a target for Windows and Linux. (UUM-63466)
    - Web: Improved performance for instance rendering in WebGPU.
    - WebGL: Improved Web builds to be able to allocate up to 4GB of WebAssembly Memory, up from the previous limit of 2GB. Note that at the time of development, this feature did not work in Firefox ( https://bugzilla.mozilla.org/show_bug.cgi?id=1838218 ), so the default memory limit on the web is still set to 2048 MB.
    - WebGL: Rebalanced the WebGL audio memory pool size values. (UUM-49655)
    - WebGL: Removed redundant filesystem persistence operations, to improve IndexedDB filesystem performance.
    API Changes
    - Accessibility: Added: Added mobile screen reader support for sliders, allowing them to be made compatible with TalkBack (Android) and VoiceOver (iOS).
    - Accessibility: Added: Support added for the Dismiss Gesture (Two-finger scrub) on iOS and the Dismiss Action (Action Menu item) on Android when using a screen reader.
    - Accessibility: Added: support for reading the bold text system setting on Android and iOS.
    - Accessibility: Added: support for reading the closed captioning system setting on Android and iOS.
    - Accessibility: Added: support for reading the font scale system setting on Android and iOS.
    - Accessibility: Changed: Made label parameter on AccessibilityHierarchy.AddNode and AccessibilityHierarchy.InsertNode null by default to make some use cases easier to achieve
    - Accessibility: Changed: Toggle role added to the AccessibilityRole enum.
    - AI: Added: All the new NavMeshEditorHelpers.CollectSourcesInStage() methods have been copied from the NavMeshBuilder.CollectSourcesInStage() methods, which, in turn, have been deprecated.
    - AI: Added: NavMesh.GetAreaNames() has been added to replace the deprecated method GameObjectUtility.GetNavMeshAreaNames().
    - AI: Deprecated: All methods from GameObjectUtility related to NavMesh area names have been deprecated. Use the similar methods from the NavMesh class instead.
    - AI: Deprecated: All methods from GameObjectUtility that assign and retrieve NavMesh area types to/from GameObjects have been deprecated. Instead, use NavMeshBuildMarkup and UnityEngine.AI.NavMeshBuilder to designate different area types in a generated NavMesh.
    - AI: Deprecated: The editor-only NavMeshBuilder class has been deprecated. Use UnityEngine.AI.NavMeshBuilder instead.
    - AI: Deprecated: The NavMeshBuilder.CollectSourcesInStage() methods have been deprecated. Use NavMeshEditorHelpers.CollectSourcesInStage() instead.
    - Android: Added: ConfigurationManager has new APIs:
      - ApplyPluginList.AddPluginFromPath
      - ApplyPluginList.AddPluginFromRaw
      - Ndk.DebugSymbolLevel
    - Android: Changed: Unity.Android.Gradle.GradlePropertiesFile.EnableUncompressedNativeLibs was replaced with Unity.Android.Gradle.JniLibs.UseLegacyPackaging.
    - Core: Added: API to force active set for APV. (UUM-64028)
    - Core: Added: ContextContainer to SRP Core. A storage container which works like a dictionary with the key being a generic type id and the value being the value of the given type.
    - Core: Added: Component.GetComponentIndex() returns a components index on it's GameObject.
    - Core: Added: ContentLoadInterface.GetIntegrationTimeMS() and ContentLoadInterface.SetIntegrationTimeMS() for timeslicing integration from Content Files.
    - Core: Added: Object.Instantiate(Object,Scene) allows for directly instantiating an object to a specific scene.
    - Editor: Added: a flag for recursive dependency calculation. For use with the Compatibility Pipeline API.
    - Editor: Added: Added API for collecting in-scene assets and promoting them to project assets.
    - Editor: Added: Added RenderingLayerMask as a separate Runtime structure.
    - Editor: Added: Added the ScriptableRenderPass.requiresIntermediateTexture flag to allow individual ScriptableRenderPasses to request offscreen rendering
    - Editor: Added: Exposed new MenuItem attribute constructor with a path to iconResource.
    - Editor: Added: Layout field in the DropdownMenuDescriptor to the behavior of the menu when there is a large number of items.
    - Editor: Added: Make OverlayCanvas.SetOverlaysEnabled and OverlayCanvas.overlaysEnabled public API.
    - Editor: Added: PrefabUtility callbacks for prefab instance apply.
    - Editor: Added: public methods RegisterToolContext and DeregisterToolContext to the ShortcutManager class to allow users to register and unregister custom shortcut contexts.
    - Editor: Added: the IShortcutToolContext interface to allow users to create their own custom shortcut context.
    - Editor: Added: EditorGraphicsSettings.TryGetRenderPipelineSettingsForPipeline to access settings of other pipelines than the currently active pipeline.
    - Editor: Added: GameObject.GetComponentAtIndex() returns the component at the specific index on a GameObject.
    - Editor: Added: HandleUtility.GetOverlappingObjects for getting an ordered list of all pickable objects under the give mouse location.
    - Editor: Added: HandleUtility.RegisterRenderPickingCallback and a few peripheral structures that enables custom rendering-based picking solutions to be developed.
    - Editor: Added: SceneManager.MoveObjectToSceneBatch allows for moving objects in batches to a scene.
    - Editor: Changed: EditorUserBuildSettings.androidCreateSymbols was replaced with UnityEditor.Android.UserBuildSettings.DebugSymbols.level and UnityEditor.Android.UserBuildSettings.DebugSymbols.format.
    - Editor: Changed: Renamed ArticulationBody.velocity to ArticulationBody.linearVelocity in order for the API to be symmetric with ArticulationBody.angularVelocity
    - Editor: Changed: Renamed Rigidbody.velocity to Rigidbody.linearVelocity in order for the API to be symmetric with Rigidbody.angularVelocity
    - Editor: Deprecated: The property ChildCount on HierarchyNodeFlattened was renamed to ChildrenCount.
      The following methods are now deprecated: GetExpanded replaced by DoesNotHaveFlags(Collapsed), GetSelected replaced by HasFlags(Selected), SetExpanded replaced by ClearFlags(Collapsed), and SetSelected replaced by SetFlags(Selected).
    - Editor: Deprecated: Using XRSettings.enabled to enable/disable XR for an application is now deprecated in favor of calling Start()/Stop() on an XRDisplaySubystem instance.
      Using XRSettings.LoadDeviceByName to load XR devices is now deprecated in favor of querying subsystem descriptors to create and start the subsystems of your choice with the SubystemManager.
    - Editor: Deprecated: ObjectIdResult.DecodeIdFromColor. Users are now encouraged to use HandleUtility.DecodeSelectionId for decoding and HandleUtility.EncodeSelectionId for encoding selection IDs.
    - Editor: Obsoleted: Made PropertyCollectionAttribute obsolete. Use PropertAttribute constructor argument applyToCollection to make a collection attribute.
    - Editor: Obsoleted: Using Unsupported.CaptureScreenshotImmediate will now result in a compilation error. Please use ScreenCapture.CaptureScreenshot instead.
    - Editor: Removed: IOSLaunchScreenType.CustomXib launch screen option was removed.
    - Editor: Removed: SceneManager.MoveObjectToSceneBatch becase it was never was properly exposed.
    - EmbeddedLinux: Deprecated: UnityEditor.EmbeddedLinuxArchitecture enum and UnityEditor.EditorUserBuildSettings.selectedEmbeddedLinuxArchitecture are deprecated. UnityEditor.EmbeddedArchitecture and UnityEditor.EmbeddedLinux.EmbeddedLinuxSettings.Get().architecture should be used instead.
    - GI: Added: Add functions for better manipulating LightTransport.BufferSlice, including LightTransport.BufferID.Slice, LightTransport.BufferSlice.SafeReinterpret and LightTransport.BufferSlice.UnsafeReinterpret.
    - GI: Added: New light probe baking API. A data driven, stateless, public API for GI probe baking without dependencies on game objects. The API provides CPU and GPU integrators for direct and indirect radiance, validity and a post processing API for conversion to irradiance and other operations needed to composite results before rendering.
    - GI: Changed: Added IDisposable to LightTransport.IProbeIntegrator, LightTransport.IWorld and LightTransport.PostProcessing.IProbePostProcessor interfaces.
    - GI: Changed: Change LightTransport.BufferSlice to carry a type annotation, indicating the type of elements in the buffer slice.
    - GI: Changed: Changed LightTransport.IDeviceContext.WriteBuffer and LightTransport.IDeviceContext.ReadBuffer to take a LightTransport.BufferSlice rather than a LightTransport.BufferID. This lets you provide an offset for your reads and writes.
    - GI: Changed: Only one of ignoreDirectEnvironment and ignoreIndirectEnvironment is relevant in each of the IntegrateRadiance methods in IProbeIntegrator.
      Removed the unnecessary ignoreIndirectEnvironment parameter from LightTransport.IProbeIntegrator.IntegrateDirectRadiance.
      Removed the unnecessary ignoreDirectEnvironment parameter from LightTransport.IProbeIntegrator.IntegrateIndirectRadiance. (UUM-61353)
    - GI: Changed: Renamed LightTransport.IDeviceContext.WaitForAsyncOperation and LightTransport.IDeviceContext.IsAsyncOperationComplete to LightTransport.IDeviceContext.Wait and LightTransport.IDeviceContext.IsComplete.
    - Graph Tool Foundation: Removed: GTF and CSO modules removed from the editor. Use package com.unity.graphtoolsauthoringframework instead.
    - Graphics: Added: Added a "Texture.SetStreamingTextureMaterialDebugProperties" overload that takes in a "materialTextureSlot" integer. This overload can be used to debug any (non-hidden) texture property on materials used by renderers.
    - Graphics: Added: API to reconstruct SRP using a certain IRenderPipelineGraphicsSettings in the Editor.
    - Graphics: Added: New method overloads accepting GraphicsTexture parameters were added to the Graphics.CopyTexture API
    - Graphics: Added: SystemInfo.supportsDepthFetchInRenderPass to check if RenderPass' depth attachment can be used as input, added UNITY_PLATFORM_SUPPORTS_DEPTH_FETCH shader macro to detect it in shader code
    - Graphics: Added: Texture2D.CopyPixels, Texture2DArray.CopyPixels, Texture3D.CopyPixels, Cubemap.CopyPixels, CubemapArray.CopyPixels allow copying readable pixel data only on the CPU.
    - Graphics: Added: UseBufferRandomAccess and UseTextureRandomAccess to IRasterRenderGraphBuilder
    - Graphics: Added: watermark API to indicate if watermark is visible.
    - Graphics: Changed: BatchDrawCommand.visibleCount no longer has to be set to 1 when BatchDrawCommandFlags.HasSortingPosition is set
    - Graphics: Changed: HLSL min16float variables are now translated to MSL float in all CPU visible buffers (e.g. Constant Buffers, Structured Buffers, Vertex Shader Input). When accessing these values inside shaders, they are casted to MSL half (16-bit) for faster arithmetic operations. Any project that uses min16float or half in shaders and accesses this data as 16-float (from CPU) on iOS is incompatible with this change. For these cases, a new #pragma metal_fxc_allow_float16_in_cpu_visible_buffers was added so that HLSL min16float variables are converted to MSL half in all CPU visible buffers (just like before).
    - Graphics: Changed: Updated contextual menu drawer API with PropertyDrawer information.
    - HDRP: Added: Added an API to set and get the material type via script on HDRP Materials.
    - HDRP: Added: Fix missing API to get deformation buffer (UUM-48355)
    - HDRP: Added: New forceVisible API on light to get information from a light from SRP even if it is not in frustrum.
    - Package: Added: Added GetCustomId method to PlayerInfo
    - Package: Added: Added SignInWithSteamAsync method with appId parameter for Multiple App Id Support
    - Package: Changed: Added LinkWithSteamAsync method with appId parameter for Multiple App Id Support
    - Particles: Added: New custom vertex streams: particle index, mesh axis of rotation, and color packed as 2 floats.
    - Physics: Changed: Collider.material now returns PhysicsMaterial instead of PhysicMaterial
    - Physics: Changed: Collider.sharedMaterial now returns PhysicsMaterial instead of PhysicMaterial
    - Physics: Changed: Renamed PhysicMaterial into PhysicsMaterial
    - Physics: Changed: Renamed PhysicMaterialCombine to PhysicsMaterialCombine
    - Physics: Changed: Renamed Rigidbody.angularDrag to Rigidbody.angularDamping to create symmetry between ArticulationBody and Rigidbody APIs
    - Physics: Changed: Renamed Rigidbody.drag to Rigidbody.linearDamping to create symmetry between ArticulationBody and Rigidbody APIs
    - Physics: Obsoleted: PhysicMaterial is now obsolete. All references to PhysicMaterial are upgradeable to PhysicsMaterial when updating your project.
    - Physics: Obsoleted: PhysicMaterialCombine is now obsolete. All references to PhysicMaterialCombine are upgradeable to PhysicsMaterialCombine when updating your project.
    - Physics: Removed: Removed long deprecated type field SoftJointLimit.bouncyness
    - Physics: Removed: Removed long deprecated type field SoftJointLimit.damper
    - Physics: Removed: Removed long deprecated type field SoftJointLimit.spring
    - Player: Added: AsyncInstantiateOperation.GetIntegrationTimeMS() and AsyncInstantiateOperation.SetIntegrationTimeMS() for time slicing integration times of InstantiateAsync().
    - Player: Added: Object.InstantiateAsync<T>().
    - QNX: Deprecated: UnityEditor.QNXArchitecture enum, UnityEditor.EditorUserBuildSettings.selectedQnxArchitecture, UnityEditor.EditorUserBuildSettings.selectedQnxOsVersion are deprecated. UnityEditor.EmbeddedArchitecture and UnityEditor.QNX.QNXSettings.Get().architecture should be used instead.
    - Scripting: Added: Constructor to TextAsset which takes a ReadOnlySpan of bytes.
    - Scripting: Added: Every hierarchy node type handler now has access to an member hierarchy command list in which they can write to whenever they want. This is to simplify the workflow of integrating changes into the hierarchy, which in turn makes the ChangesPending and IntegrateChanges methods optional. (UUM-58062)
    - Scripting: Added: New methods on Hierarchy class: GetChild to retrieve a child at specified index, GetChildrenCountRecursive to get number of children including children of children, DoesChildrenNeedsSorting to get whether or not a node requires its children to be sorted, and EnumerateChildren to get a children enumerable to iterate children without copying them.
      New methods on HierarchyFlattened class: EnumerateChildren to get a children enumerable for the specified node, GetChildrenCountRecursive to get number of children including children of children.
      New methods on HierarchyViewModel class: several methods to manipulate and query bit flags on nodes, such as SetFlags, ToggleFlags, ClearFlags, HasFlags, DoesNotHaveFlags, GetNodesWithFlags, GetIndicesWithFlags, EnumerateNodesWithFlags and EnumerateNodesWithoutFlags.
      New classes and structs to support new functionality: several new enumerables, such as HierarchyFlattenedNodeChildren, HierarchyNodeChildren and HierarchyViewNodesEnumerable.
      A new enum flags HierarchyNodeFlags used by the HierarchyViewModel.
      A new struct HierarchyNodeMapUnmanaged to store unmanaged data per node that is O(1) lookup time, implemented as a sparse array.
    - Scripting: Changed: Several methods have had their parameter taking a Span changed to a ReadOnlySpan, to indicate that the content of the span will not be modified and only used as input.
      Hierarchy.RegisterNodeTypeHandler now returns the handler.
      The Hierarchy.SortChildren method got a new parameter, to enable sorting recursively.
    - Scripting: Changed: The HierarchyViewModel methods used to query flags were ambiguous because it did not specify they meant "all flags" versus "any flags". These methods are now deprecated, and new methods which specify if it is "all flags" versus "any flags" were added. (UUM-58061)
    - Scripting: Removed: Removed overloads of method Hierarchy.Add that did not take a parent node. (UUM-54851)
    - Scripting: Removed: UDP SDK package is now deprecated.
    - Shaders: Added: Support for typed texture declarations in HLSL which allow developers to sample integer texture formats robustly on all platforms
    - SRP Core: Added: Added TEMPLATE_X_FLT_HALF shader macros that defines functions with both min16float and float.
    - SRP Core: Added: Added TEMPLATE_X_HALF shader macros that define functions using min16float only.
    - SRP Core: Added: API to manage global textures
    - SRP Core: Added: callbacks when RenderPipeline is created or disposed. (UUM-20646)
    - SRP Core: Added: Foveated rendering API to fix FSR rendering
    - SRP Core: Added: New useDynamicScaleExplicit flag to render graph's TextureDesc which can be used to control the underlying RenderTexture's dynamic scaling behavior
    - SRP Core: Changed: Fixed typo in RenderGraph API, using lowercase for nativeRenderPassesEnabled property
    - SRP Core: Changed: Major update of the Native Render Pass Render Graph API (URP), moving out of Experimental.
    - SRP Core: Changed: Recent UISubset API has been adjusted and UI overlay pass made safer with URP RG.
    - SRP Core: Removed: Removed TEMPLATE_X_REAL shader macros.
    - TextCore: Obsoleted: Obsolete TextSettings.fallbackSpriteAssets. (UUM-52191)
    - UI Toolkit: Added: A string array named paths to the drag and drop API to reproduce what was available in the Editor.
    - UI Toolkit: Added: API to get the result of the last binding operation for a given binding id.
    - UI Toolkit: Added: disablePlayModeTint on VisualElement to opt-out of playmode tinting. Applies hierarchically so a user could retrieve the rootVisualElement on an EditorWindow to disable playmode tinting entirely on the window.
    - UI Toolkit: Added: toggleOnLabelClick attribute to Toggle and Foldout. This is enabled by default but can be disabled to prevent clicking on the elements label from triggering the value change. (UUM-52184)
    - UI Toolkit: Changed: Added Column.comparison and sortingMode on MultiColumnListView and MultiColumnTreeView to give a default sorting algorithm for sortable columns. This replaces the previous sortingEnabled API.
    - UI Toolkit: Changed: Exposed the enabledSelf property to both UXML and bindings.
    - UI Toolkit: Changed: Make VisualElement.disablePlayModeTint public
    - UI Toolkit: Changed: Marked UxmlTraits, UxmlFactory, and associated API as obsolete. This is now replaced by the UxmlElementAttribute.
    - Universal RP: Added: Added RG path only function for AddRenderPasses using ContextContainer instead of RenderingData
    - Universal RP: Added: ContextContainer items used as frame data for UniversalRenderer and Renderer2D e.g. UniversalLightData & UniversalCameraData.
    - Universal RP: Added: Exposed opaqueLayerMask and transparentLayerMask in UniversalRenderingData.
    - Universal RP: Added: Made Main Light Shadow Resolution and Additional Light Shadow Resolution settings public in the URP Asset.
    - Universal RP: Added: Made the cascade split settings public in the URP Asset.
    - Universal RP: Obsoleted: Mark non-rendergraph APIs as obsolete.
    - URP: Changed: Fixing resource setters in the URP UniversalResourceData that should not be public and will introduce errors when used.
    - Video: Added: WebCamKind.Unknown to be used as fallback when camera type is not recognized.
    Changes
    - 2D: Changed Shadow Caster 2D to provide a message that GPU skinning is not supported when it is enabled. (UUM-18815)
    - AI: Built-in navigation components are no longer hidden from the Add Component menu if the AI Navigation package is not installed. Instead, affected workflows provide shortcuts to install the package.
    - AI: Deprecated OffMeshLink component no longer displays in the Add Component Menu under any circumstances.
    - Android: The launcher/build.gradle evaluation now depends on unityLibrary/build.gradle evaluation. Therefore, the unityLibrary/build.gradle can no longer have any dependencies on the launcher/build.gradle.
    - Android: Unity will no longer need to force debugging symbols if Unity Cloud Diagnostics (UCD) is enabled. Users can manually choose the appropriate debug symbol level. Choosing the level affects how stack traces are resolved by UCD. For example, public symbols are enough to properly resolve function names, while debugging symbols provide filenames and line numbers. Debugging symbols, due to their size can increase build time and build size, which might be a limitation for some users.
    - Android: Upgraded the default Android Gradle Plugin version to 8.1.3.
    - Android: Upgraded the default Gradle version to 8.4.
    - Android: Upgraded the default targetSdkVersion and compileSdkVersion to 34.
    - Android: Upgraded the Java Development Kit (JDK) version for building Android apps to 17.
    - Android: When producing the symbols.zip package, the symbols will contain .so.sym or .so.dbg extension depending on the debugSymbolLevel. These extensions are provided by the Android Gradle plugin for backwards compatibility but you can still force the .so extension (for more information, check out Debug Symbol > format in the Build Settings window).
    - Asset Bundles: Modified the AssetBundle hash so it now depends only on the respective Multiplayer Role settings it targets.
    - Asset Bundles: Updated AssetBundle so that the AssetBundle hash now depends on Multiplayer Roles only if the feature is enabled.
    - Build Pipeline: Font assets are not stripped from Dedicated Server builds when Dedicated Server Optimizations are enabled. (UUM-713)
    - Build Pipeline: Made the Player Settings > Dedicated Server optimizations option, that strips all shaders and fonts, enabled by default.
    - Burst: Disabled Direct call for methods that are decorated with both [BurstCompile] and [UnmanagedCallersOnly] attributes because such methods shouldn't be called directly from managed code.
    - Burst: Removed all code specific to DOTS Runtime.
    - Burst: Updated the default LLVM version to 16.
    - Burst: Used mimalloc as the native allocator on Windows to speed up the concurrently executing LLVM work.
    - Editor: Accessing Transform data from 'OnDestroy' during an Undo operation is no longer allowed and an error message is logged. (UUM-31100)
    - Editor: Added a new RenderingLayerMask type for serialized property and a RenderingLayerMaskField to draw it.
    - Editor: Added a warning dialog to prevent users from closing the Multiplayer Playmode Clone window.
    - Editor: Added command to support Hub creating a new project, and connecting a project to Unity Version Control.
    - Editor: Added support for hiding RenderPipelineGraphicsSettings in GraphicsSettings page, persistent Scroll position and persistent active Tab.
    - Editor: Build Report printed to the Editor log no longer contains entries for "Scripts" and "Included DLLs". (UUM-56321)
    - Editor: Changed the layout of overlays when dragging over a container that would enforce a specific layout.
    - Editor: Do not write cloudProjectId in ProjectSettings.asset anymore since it should only be managed by Services.
    - Editor: Improved the visual anchoring of overlays.
    - Editor: Modified the ghost behavior of overlays.
    - Editor: Remove CalculateDirtyPaths and added functionality to use PersistentManager::GetStreamsWithDestroyedObjects directly. (UUM-48038)
    - Editor: Renamed the shortcut that opens the context menu in the Scene view from "Show Action Menu" to "Show Scene view context menu".
    - Editor: Reverted the new contextual menu.
    - Editor: Reworked the Physics project settings window and converted it to use UI Toolkit.
    - Editor: Switched to use drawers for Rendering Layers connected to Tags & Layers.
    - Editor: Updated the macOS Editor's minimum OS version requirement to macOS 11.
    - Editor: [Android] Moved Play Library checks for plugins and gradle dependencies into methods in 23.2 for use in Editor Tests, to avoid building player in every test. (UUM-44744)
    - Editor: [Android] Removed exceptions for unspecified versions when including Play Libraries due to logic changes when fixing Regex for Core-Common. (UUM-44744)
    - GI: Added code signing for Unity denoising DLLs.
    - GI: Moved code related to sampling to its own subfolder in the Light Transport package.
    - Graphics: BatchRendererGroup now supports procedural and indirect draw commands
    - Graphics: Camera API that wasn't compatible with SRP's now correctly logs warnings/errors where applicable. Also, updated documentation to reflect SRP capabilities in Camera API.
    - Graphics: Moved the editor for GlobalSettingsAssets directly to ProjectSettings > Graphics.
    - Graphics: When IRenderPipelineGraphicsSettingsStripper is defined, it owns the stripping of the IRenderPipelineGraphicsSettings, which previously required isAvailableInPlayerBuild. (XPIPELINE-804)
    - HDRP: Added Volumetrics settings to Area lights similar to other light types, to control their influence on volumetric fog when using the path tracer.
    - HDRP: Changed how the mask map ambient occlusion channel is taken into account in rendering to have better consistency between area lights and emissive quads.
    - HDRP: Improved the usage of the HDRP runtime resources.
    - HDRP: Made the Texture Streaming scene view debug draw mode unavailable. Use the reworked Mipmap Streaming debug views in the Rendering Debugger instead.
    - HDRP: Rectangle light and Line light now share same implementation.
    - IL2CPP: Prevented references to unused shared generic types from being collected when the script debugging is enabled.
    - macOS: Updated the macOS Runtime's minimum OS version requirement to macOS 11.
    - Package: Updated the package version of com.unity.scripting.python to 7.0.1.
    - Package Manager: Deprecated the UPM environment variable UPM_NPM_CACHE_PATH. Use the UPM_CACHE_ROOT environment variable instead.
    - Package Manager: Modied Client.AddAndRemove so it does not throw an error if the same packages are specified in packagesToAdd and packagesToRemove.
    - Package Manager: The package installation folder names have been shortened from <packageName>@<version> to <packageName> in the Library/PackageCache folder.
    - Physics: Errors related to mesh data will no longer print the assets path. This change was done in order to decouple error generation from some specific editor only functionality. We will be reworking the error messaging in the following patch releases.
    - Physics: Removed compatibility code that allowed Unity to load joints directly from assets created in Unity 4.x and older.
    - Physics: OnTriggerEnter events now have their matching OnTriggerStay dispatched after an OnTriggerEnter event, rather than wait for all OnTriggerEnter events to be dispatched.
    - Profiler: Removed extraneous calls to UpdateRendererBoundingVolumes when executing an empty CommandBuffer. (UUM-33237)
    - Profiler: The Highlights profiler module is now visible by default.
    - Shadergraph: Now all the nodes connected to the BaseColor block are taken into shader codegen when generating the picking pass, allowing custom picking-specific code to be included through custom function nodes. (UUM-62636)
    - UI: Added Unsupported MSAA Fallback in Player settings to specify how to handle cases with unsupported sample counts. (UUM-741)
    - UI Toolkit: Added a checked background to GradientField so the transparency is easier to see. (UUM-60804)
    - UI Toolkit: Removed unused border element from GradientField.
    - UI Toolkit: Users can no longer drag disabled selectors when using in-context editing in the UI Builder. (UUM-16090)
    - Universal RP: Added per-renderer filtering for renderer features.
    - Universal RP: Modified the Scene view camera so it now uses the same renderer that MainCamera uses in the scene instead of always using Default Renderer.
    - Universal RP: Moved the RenderObjects renderer feature out of the Experimental namespace.
    - Universal RP: The Auto option in SH Evaluation Mode, in the URP Asset, now chooses Per Vertex instead of Per Pixel on mobile and similar devices. (UUM-60483)
    - URP: Added RenderGraph support to URP Samples.
    - URP: Vulkan URP will use MSAA samples count fallback from Player settings. Prior to this x2 fallback would have been required upgrade to x4. (UUM-741)
    - Version Control: Added a message that appears after the first check-in, which contains a link to invite users to the organization.
    - Version Control: Added button for organization owner/admins to upgrade to DevOps subscription.
    - Version Control: Added new decorators for retained & locked files.
    - Version Control: Moved the button to invite users to the organization from the sub-menu to the toolbar.
    - Version Control: Updated description in the package.json, including an updated link to get started.
    - XR: Changed the reported Screen.width and Screen.height when using MagicLeap device.
    - XR: Removed the use of an intermediate texture when not required for XR rendering when scaling is used.
    - XR: The Oculus XR Plugin package is updated to 4.2.0.
    - XR: Updated the Oculus XR Plugin package to 4.1.2.
    Fixes
    - 2D: Fixed a memory leak in ShadowCaster2D. (UUM-46391)
    - 2D: Fixed an issue so that a Sprite Shape Renderer with mask interaction enabled can be masked by a Sprite Mask when using a URP pipeline. (UUM-59737)
    - 2D: Fixed an issue so that textures set from the Shader Graph shader can be applied for use in the Tilemap Renderer. (UUM-62066)
    - 2D: Fixed an issue where a GameObject instantiated by a Tile is recreated on the player when the user refreshes the Tile without changing the Tile. (UUM-45589)
    - 2D: Fixed an issue where LineRenderer and TrailRenderer lines were not visible when using URP Sprite materials. (UUM-44445)
    - 2D: Fixed an issue with Sprite preview where a small Sprite would have its pixels drawn inaccurately. (UUM-68491)
    - 2D: Fixed an issue with undo for GridSelection where undoing or redoing does not restore a GridSelection properly. (UUM-70084)
    - 2D: Fixed an issue with unitialized memory on sprites. (UUM-53181)
    - 2D: Fixed an issue with ShadowCaster2D so it does not throw an exception when provided with degenerate sprites. (UUM-37115)
    - 2D: Fixed an issue with TilemapCollider2D so that when the user updates tiles in CompositeOperation.None and switches to CompositeOperation.Merge, the collider shape is now updated accordingly. (UUM-58154)
    - 2D: Fixed crash on SpriteAtlas::GroupSprites when attempting to generate a Sprite Atlas without calling AssetDatabase.CreateAsset first. (UUM-62272)
    - 2D: Fixed dynamic batching to work with the Tilemap Renderer in Individual mode and the Sprite Renderer in URP when Renderers use a non-SRP batchable material and can be dynamically batched. (UUM-53185)
    - 2D: Fixed Invalid SortingGroup index set in Renderer error message appearing when a SortingGroup is created and another is deleted at the same time. (UUM-62716)
    - 2D: Fixed issue causing AnimatedTile to not animate in a player build. (UUM-55931)
    - 2D: Fixed issue where the error log "ScriptableRenderContext::ShouldUseRenderPipeline()" repeats continuously when running the DragonCrashers project in DX12 graphics mode. (UUM-69883)
    - 2D: Fixed missing stencil draw calls when rendering normals with Sprite Mask. (UUM-63214)
    - 2D: Fixed OpenGL issues when using render graph. (UUM-54333)
    - 2D: Fixed the Pixel Perfect Camera error when scale is set to 0. (UUM-40888)
    - 2D: Fixed the Tilemap Renderer by setting a default texture shader property so that it no longer uses the texture shader property from a previous renderer if the property is not set. (UUM-55308)
    - 2D: Fixed the high memory usage and crashing issue related to DynamicHeapAllocator::CreateTLSFBlock when opening project with Sprite Atlas V2 enabled. (UUM-43709)
    - 2D: Fixed the importing of sprite sheets with ISpriteEditorDataProvider so that it no longer generates broken sprites. (UUM-56410)
    - 2D: Fixed the issue causing a Sprite Atlas' secondary textures to not be rendered when used in a Shader Graph. (UUM-46398)
    - 2D: Fixed the issue causing the Editor to crash when Sprite Atlas content is edited in Play Mode. (UUM-61407)
    - 2D: Fixed the issue causing the URP Converter to not upgrade the material of imported .PSB characters to Sprite-Lit-Default. (UUM-1952)
    - 2D: Fixed the issue where a tile's StartUp is not called when refreshed if the tile had an instantiated GameObject. (UUM-57053)
    - 2D: Fixed the local bounds of 2D Freeform Light so that they don't change when the scene is reloaded. (UUM-49000)
    - 2D: Fixed the Shader Graph light texture node to work correctly with prefabs and preview windows. (UUM-1946)
    - 2D: Fixed the slice menu window so that it closes immediately when Sprite Editor window is closed. (UUM-61904)
    - 2D: Fixed URP Freeform Lights so that they no longer glitch when Light points are close to one another. (UUM-43318)
    - 2D: Fixed FullScreenRenderPass when using with the Pixel Perfect Camera. (UUM-34852)
    - 2D: Fixed GfxVersionList::Impl::GetVersion to no longer crash when opening the Project, Scene, and Game views. (UUM-35341)
    - 2D: Fixed TilemapCollider2D so it no longer crashes when a tilemap with tiles that have invalid Transform matrices is loaded. (UUM-41396)
    - 2D: Fixes Post Processing and Anti-aliasing during camera stacking when using Renderer2D. (UUM-40770)
    - 2D: Improved the performance of the Tilemap Renderer when you change material properties that does not require a BuildChunkJob. (UUM-53411)
    - 2D: Max Size is only applicable. On Master Textures and Secondary Textures always use the size as Master Texture (MainTex). (UUM-55671)
    - 2D: Modified SpriteRenderer so that changes to a material's color property during an animation preview now reset back to their original state after exiting the animation preview. (UUM-41892)
    - 2D: Removed the material upgrade dialog box during material upgrades for templates. (UUM-47093)
    - 2D: The Tilemap Renderer in Individual mode will use all secondary textures associated with sprites, when the sprites are using a Sprite Atlas texture with different secondary texture sources. (UUM-53666)
    - Accessibility: Fixed a crash when launching a project through the Android Studio debugger that uses the Screen Reader API while TalkBack is enabled on the test device. (A11Y-477)
    - Accessibility: Fixed accessibility nodes with the Slider role not being announced when focused with TalkBack. (A11Y-436)
    - Accessibility: Fixed an issue that prevented Unity from creating new AccessibilityNodes when the hierarchy is already active. (UUM-48004)
    - Accessibility: Fixed app hanging on iOS after turning VoiceOver on and off a few times. (UUM-62340)
    - Accessibility: Fixed fully off-screen accessibility nodes being skipped by TalkBack. (UUM-63462)
    - Accessibility: Fixed late update of isActive value on AccessibilityNode for Android issue.
    - Accessibility: Fixed the node that is focused on touch. (UUM-55447)
    - Accessibility: Fixed the ordering of native accessibility nodes that are moved or inserted into an active hierarchy on iOS. The ordering of elements in the native accessibility tree now remains consistent with the active C# hierarchy on iOS. (UUM-52879)
    - Accessibility: Replaced the broken AccessibilityNode.extraData API with AccessibilityNode.hint and made AccessibilityNode.selected an event. (UUM-44252)
    - AI: Clear the NavMesh.onPreUpdate callback list when entering play mode.
    - AI: Fixed a crash that happens when NavMesh Agents with active avoidance try to move between obstacles that carve the NavMesh in some particular locations. (UUM-49214)
    - AI: Fixed an issue where NavMesh.onPreUpdate listeners would get cleared after MonoBehaviour.OnEnable has been called.
    - AI: Fixed crashes and instabilities arising from hiding built-in Navigation components in menus. (UUM-53002)
    - AI: Linked NavMeshAgent, NavMeshObstacle and OffMeshLink components to their documentation pages. (UUM-55359)
    - Android: Added Auto Rotation behavior to the Orientation section. (UUM-44021)
    - Android: Added missing super.onRequestPermissionsResult for onRequestPermissionsResult call for both Activity and GameActivity. (UUM-58225)
    - Android: Added symbol settings to Android build profile.
    - Android: AndroidJavaObject now correctly follows dispose pattern and calls Dispose(false) from finalizer instead of Dispose(true) as it would call previously. (UUM-53674)
    - Android: Applied a fix to correctly set the sensor name and vendor when reporting to the input system package. Previously only sensor type was being reported, while name and vendor were empty strings. (UUM-47130)
    - Android: Cached libUnity and il2cpp image info for Android stacktrace optimizations. (UUM-61899)
    - Android: Disabled MemoryAdvice library integration since it crashes on some devices. (UUM-57044)
    - Android: Fixed a missing IPostGenerateGradleAndroidProject deprecation warning, it will be visible now. (UUM-57693)
    - Android: Fixed a bug where the Android Player setting Mute Other Audio Sources would not mute the audio from another application when the Player starts. There are two cases where another app's audio might not get muted when it should. This could happen if the other app is started before the Unity app or if the other app is played via the Android quick panel after the Unity app starts. (UUM-37753)
    - Android: Fixed a crash in development build when passing array of AndroidJavaObject to Java method. (UUM-60779)
    - Android: Fixed a crash that occurred when destroying and re-creating WebCamTexture on the same frame. (UUM-69176)
    - Android: Fixed a crash, when one of the extracted il2cpp resource is delete in application data folder, in case like this, application will reextract il2cpp resources again. (UUM-46362)
    - Android: Fixed a freeze when opening Icons section of Player Settings. (UUM-61146)
    - Android: Fixed a potential race condition during pause routine, which would cause application to accidentally quit instead of pausing. (UUM-30732)
    - Android: Fixed ad banner disappearance after suspend/resume (UUM-57151)
    - Android: Fixed an Android AAudio issue, where audio output latency could be 300ms or more. (UUM-41494)
    - Android: Fixed an issue that caused custom keystore creation to fail in the Keystore Manager for Android applications. (UUM-46300)
    - Android: Fixed an issue where AndroidJavaProxy cannot find private proxy methods. (UUM-44752)
    - Android: Fixed an issue where a black frame flashes when returning to Unity Game Activity from the home screen. (UUM-58966)
    - Android: Fixed an issue where a black screen with centred app icon would appear before the splash screen. The black screen is now removed to only display the splash screen. (UUM-41488)
    - Android: Fixed an issue where a black screen would appear for a few seconds when returning to the game after a paused state. (UUM-30881)
    - Android: Fixed an issue where closing the touch screen keyboard incorrectly set TouchScreenKeyboard.hideInput to false. (UUM-39642)
    - Android: Fixed an issue where splash background color was not always editable for Android, even if a splash screen background image is set. (UUM-60293)
    - Android: Fixed an issue where the Android build system asked for an API level that didn't exist. (UUM-40891)
    - Android: Fixed an issue where the Player didn't update correctly when changed to a pop-up view using Swipe for Pop-up view feature in Samsung devices. (UUM-48173)
    - Android: Fixed an issue where Unity would throw an error and prompt for manual installation while selecting target API level which is not the highest installed API level. Unity now displays a dialog with the option to install the missing API level. This new behavior is only available in non-batch mode while in batch mode you will still receive an error. (UUM-52052)
    - Android: Fixed an issue with downloading multiple asset packs in one request. (UUM-49133)
    - Android: Fixed an issue with JNI global reference table overflow when AndroidJavaObjects are deleted by garbage collector. (UUM-60727)
    - Android: Fixed an issue with setting screen brightness on Xiaomi phones with Android 11 or higher versions. The minimum screen brightness value is limited to 0.04. If you try to set the value lower than this limit, the screen brightness adjusts as per the system's brightness setting. (UUM-47926)
    - Android: Fixed an issue with usymtoolarm64 not being copied to the exported Gradle project. (UUM-53558)
    - Android: Fixed an issue with with using AndroidJavaObject.Set() for AndroidJavaProxy. (UUM-59734)
    - Android: Fixed an issue with APP_CMD_WINDOW_INSETS_CHANGED to correctly report for GameActivity when soft keyboard is opened/closed. (UUM-47094)
    - Android: Fixed an OnApplicationQuit issue that was missing scripting calls on Activity. (UUM-46396)
    - Android: Fixed Android surface background color when rendering over native UI. (UUM-32877)
    - Android: Fixed Application.Unload for GameActivity, GameActivity will now work in Unity As A Library environment. (UUM-54021)
    - Android: Fixed back gesture invoking UI elements. (UUM-48818)
    - Android: Fixed compatibility problem with com.unity.addressables.android package. (UUM-63971)
    - Android: Fixed fullscreen mediaplayer autoresume on GameActivity. (UUM-57153)
    - Android: Fixed Graphics.Blit with Vulkan PreTransform creating corrupted RenderTexture data in landscape orientation. (UUM-52910)
    - Android: Fixed Input.multiTouchEnabled setter. Previously, for some platform, if the setter was called before any touch event, the values would be disregarded. (UUM-47104)
    - Android: Fixed locations of unaligned load/stores on 32-bit Android. (UUM-46550)
    - Android: Fixed merged manifest path for permissions event. (UUM-51545)
    - Android: Fixed missing PropertyStringArray is missing Add/AddRange API in Configuration Manager. (UUM-58748)
    - Android: Fixed missing manifest.AddUsesPermissionSdk23 API in Configuration Manager.
    - Android: Fixed missing manifest.Application.AddReceiver API in Configuration Manager. (UUM-58739)
    - Android: Fixed OnDemandRendering's ignored renderFrameInterval. (UUM-32486)
    - Android: Fixed patch button being disabled for active build profile.
    - Android: Fixed PersistentUnitySurface potentially crashing on destroy if given context is not an Activity.
    - Android: Fixed render sorting performance regression.
    - Android: Fixed screen brightness issue with Android phones, Oppo and Xiaomi, on which Screen.brigthness now returns correct values. Previously the values would sometimes be more than 1.0.
    - Android: Fixed Screen.brightness getter function to adjust brightness based on a logarithmic scale for Android Pie or higher versions. (UUM-48141)
    - Android: Fixed SoftInput layout issue on some Android device (Samsung Android 12+ devices). (UUM-59379)
    - Android: Fixed SoftInput visibility issue on some Android device when hideInput is enabled (Samsung Android 12+ devices). (UUM-57858)
    - Android: Fixed the IMGUI input even position when screen is scaled to different resolution than the view it's in with input backend set to New Input. (UUM-68787)
    - Android: Fixed the JNI:GetInternetReachability exception so that it no longer occurs when using APIs like Application.internetReachability when running with GameActivity. (UUM-42522)
    - Android: Fixed the Screen.brightness setting to work correctly. Because the changes are applied from https://developer.android.com/reference/android/view/WindowManager.LayoutParams#screenBrightness path, the system setting display brightness remains unaffected, thus not affecting other applications.
    - Android: Fixed unexpected permissions when using .androidlibs. (UUM-69911)
    - Android: Fixed UnityEditor.Android.GradleDependencies.GetEngineGradleDependencies() to return game activity dependencies, when both Activity and GameActivity are selected in application entry points.
    - Android: Fixed unpatched activity tags in AndroidManifest. (UUM-40774)
    - Android: Fixed URP FinalBlit on Adreno 3XX GPUs. (UUM-41795)
    - Android: Fixed warnings from deprecated Gradle attributes. (UUM-70596)
    - Android: Fixed AndroidJavaProxy to correctly map Null variables (e.g, empty string) for reflection search and automatic tests. (UUM-30243)
    - Android: Improved ANR recovery logic, Unity will try not to exceed ANR threshold (5 seconds) when pausing the application, in case of a failure to sync UI thread with main game thread, Unity will ignore the synchronization and will attempt to continue the application execution. You can also control the timeout for synchronization via UnityPlayerForActivityOrService.SynchronizationTimeout.setTimeoutForAll, an overridden activity java file is required for this purpose. Or perform a call via C# new AndroidJavaClass("com.unity3d.player.UnityPlayerForActivityOrService$SynchronizationTimeout").CallStatic("setTimeoutForAll", 1000); (UUM-56705)
    - Android: Make it possible to target API Level 32, when building with GameActivity, in this case, Unity will downgrade the following package version - androidx.appcompat:appcompat 1.6.1 -> 1.5.1, androidx.core:core 1.9.0 -> 1.8.0 (UUM-61916)
    - Android: Make UnityPlayerForActivityOrService.SynchronizationTimeout properly available in java files. (UUM-57949)
    - Android: Modified permission requests to queue instead of being sent as a batch, to fix an issue where requests were closing when multiple permission requests were sent. (UUM-47781)
    - Android: Reduced the amount of time that the screen is displayed without including the cutout area. (UUM-55678)
    - Android: Remove UTF BOM from SDK tools commands. (UUM-60488)
    - Android: Removed deprecation warning for IPostGenerateGradleAndroidProject. (UUM-61103)
    - Android: Removed unity.allow-resizable-window meta-data for multi-window support on large screens.
    - Android: Temporarily hide 'Upgrade templates to C#...' button in Player Settings.
    - Android: Temporarily hide AndroidProjectFiles properties - GradleProperties, GradleSettings, LauncherBuildGradle, LauncherManifest, ProjectLevelBuildGradle, UnityLibraryBuildGradle, UnityLibraryManifest until Google's EDM4U will no longer requires templates.
    - Android: The symbols are no longer included in AAB when manually building gradle project (e.g., from Android Studio), if the Symbols output options is not set to App Bundle. Unity will instead use the android.bundle.includeNativeDebugMetadata property. (UUM-69888)
    - Android: UI integration for Android build profile settings.
    - Android: Updated BouncyCastle library version from 1.47 to 1.70 to fix security vulnerabilities. (UUM-13774)
    - Android: Updated android docs to account for new Android SDK/JDK version in 2023.3. (UUM-63953)
    - Android: Updated GetEngineGradleDependencies() API to return asset pack dependencies. (UUM-21692)
    - Android: Upgraded Google play.asset-delivery package version to 2.1.0 to resolve compatibility problem related to Play Asset Delivery with Android 14. (UUM-54157)
    - Android: WebcamTexture on android requires camera permission granted. (UUM-45900)
    - Android: You can override UnityPlayerActivity.java, by placing the file directly in Unity project, this was accidentally broken with incremental build pipeline. (UUM-57761)
    - Animation: Blend Tree assets are now correctly deleted when overwritten by an Animation Clip in an Animator. (UUM-62807)
    - Animation: Fixed a crash when destroying an animator with a playable graph which containts a scene handle when the graph hasnt been executed. (UUM-48364)
    - Animation: Fixed a crash when loading asset bundle with an animation clip build with 2021.x or earlier. (UUM-59736)
    - Animation: Fixed a memory leak that occurred when opening a scene with a subscene containing animator objects. (UUM-40709)
    - Animation: Fixed a potential editor hang when previewing transitions to states set with an extremely large speed multiplier. (UUM-35558)
    - Animation: Fixed a transition preview issue that was ending before the target state has fully played. (UUM-59080)
    - Animation: Fixed an issue with mask values that occurred in the animation layer mixer when animated values were read from an animation C# job. (UUM-42174)
    - Animation: Fixed Animator.parameters returning 0 until you start play mode in some cases. (UUM-55778)
    - Animation: Fixed blend tree preview not displaying when inspecting blend tree. (UUM-54402)
    - Animation: Fixed bug where animation rigging constraints and AnimationScriptPlayable could not set translation on the hips of a humanoid, even if its root motion was disabled. (UUM-51103)
    - Animation: Fixed crash with multithreaded evaluation after calling ApplyOverrides on AnimatorOverrideController. (UUM-31848)
    - Animation: Fixed deleting StateMachine leaking outgoing transitions. (UUM-58996)
    - Animation: Fixed documentation for Animator.SetIKRotation() that was misleading. (UUM-44533)
    - Animation: Fixed Editor spike when selecting a GameObject with a Playable Director Component. (UUM-59654)
    - Animation: Fixed for a previous safety check on DiscreteCurve preventing the creation of curves when the specified binding path is not found. (UUM-56995)
    - Animation: Fixed incorrect display of the event markers in the FBX importer Animation tab. (UUM-49717)
    - Animation: Fixed issue where animation clips with discrete curves (animating enums) in asset bundles built before unity 2022 would not load properly. (UUM-40841)
    - Animation: Fixed size of Animator right panel when left panel is closed (UUM-46921)
    - Animation: Prevent UnityEditor.EditorCurveBinding.DiscreteCurve API from creating unsupported discrete curve bindings. (UUM-49567)
    - Apple TV: Fixed a crash that occurred in UnityWebRequest when running on tvOS versions lower than 17. (UUM-69946)
    - Apple TV: fixed build of generated xcode project with xcode beta. (UUM-44352)
    - Apple TV: Fixed on screen keyboard unresponsive to controller when Remote.allowExitToHome is set to false. (UUM-39962)
    - Asset Bundles: Added note about texture streaming in the AssetBundle.UnloadAllAssetBundles docs. (UUM-62176)
    - Asset Bundles: Fixed a deadlock in AssetBundleUnloadOperation. (UUM-48887)
    - Asset Bundles: Fixed an issue where a race condition during multiple Asset Bundle unload operations could result in a crash. (UUM-49715)
    - Asset Bundles: Fixed an issue where AssetBundles aren't rebuilt when the "BatchRendererGroup Variants" shader stripping setting is changed. (UUM-48757)
    - Asset Bundles: Fixed an issue where shaders in asset bundles built with older Unity versions treated material keywords as invalid when using SubShaders.
    - Asset Bundles: Fixed hangs with GC and crashes in Content File loading.
    - Asset Import: Fixed an issue where an fbx with missing materials would cause a crash during import. (UUM-53167)
    - Asset Import: Fixed an issue where older assets referencing URP materials have missing asset preview thumbnails. (UUM-41411)
    - Asset Import: Fixed assertion errors that occur when importing case insensitive plugins. (UUM-55556)
    - Asset Import: Fixed closing the editor after reverting the properties in editor. It now resets the m_DirtyIndex to 0. (UUM-21202)
    - Asset Import: Fixed issue where "Multiple plugins with the same name" error occurs when importing bundle files in .androidpack folders on Mac. (UUM-35317)
    - Asset Import: Fixed Mac texture size limit bug and Arm64 macOS compatibility by updating PVRTexTool from v4.17 to v5.5. (UUM-3775)
    - Asset Pipeline: Accelerator settings accessors check for null settings ptr. (UUM-46142)
    - Asset Pipeline: Fixed "The system cannot find the path specified" popup window when trying to active a Virtual Player. (UUM-63715)
    - Asset Pipeline: Fixed an issue where a transient artifact was not destroyed when a script asset had GUID changed. (UUM-41123)
    - Asset Pipeline: Fixed crash when loading large Content Archive. (UUM-60469)
    - Asset Pipeline: Improve stability of Accelerator by resolving some threading issues. (UUM-52073)
    - Asset Pipeline: Prevent folders hidden in Project Browser causing new empty folders. (UUM-33443)
    - Audio: Added lazy loopEnd evaluation to avoid keeping a value of 0. Downloaded audio files were were not updating this, causing a division by zero in the playback process. (UUM-32163)
    - Audio: Fix crash when AudioSource set to loop with AudioRandomContainer set to automatic + pulse + time 0 (no randomization) (UUM-47270)
    - Audio: Fixed a crash that happens when the clip list in an ARC is modified while it is simultaneously triggered from an AudioSource. (UUM-47089)
    - Audio: Fixed a crash that occurred when entering and leaving playmode while a game object is selected in the hierarchy. (UUM-58481)
    - Audio: Fixed a crash that occurs when you change the resource field on an AudioSource from one AudioRandomContainer to another and press play. (UUM-49287)
    - Audio: Fixed a performance issue that would occur when having many inactive audio sources in a scene. (UUM-52194)
    - Audio: Fixed an issue that caused the clip volume in the Audio Random Container window to appear as if it is magically synchronised with the main volume.
    - Audio: Fixed an issue in the audio random container where the sliders in some cases would push the textfield out of the window when randomisation is enabled. (UUM-57188)
    - Audio: Fixed an issue that caused the Audio Random Container window to constantly repaint. (UUM-49804)
    - Audio: Fixed an issue that made it difficult to see the icons on the Audio Random Container in light mode. (UUM-40487)
    - Audio: Fixed an issue that occurred when selecting a game object with an audio source that points to an audio random container. The issue would throw an UI error in the editor console. (UUM-54810)
    - Audio: Fixed an issue that occurs when you change the resource field on an AudioSource from one AudioRandomContainer to another and press play. (UUM-49293)
    - Audio: Fixed an issue that prevented signals generated via OnAudioFilterRead from functioning as expected. (UUM-58426)
    - Audio: Fixed an issue that prevented the Script Inspector from showing a VU meter when the script overrides OnAudioFilterRead. (UUM-51045)
    - Audio: Fixed an issue that would cause scheduled clips in the Audio Random Container to be prematurely stopped when enabling scene audio. (UUM-52755)
    - Audio: Fixed an issue that would cause the ARC to crash for certain parameter settings. (UUM-54898)
    - Audio: Fixed an issue that would cause the yellow lines that shows the amount of randomisation that is applied in the audio random container to be drawn incorrectly. (UUM-50328)
    - Audio: Fixed an issue that would cause undo/redo to sometimes work incorrectly for the Audio Random Container resource field. (UUM-62119)
    - Audio: Fixed an issue that would make it appear is if the volume of audio random container clips is magically synced to the main volume of the asset.
    - Audio: Fixed an issue that would sometimes cause a game object to throw an error in the log when drawing the game objects inspector, if the game object implements OnAudioFilterRead. (UUM-61145)
    - Audio: Fixed an issue where non-streaming audio clips loaded through UnityWebRequest were using up more memory than needed by keeping two copies of the same data. (UUM-2391)
    - Audio: Fixed Audio Reverb Zone's not being affected by the Global Volume setting when the Spatial Blend of the Audio Source is lower than 1. (UUM-18191)
    - Audio: Fixed AudioMixer clicks when abruptly changing volume in Start() (UUM-368)
    - Audio: Fixed AudioRendererLeakTest timeout.
    - Audio: Fixed AudioSource.Play() not starting from time=0 after manually seeking with AudioSource.time and then calling AudioSource.Stop(). (UUM-48572)
    - Audio: Fixed clip list in the AudioRandomContainer editor window not redrawing correctly after undoing a reorder of the list elements. (UUM-54744)
    - Audio: Fixed crash when resetting AudioSettings during async object loading. (UUM-10237)
    - Audio: Fixed exception being thrown when collapsing and expanding the clip list in the AudioRandomContainer editor window. (UUM-46923)
    - Audio: Fixed exposed parameters in audio mixers not being applied in standalone builds. (UUM-52523)
    - Audio: Fixed issue where creating an audio source while the editor window for the AudioRandomContainer asset was open could throw an error. (UUM-55731)
    - Audio: Fixed issue where interacting with the editor window for the AudioRandomContainer asset could possibly break the rendering of other windows, e.g. the scene view. (UUM-55116)
    - Audio: Fixed issue where the editor window for the AudioRandomContainer asset would throw an error after restoring an asset with unsaved changes from outside the editor. (UUM-58713)
    - Audio: Fixed issue where the editor window for the AudioRandomContainer asset would throw an error every frame after deleting the selected asset and docking the window. (UUM-58713)
    - Audio: Fixed issue where the editor would possibly crash when clicking the preview button in the editor window for AudioRandomContainer. (UUM-45676)
    - Audio: Fixed not being able to undo adding a clip to the list via drag-and-drop in the AudioRandomContainer editor window. (UUM-32031)
    - Audio: Fixed null list element in the clip list in the AudioRandomContainer editor window after removing an element and undoing it, followed by a domain reload (e.g. entering/exiting playmode). (UUM-51034)
    - Audio: Fixed seeking of serialized MP3 files. (UUM-62086)
    - Audio: Fixed the mixer pitch issue not applying correctly to AudioRandomContainer scheduling. (UUM-43495)
    - Audio: Move AudioResource into UnityEngine.Audio namespace. Make AudioRandomContainer internal as it currently has no API surface. (UUM-50339)
    - Audio: [Android] Fixed a crash when an audio device is recording, either the device is disconnected or AudioSettings.Reset is called, and then the recorded AudioClip properties are accessed. (UUM-45665)
    - Audio: [Platform Audio] Add .buginfo for Code Ownership & Issue Handling.
    - Bug Reporter: Fixed an issue that could cause Bug Reporter project archives to fail when creating multiple editor instances with the MPMM package. (UUM-53115)
    - Build Pipeline: Fixed a crash that occurred when building AssetBundles with Multi-Process building enabled. (UUM-59121)
    - Build Pipeline: Fixed a regression where mesh components are stripped if its shader is made of UsePass only references. (UUM-57201)
    - Build Pipeline: Fixed adding or removing assets to bundles will cause other assets to be rebuilt. (UUM-57495)
    - Build Pipeline: Fixed an issue that generated incorrect AssetBundle dependencies. (UUM-43175)
    - Build Pipeline: Fixed an issue where Editor would crash due to a corrupted json file. (UUM-48603)
    - Build Pipeline: Fixed AssetBundle incremental build so that it detects script namespace and assembly changes. (UUM-35766)
    - Build Pipeline: Improved the performance of "Write data build dirty tracking information" for AssetBundle builds. (UUM-46585)
    - Build Pipeline: Log error in editor rather than closing the editor if building a player failed due to invalid inputs. (UUM-40764)
    - Build Pipeline: Enable Dedicated Server optimizations option fails on incremental Asset Bundle builds. (UUM-32589)
    - Build System: clang fails when header file mtimes are updated and a precompiled header isn't regenerated. (UUM-44429)
    - Build System: Fixed a compile database generation crash and duplicate entries when using dependencies.
    - Build System: Fixed an issue where building a player could fail because of file paths being longer than 260 characters on Windows.
    - Build System: Fixed an issue where building a player could fail because of file paths being longer than 260 characters on Windows. (UUM-49428)
    - Build System: Fixed pigz-mac-aarch64 artifact which previously was a linux binary. (UUM-42368)
    - Build System: Maked MsvcInstallationLocator.ParseVSWhereResult accept input with a BOM.
    - Burst: Burst recompiles assemblies due to hashes mismatching because of the way assembly defines are combined into the hash.
    - Burst: Fixed a bug where Burst would emit errors when Burst was disabled via the --burst-disable-compilation command line option.
    - Burst: Fixed a compile-time performance regression that could result in slower Burst compilation and increased memory use during compilation.
    - Burst: Fixed a compiler crash that would occur when compiling different assemblies that define methods or types with an identical name and namespace.
    - Burst: Fixed a crash that would occur when Burst could not find an external function.
    - Burst: Fixed a performance regression for callstack generation when using burst. (UUM-62074)
    - Burst: Fixed an error that would occur when trying to use a direct call to a nested protected class.
    - Burst: Fixed an error thrown by the Burst Inspector when opening a non-static job with special characters in its name.
    - Burst: Fixed an issue that caused an empty variable to be returned if it is between a zero initializer.
    - Burst: Fixed an issue that prevented jobs from being Burst compiled for player builds using the high stripping level.
    - Burst: Fixed an issue when converting a uint to a float.
    - Burst: Fixed an issue where Burst sometimes returned an incorrect value for static readonly fields or static constructors.
    - Burst: Fixed an issue where converting a negated unsigned type to a float in Burst would produce a different value than converting in .Net/Mono.
    - Burst: Fixed an issue where storing avx2 to the stack resulted in a slot with the wrong alignment.
    - Burst: Fixed an issue where the Burst Inspector would handle negation of unsigned types differently than .Net for static readonly fields or static constructors.
    - Burst: Fixed an issue where underflows of nint and nuint at compile time would lead to incorrect code.
    - Burst: Fixed an issue where use of certain intrinsics could cause a compile error even if properly guarded by the appropriate IsXXXSupported property.
    - Burst: Fixed an issue where using the Armv9 target in the Burst Inspector would not correctly format the assembly.
    - Burst: Fixed an issue where, if a compilation error occurred in a location without valid debug information, building a player might not generate any files and wouldn't display an error message.
    - Burst: Fixed android builds throwing a NullReferenceException.
    - Burst: Fixed arithmetic and bitwise negation on native integers.
    - Burst: Fixed burst not differentiating between overloaded generic functions such as T foo(int val) and T foo(T val) when the function calls are foo(1); foo<int>(1). Burst would previously only compile the T foo(T val) function.
    - Burst: Fixed constant SHUFFLE function not seen as a constant when called indirectly through a FunctionPointer.
    - Burst: Fixed incorrect alignment for v128 when performing an indirect access.
    - Burst: Fixed invalid burst string formats leading to internal compiler error.
    - Burst: Fixed QNX player builds on 32-bit ARM
    - Burst: Fixed that changing certain player build platform settings (like SDK version) would not trigger Burst to recompile.
    - Burst: Fixed the Burst Inspector not displaying target methods if namespace/class contained the method name.
    - Burst: Fixed the managed fallback for bursts intrinsic functions cvt_ss2si, cvtss_si32, and cvtss_si64 to follow midpoint rounding standard of nearest even.
    - Burst: Fixed System.NotImplementedException: Unimplemented Instruction Extension Tail_ error when the code contained tail-calls.
    - Burst: For native debug information, type symbols can now be referenced using :: separator between namespaces (C++ style) - E.g. Example.Type becomes Example::Type.
    - Burst: If an exception is thrown from burst compiled code in the Editor on Windows there was potential for certain callee saved registers to be corrupted. In order to fix this ( editor only - player builds are unaffected), we now save some additional context on each entry point.
    - Burst: Linking libstdc++/libc++ statically on HMI platforms.
    - Burst: Native debug information would fail to reflect the contents of parameters to functions.
    - Code Editor: Fixed a compilation error when XR package isn't installed. (UUM-59868)
    - Core: Fies Probe Volume helpbox refers to "simplification levels" which is inconsistent with other UI. (UUM-49254)
    - Core: Fixed a Bake Probe Volume only doesn't run asynchronously issue. (UUM-60395)
    - Core: Fixed a crash when baking sky occlusion. (UUM-59920)
    - Core: Fixed a data race inside the job system where weak memory systems could hang when waiting and attempting to steal parallel work submitted from another thread. (UUM-41806)
    - Core: Fixed a shader warning in 'TraceVirtualOffset'. (UUM-59950)
    - Core: Fixed an issue that caused the Jobs project to fail when EditModeAndPlayMode/Jobs is run over three times. (UUM-40042)
    - Core: Fixed an issue where APV generates bricks of excluded subdivision levels. (UUM-70558)
    - Core: Fixed an issue where APV validity sampling ignored light layers. (UUM-70560)
    - Core: Fixed an issue where APVs would load slowly. (UUM-70561)
    - Core: Fixed an issue where dilation does not work with Sky Occlusion. (UUM-58724)
    - Core: Fixed an issue where importing a hybrid package could fail if there was already a package with a prefix of the hybrid package's UPM package name. (UUM-43102)
    - Core: Fixed an issue where object creation was recorded on a non-main thread which caused a nullptr in the ObjectDispatcher.
    - Core: Fixed an issue where ProbeVolumeDebug shader gave a warnings first time opening a project. (UUM-59752)
    - Core: Fixed APV compilation on webgl. (UUM-56418)
    - Core: Fixed blending scenario option visible on URP. (UUM-48529)
    - Core: Fixed error when clearing APV data. (UUM-49469)
    - Core: Fixed errors that occurred when using baked GI node on builtin. (UUM-70376)
    - Core: Fixed GameObject being set to dirty after setting layer to the existing layer value.
    - Core: Fixed the location of the light probe's intensity scale control. (UUM-47263)
    - Core: Fixed the wizard so it does not ask to upgrade when an upgrade is not required.
    - Core: Fixed tooltip. (UUM-54574)
    - Core: Fixed updating adjustment volume content. (UUM-57567)
    - Core: Improved shutdown sequence. (UUM-29648)
    - Core: Updated ForEach jobs to no longer allocate internal data using the TempJob allocator to prevent leaks specific to warnings for long-running jobs. (UUM-45532)
    - Documentation: Fixed example code for AudioSource.GetSpectrumData by using AudioSource instead of AudioListener. (UUM-52561)
    - Documentation: Removed mentions of web player in Microphone.Start (UUM-52555)
    - Documentation: Update documentation on SystemInfo.hdrDisplaySupportFlags. (UUM-59911)
    - done: Fixed the issue with the Progress modal window where it stayed on top of every other window and couldn't be moved. (UUM-51429)
    - DX12: Fixed a crash caused by allocating too many descriptor heaps in DirectX 12 and ray tracing. (UUM-40496)
    - DX12: Fixed a memory leak in DX12 when the profiler was open. (UUM-29297)
    - DX12: Fixed a rare crash when using ray traced reflections in HDRP. (UUM-41580)
    - DX12: Fixed an issue by discarding any problematic GfxDevice calls and informing the user. (UUM-53442)
    - DX12: Fixed an issue that caused the error "ReleaseDynamicVBOFrame: Unexpected frame". TryDequeue was not being used properly internally, which would cause wrong frame dequeues and a frame mistach ID.
    - DX12: Fixed an issue where sub meshes were invisible in ray tracing effects on AMD GPUs. (UUM-44073)
    - DX12: Fixed crash during rearranging docked windows in Editor. (UUM-60697)
    - DX12: Fixed for Intel GPU driver crash when querying multisample quality levels with sampler feedback formats and sample counts larger than 1. (UUM-47661)
    - DX12: Fixed miplevel count validation errors for HDRP dynamic resolution. (UUM-56669)
    - DX12: Fixed performance regression in the editor with the multi-threaded mode. (UUM-55172)
    - DX12: Fixed the silent crash, when loading RenderDoc on DX12. (UUM-63933)
    - DX12: Fixed the enable_ray_tracing_shader_debug_symbols pragma so HLSL source code is now available when you debug ray tracing shaders in PIX or NVIDIA Nsight. (UUM-46164)
    - DX12: Fixed ComputeBuffer CopyCount to return correct value following multiple compute dispatches. (UUM-66900)
    - DX12: Improved the consecutive drawcalls with UAV that write to the same target to respect render ordering. (UUM-66473)
    - DX12: Removing assert that was added accidentally "ReleaseDynamicVBOFrame: Expected node in client scratch release queue" in dx12.
      Explanation:
      This was a previous fix were ReleaseDynamimcVBOFrame: Unexpected frame kept spamming. This fix did not remove another assert "ReleaseDynamicVBOFrame: Expected node in client scratch release queue" which is now included in this change.
      The expectation is that dx12 should now not produce any TTY errors when opening / closing projects. (UUM-28962)
    - Editor: "Assertion failed on expression" errors spammed due to an attachment limit. (UUM-42643)
    - Editor: - Fixed OnMouseDown not working when using multiple displays that have been resized or moved (Display C# API) on Windows.
      - Fixed Display.RelativeMouseAt() reporting invalid values when using multiple displays that have been resized or moved (Display C# API) on Windows.
      - Fix Input.mousePosition reporting invalid values when using multiple displays (Display C# API) on Windows. (UUM-44474)
    - Editor: A progress pie chart has been added to appear in the macOS dock when Unity first opens your project. (UUM-68465)
    - Editor: ActiveMultiplayerRole was serialized in Editor project settings, causing unnecessary changes (noise) in source control. This setting is more aligned with user preferences, rather than project-wide settings. (UUM-58652)
    - Editor: Add placeholder label in inspector for uninitialized managed reference. This provides parity with IMGUI behavior. (UUM-54080)
    - Editor: Added a fix for UnityEngine.Bindings.ThrowHelper.ThrowNullReferenceException after deleting a profile in the Build Profile window. (UUM-69505)
    - Editor: Added a fix to prevent log warnings from appearing when a Progress is registered. (UUM-39631)
    - Editor: Added a space in contextual menu for TMP. (UUM-55626)
    - Editor: Added a tooltip for all properties in the Search auto complete dialog to have the complete property name. (UUM-35583)
    - Editor: Added a top-level memory scope to prevent temporary memory leak. (UUM-39899)
    - Editor: Added a warning for when the Editor doesn't have screen recording permissions to pick colors from other apps with the color picker tool. (UUM-770)
    - Editor: Added an inspector option to remove unused properties. (UUM-39647)
    - Editor: Added character limit of 1024 to context menu search field. (UUM-45672)
    - Editor: Added command line argument to select active build profile.
    - Editor: Added context menu tooltips for build profile window.
    - Editor: Added horizontal scrolling to the Windows Editor when holding the Shift key and scrolling with a mouse.
    - Editor: Added IDisposable support for both decorators and property drawers. Now, when the Editor is destroyed, the IDisposable feature allows for automated cleanup, making it easier to safely remove the drawer from editor event subscriptions and efficiently manage resources. (UUM-44220)
    - Editor: Added MultiColumnListView editor bindings. (UIT-2079)
    - Editor: Added reporting of allocation errors that used to cause a crash. (UUM-41211)
    - Editor: Added support to foldouts bound to SerializedProperty.isExpanded to open all child foldouts when you hold the Alt key and select the foldout. (UUM-36151)
    - Editor: Added support to make newly created ScriptableSingleton instances editable. (UUM-40767)
    - Editor: Adding BACKSPACE as an assignable shortcut for MenuItems. (UUM-56067)
    - Editor: Addressed an editor inconsistency where shortcuts for GameObject actions weren't shown in the Scene Hierarchy context menu. (UUM-55597)
    - Editor: Allow searching for values in Query Builder propositions in camelcase.
    - Editor: Appended numbers to shortcut profiles with the default name "New profile" to differentiate them from each other. (UUM-35742)
    - Editor: Avoid a type initialization exception that can occur on Apple Silicon when a .NET executable is run as part of the Unity Editor tooling. (UUM-44304)
    - Editor: Build profile and context menu integration. It's possible to duplicate, delete and rename build profiles from build profile window.
    - Editor: Build Profile Window - Fixed for Android classic profile constantly consuming more cpu than it should. (UUM-64770)
    - Editor: Build Profiles - Fix 'Missing types referenced from component BuildProfile on game object' every time when entering play mode. (UUM-60846)
    - Editor: Build Profiles - Fix for Build Profile Window top buttons that were leaving blue edges after user clicked on them and labels were not centered (UUM-61621)
    - Editor: Bunch of small improvements for Global Settings and Graphics Settings.
    - Editor: Cap layout name length at 128. (UUM-49216)
    - Editor: Changed lens flare behavior to ignore Camera Culling Masks. (UUM-44191)
    - Editor: Changed static list in Tags&Layers page to Dynamic list. (UUM-58252)
    - Editor: Changed the behaviour of the Rendering Layer Mask option UnusedLayer31 to select all layers except UnusedLayer31. (UUM-29344)
    - Editor: Clearing of the Console window will clears messages/errors from status bar. (UUM-49269)
    - Editor: Closing the gradient editor window prior to closing the gradient color picker window will no longer prevent the gradient color picker window from being opened again. (UUM-45382)
    - Editor: Context menus in transient search now respect light mode themes on macOS. (UUM-59378)
    - Editor: Copying shared scenes when duplicating a classic build profile.
    - Editor: Corrected load Editor Sharpness on first use. (UUM-44470)
    - Editor: Corrected the phrasing of the MonoBehaviour.Start() comment added to new scripts. (UUM-60811)
    - Editor: Custom bindings should be preserved when converting subgraph properties into subgraphs. (UUM-46780)
    - Editor: Custom Property Drawers properly works with interfaces. (UUM-55311)
    - Editor: Disable unstable test (UUM-49538)
    - Editor: Disabled started animation in DetachFromPanelEvent callback. (UUM-45660)
    - Editor: Disabling build and build and run buttons and displaying warning when editor is compiling or when virtual texturing is enabled and not valid for build profile window.
    - Editor: Editor crash fix with entities.graphics if "projector component" is in a scene (UUM-34313)
    - Editor: EditorApplication.focusChanged now gets triggered using operating system dependent application focus events. (UUM-41894)
    - Editor: Enlarged the Editor context menu that appears while Device Simulator is displaying a device with a small screen. (UUM-49202)
    - Editor: Ensure starting Unity doesn't restart Indexing. (UUM-55851)
    - Editor: Ensure X is visible in Picker mode if needed, and that pressing X actually return back to the initial query. (UUM-61201)
    - Editor: Ensured that instance ID is setup within built-in fragment shaders prior to crossfade dither macro calls, which uses the shader instanced property unity_LODFadeArray. (UUM-48066)
    - Editor: Ensured that that APV data is not written into the LightProbes object. (UUM-53434)
    - Editor: Ensured we do not change the scroll area if a selection is identical. (UUM-47748)
    - Editor: Enum fields shown as Integer when serialized in a nested structure (UUM-47081)
    - Editor: Exposed an option in the Unity's Preferences settings to switch the Editor's default rendering mode between SDF or Bitmap. (UUM-49006)
    - Editor: Fix an issue where the Columns and Rows values are not updating in a TextureImporter preset. (UUM-59090)
    - Editor: Fix APV debug shaders names and tags on URP (UUM-47145)
    - Editor: Fix crash when reordering some nested lists in MonoBehaviours (UUM-47108)
    - Editor: Fix issue where scene view wireframe mode and shaded wireframe mode would not work with GPU driven enabled.
    - Editor: Fix memory leaks and read out of bound. (UUM-54527)
    - Editor: Fix potential deadlocks in the editor with the graphics jobs on. (UUM-53927)
    - Editor: Fix that a bad merge of scene file can cause a crash in RuntimeSceneManager::UnloadAllScenesWithoutDestroyingGameObjects when exiting Play Mode. (UUM-53145)
    - Editor: Fix that Scene view's: "Frame Selected" is not working for GameObjects in Sub Scenes for Entities (UUM-53521)
    - Editor: Fix to make sure Clear commands work when using RenderPass API and Vulkan (UUM-41126)
    - Editor: Fixed "ArgumentNullException" error in the Console when selecting certain ScriptableObjects and entering Play Mode. (UUM-39898)
    - Editor: Fixed "Assertion failed on expression: '!m_InsideContext'" error in editor console. (UUM-46849)
    - Editor: Fixed "Invalid memory pointer was detected" error in native layout code. (UUM-51256)
    - Editor: Fixed "UnityException: Could not find the requested Platform Texture Settings" error that was thrown when selecting a texture when the Dedicated Server Build Support module was installed and the Build Target was missing from the texture's metadata. (UUM-44737)
    - Editor: Fixed a bug on Linux where the Edit menu was displaying the wrong default shortcut for Delete. (UUM-59833)
    - Editor: Fixed a bug that caused a font asset to be recreated with every domain reload. (UUM-32171)
    - Editor: Fixed a bug that caused a warning to display in Visual Studio 2022 about Unity.UIToolkit.SourceGenerator.UxmlSerializedDataGenerator. (UUM-41432)
    - Editor: Fixed a bug that caused the Sprite preview to not display after exiting PLay mode in a project with URP. (UUM-41498)
    - Editor: Fixed a bug that prevented ProjectCapabilityManager.AddGameCenter() from adding the required entitlement. (UUM-44172)
    - Editor: Fixed a bug where built-in scene tools would override the hot control on modifier key down. (UUM-53630)
    - Editor: Fixed a bug where dangling mouse shortcuts are called on a MouseUp event with a null context. (UUM-56283)
    - Editor: Fixed a bug where mouse interactions with the Scene view window were not working as intended. (UUM-62950)
    - Editor: Fixed a bug where Overlays continued to be dragged after right-clicking to open their contextual menu. (UUM-47747)
    - Editor: Fixed a bug where pressing the RenderDoc capture button in the Game view dock would incorrectly throw errors. (UUM-45877)
    - Editor: Fixed a bug where the Edit Collider button was missing from the GameObject property window for specific selection criteria. (UUM-33811)
    - Editor: Fixed a bug where the variant Inspector context was not disabled after being disabled. (UUM-44331)
    - Editor: Fixed a bug where the width of the context menu would fluctuate depending on its longest visible item. (UUM-48374)
    - Editor: Fixed a cascaded shadow maps popping on first cascade when shadowmask was on. (UUM-49523)
    - Editor: Fixed a cpu water simulation issue. (UUM-59365)
    - Editor: Fixed a crash caused by Leak Detection Mode: EnabledWithStackTrace when tracked allocations are made on worker threads (UUM-51798)
    - Editor: Fixed a crash in audio mixer when loading assets that are corrupted. (UUM-43714)
    - Editor: Fixed a crash in PreviewTextureManager when changing materials while play-mode is active. (UUM-44179)
    - Editor: Fixed a crash in shortcut generation on Mac OS. (UUM-56950)
    - Editor: Fixed a crash issue that occured when importing large FBX files. (UUM-38104)
    - Editor: Fixed a crash issue when using the BatchRendererGroup API. (UUM-62718)
    - Editor: Fixed a crash issue with AudioMixer.SetFloat that occured when entering the Play mode. (UUM-35984)
    - Editor: Fixed a Crash on NSException when the display dialog contains a long message containing multibyte characters which are clipped when the message was abbreviated by ellipses. (UUM-62757)
    - Editor: Fixed a crash on WalkTypeTreeInternal when updating field on a scriptable object. (UUM-34559)
    - Editor: Fixed a crash related to throwing BuildFailedException in BuildProcessor.PrepareForBuild. (UUM-62231)
    - Editor: Fixed a crash that occured when scrolling through context menus with the auto expand delay set to 0. (UUM-36604)
    - Editor: Fixed a crash that occurred in deleted GameObjects as overrides. (UUM-45217)
    - Editor: Fixed a crash that occurred when loading certain corrupted scenes. (UUM-43713)
    - Editor: Fixed a crash that was caused by the shader variant collection (SVC) shaders with dynamic branching when entering the Play mode. (UUM-70277)
    - Editor: Fixed a crash that would occur when the memorysetup-job-temp-allocator-block-size property was unaligned to the power of 2. (UUM-42428)
    - Editor: Fixed a crash that would occur when trying to reopen a project that has Package Manager resolution errors. (UUM-43054)
    - Editor: Fixed a crash when baking lightmaps with light cookies smaller than 32x32. (UUM-43149)
    - Editor: Fixed a crash when destroying a GameObject while selecting it in the Scene View. (UUM-10412)
    - Editor: Fixed a crash when OpenCL shader kernel creation fails. (UUM-58400)
    - Editor: Fixed a crash when opening the context menu while editing delayed text field on Mac. (UUM-44009)
    - Editor: Fixed a crash when resuming while there is a breakpoint in a ContextualMenuPopulateEvent handler on Mac. (UUM-60845)
    - Editor: Fixed a crash when running with -nographics and Universal RP. (UUM-61538)
    - Editor: Fixed a crash when trying to import too much mesh vertex blend shape data. (UUM-53148)
    - Editor: Fixed a deadlock in Mac editor when in game mode and toggling vsync off. (UUM-49755)
    - Editor: Fixed a delayed inspector reload after RP switch issue. (UUM-46943)
    - Editor: Fixed a GPU crash on some platforms using HLSLcc when sampling probe volumes in the pixel shader in URP. (UUM-40621)
    - Editor: Fixed a issue that caused tooltips on a disabled MenuItem to not work.
    - Editor: Fixed a issue where rich text was not rendering in EditorGUILayout.HelpBox. (UUM-44245)
    - Editor: Fixed a issue where the value of all password arguments provided from the command line in the editor logs were not hidden. (UUM-52202)
    - Editor: Fixed a Linux crash related to MenuItem Validate() calling Menu.SetChecked(). (UUM-49439)
    - Editor: Fixed a memory warning in the console issue. (UUM-63549)
    - Editor: Fixed a misleading error message when renaming a shortcut profile to a long string. (UUM-48040)
    - Editor: Fixed a mismatch between memory alloc and dealloc. (UUM-54086)
    - Editor: Fixed a performance regression in the TextureImporter. (UUM-36303)
    - Editor: Fixed a performance regression when fetching characters in text. (UUM-60599)
    - Editor: Fixed a race condition in Profiler Recorder which led to a crash. (UUM-44946)
    - Editor: Fixed a rare case where the editor would repeatedly ask to reset user layouts on startup. (UUM-48800)
    - Editor: Fixed a rare deadlock that could occur when building DOTS based projects. (UUM-46148)
    - Editor: Fixed a regression where the 'convert to property' context menu option on constant value nodes would fail. (UUM-55342)
    - Editor: Fixed a shortcut conflict that would appear when clicking with the left mouse button in the Scene View and when the pan tool was enabled in the Tools overlay.
    - Editor: Fixed a typo for the exception message thrown from the InvokeRepeating method. (UUM-45420)
    - Editor: Fixed ADB performance. (UUM-70242)
    - Editor: Fixed alignment issues with the Label and Value fields when editing LazyLoadReference and MinMaxGradient fields. (UUM-29883)
    - Editor: Fixed an assertion from Default Volume Editor. (UUM-60024)
    - Editor: Fixed an Editor crash if a compilation error happened during import from code altering compilation assets during activate. (UUM-58299)
    - Editor: Fixed an editor crashes with a callstack resulting in validateMenuItem. (UUM-33727)
    - Editor: Fixed an error appearing in the shortcut manager while editing bindings. (UUM-47946)
    - Editor: Fixed an exception when selection a transition inside a sync layer, in the Animator window. (UUM-59739)
    - Editor: Fixed an incremental rebuild error when the build contained VideoClip or VideoPlayer object types.
    - Editor: Fixed an initialized SerializedObject and EnabledProperty in Editor issue. (UUM-52682)
    - Editor: Fixed an invalid texture binding in worldspace. (UUM-58524)
    - Editor: Fixed an issue by clarifing that the slope in GetSteepness is always positive.
    - Editor: Fixed an issue by using the active Scene view instead of the one that is currently being drawn in SceneViewViewpoint's UpdateViewpointMotion method.
    - Editor: Fixed an issue for macOS where maniulating the game view during Play Mode caused deadlocks.
    - Editor: Fixed an issue for size field enabled on Build Profiles list. (UUM-61862)
    - Editor: Fixed an issue in Frame Debugger where the Editor would crash when it retrieved keywords for a custom Compute Shader. (UUM-33301)
    - Editor: Fixed an issue in Frame Debugger where the Event Sliders and Buttons didn't update the window properly. (UUM-37778)
    - Editor: Fixed an issue in FrameDebugger that caused incorrect font sizes in the tree view to display. (UUM-30317)
    - Editor: Fixed an issue in the Editor window so it now minimizes correctly after being clicked on in the Windows taskbar. (UUM-44284)
    - Editor: Fixed an issue in URP's Forward+ reflection probe tiling. (UUM-58983)
    - Editor: Fixed an issue on iOS, with MSAA and HDR enabled, now properly use the same backbuffer format. (UUM-52461)
    - Editor: Fixed an issue on macOS and Linux where the control shortcut modifier (^) was not displaying when introduced inside a custom menu window. (UUM-40686)
    - Editor: Fixed an issue related to building to windows network paths. (UUM-52668)
    - Editor: Fixed an issue that caused the context menu to break when overriding auto expand delay setting to no delay. (UUM-41764)
    - Editor: Fixed an issue that caused the context menu to display menu string shortcuts that contain the Enter key inline. (UUM-40161)
    - Editor: Fixed an issue that caused the context menu to get stuck if scrolling through items via keyboard. (UUM-42917)
    - Editor: Fixed an issue that caused the Editor to freeze after selecting large compressed cubemaps with no mipchain. (UUM-28610)
    - Editor: Fixed an issue that caused the overlay menu to disappear when opening the preset dropdown. (UUM-40167)
    - Editor: Fixed an issue that prevented pasting text into some fields of the Package Manager window. (UUM-42932)
    - Editor: Fixed an issue that prevented sibling menus with identical items from appearing when one was being shown already. (UUM-40168)
    - Editor: Fixed an issue that prevented submenus from opening when re-hovering on the same submenu after a non-expandable item. (UUM-36700)
    - Editor: Fixed an issue that prevented the EditorUtility.OpenFilePanelWithFilters() function from applying filters correctly on macOS with 2 part extensions. i.e. tar.gz. (UUM-63515)
    - Editor: Fixed an issue that truncated a warning message in UIBuilder. (UUM-40427)
    - Editor: Fixed an issue to ensure that if we use a default ObjectField it doesn't throw a null context exception. (UUM-64366)
    - Editor: Fixed an issue to ensure the editor properly set the current mode after domain reload or after packages have been loaded. (UUM-64765)
    - Editor: Fixed an issue were Menu items were disabled on macOS if a dropdown is a component of a modal window. (UUM-53549)
    - Editor: Fixed an issue when entering detail painting mode no longer crashes the Editor when the TerrainData contains corrupt data. (UUM-62515)
    - Editor: Fixed an issue when Fields that could still be edited even though multi-editing is not supported when multiple Game Objects are selected should no longer be visible. (UUM-61080)
    - Editor: Fixed an issue when the build profile workflow diagnostic flag is enabled, on OSX platform, the user build settings' getters and setters forward to the respective setting in OSX classic build profile. The internal platform settings in EditorUserBuildSettings stay in sync with the classic build profile for that target platform when using EditorUserBuildSettings::SetPlatformSettings and EditorUserBuildSettings::GetPlatformSettings directly.
    - Editor: Fixed an issue when the build profile workflow diagnostic flag is enabled, on Windows Standalone and UWP platforms, the platform build settings forward to the respective setting in Windows Standalone (player and server)/UWP classic build profiles and vice-versa.
    - Editor: Fixed an issue when the build profile workflow diagnostic flag was enabled, on Android platform, the platform build settings forward to the respective setting in Android classic build profiles and vice-versa.
    - Editor: Fixed an issue when UI Builder load or create a new document during viewport zoom animation. The animation was not interrupted and final zoom value was not expected one. (UUM-58641)
    - Editor: Fixed an issue where "Char" values were overwritten when selecting multiple GameObjects. (UUM-49347)
    - Editor: Fixed an issue where Delete Shortcut Profile window was not a fixed size. (UUM-48165)
    - Editor: Fixed an issue where 2D collider gizmos were not rendered when selecting the parent. (UUM-41829)
    - Editor: Fixed an issue where a delay and an extra space could occur on a new context menu. (UUM-40254)
    - Editor: Fixed an issue where a new context menu would be incorrectly resized on Linux. (UUM-35014)
    - Editor: Fixed an issue where active custom build profile shouldn't get reset when setting a property in EditorUserBuildSettings that doesn't exist in the BuildProfilePlatformSettingsBase.
    - Editor: Fixed an issue where all key events to querybuilder were not forwarded. (UUM-52356)
    - Editor: Fixed an issue where an assert is triggered when calling EditorApplication.Exit() with a native debugger attached on MS Windows. (UUM-56930)
    - Editor: Fixed an issue where an error message was not displayed if selected denoiser was not supported. (UUM-26098)
    - Editor: Fixed an issue where an invalid error was given. (UUM-34635)
    - Editor: Fixed an issue where an unable to load icon error message could appear on package import for global editor tools.
    - Editor: Fixed an issue where Arm64 Architecture was not correctly detected on Arm64 machines. (UUM-56059)
    - Editor: Fixed an issue where Assembly Definitions could not be created again in Safe Mode. (UUM-52100)
    - Editor: Fixed an issue where context menus could persist after domain reload if they were opened just before the reload. (UUM-36954)
    - Editor: Fixed an issue where Directx12 DrawBuffersBatchMode CPU speed was not optimal. (UUM-54195)
    - Editor: Fixed an issue where Dirty Assets were not being duplicated in the Project window. (UUM-41536)
    - Editor: Fixed an issue where Esc did not cancel color assignment on Mac. (UUM-37966)
    - Editor: Fixed an issue where Esc would not reset (clear) the ProjectBrowser searchfield. (UUM-43503)
    - Editor: Fixed an issue where Frame Debugger captures can become unstable.
    - Editor: Fixed an issue where GUI in the Scene were using an incorrect offset when Scene filtering was active. (UUM-61753)
    - Editor: Fixed an issue where HierarchyPropertyId was not directly useful in managed and is now internal. (UUM-53085)
    - Editor: Fixed an issue where IME input would not work with Input System when using Chinese (Simplified) input bug resolution.
    - Editor: Fixed an issue where InputManager was not being reset when calling EditorUtility.DisplayDialog() on Windows/Linux. (UUM-58579)
    - Editor: Fixed an issue where NodeHandlers defines in Native code have their C# Init and Dispose functions were not called properly. (UUM-53954)
    - Editor: Fixed an issue where printing the physical file path when Unity would not find a corrupted artifact file. (UUM-53919)
    - Editor: Fixed an issue where projects would sometimes crash following an editor version upgrade if their project contained js.meta files. (UUM-57909)
    - Editor: Fixed an issue where rich text tags did not support single quotes tags. (UUM-59167)
    - Editor: Fixed an issue where screen space reflection debug lines did not appear (HDRP-3060)
    - Editor: Fixed an issue where setting AppendHashToAssetBundleName to true would sometimes cause code that should be preserved to be stripped. (UUM-48574)
    - Editor: Fixed an issue where shader was not SRP Batcher compatible when using array in UnityPerMaterial cbuffer. (UUM-52178)
    - Editor: Fixed an issue where some context menu items would send the Editor application window to the background. (UUM-37286)
    - Editor: Fixed an issue where sometimes the cloud project ID does not get included in the build.
    - Editor: Fixed an issue where sprites wouldn't be generated due to incorrect NPOT scaling setting. (UUM-67831)
    - Editor: Fixed an issue where SRP Batcher would not break the batch properly if a computebuffer is used in a material. (UUM-55669)
    - Editor: Fixed an issue where the clicking Open Scene List in the Build Profile Window highlights correct list option. (UUM-68478)
    - Editor: Fixed an issue where the default value of the Compress Textures on Import setting was changed. (UUM-41982)
    - Editor: Fixed an issue where the default value was not added for texture compression format.
    - Editor: Fixed an issue where the Editor height would shrink when changing the layout. (UUM-30875)
    - Editor: Fixed an issue where the GameView Scale slider was reading the display Scale from the wrong display. (UUM-42833)
    - Editor: Fixed an issue where the hierarchy wouldn't repaint after cutting and pasting a game object. (UUM-53037)
    - Editor: Fixed an issue where the hotkey would appear in the label of the selected item of a UIElements.PopupField and a EditorGUILayout.Popup. (UUM-6243)
    - Editor: Fixed an issue where the KeyDown event from the Context menu's search field would be propagated to other windows. (UUM-55638)
    - Editor: Fixed an issue where the middle mouse button was not centering the SceneView on the selected object. (UUM-58466)
    - Editor: Fixed an issue where the ObjectField would show the wrong label when showing mixed values. (UUM-52962)
    - Editor: Fixed an issue where the offset of a camera position was incorrect when using the light placement tool. (UUM-47863)
    - Editor: Fixed an issue where the Prefab Menu entry could contain no actions. (UUM-52350)
    - Editor: Fixed an issue where the project browser lock icon would ping for items that could not actually be framed. (UUM-47122)
    - Editor: Fixed an issue where the resize cursor showed up when hovering over a draggable tab. (UUM-59161)
    - Editor: Fixed an issue where the script did not compiled with a certain folder/asmdef configuration in the Assets folder.
    - Editor: Fixed an issue where there were not any safety checks and proper error messages for indirect draw commands. (UUM-37103)
    - Editor: Fixed an issue where transparent shadows on objects were not rendered correctly when static batching. (UUM-36082)
    - Editor: Fixed an issue where Allocator.Temp memory would internally deallocate memory aggressively and result in temp memory performance regressions.
      Fixed an issue where flushing on the main thread would cause memory stomp using Allocator.Temp. (UUM-45113)
    - Editor: Fixed an issue where CullingParameters.isOrthographic was not always sync with CullingParameters.lodParameters.isOrthographic. (UUM-61249)
    - Editor: Fixed an issue where ManagedTempMemScope was not always correctly created on job worker threads, which could lead to errors being thrown when using Allocator.Temp. (UUM-45483)
    - Editor: Fixed an issue with HelpBox not parsing escape sequence correctly. (UUM-40338)
    - Editor: Fixed an issue with Frame Debugger to prevent textures from leaking when inspecting shadowmaps. (UUM-32862)
    - Editor: Fixed an issue with re-enabling or re-disabling GPU Resident Drawer by settings outside the Render Pipeline Asset. (UUM-55817)
    - Editor: Fixed an issue with text not being displayed under certain conditions. (UUM-53949)
    - Editor: Fixed an issue with the Colors Inspector window, where the DrawAAPolyLine method modified the source color values. (UUM-7840)
    - Editor: Fixed an issue with the Check for Updates window displayed in the Window > Panels dropdown menu even when it's meant to be closed. (UUM-26519)
    - Editor: Fixed an issue with the derived components not indexing in Prefabs properly. (UUM-41735)
    - Editor: Fixed an issue with the GameView warning message overlapping the toolbar. (UUM-32297)
    - Editor: Fixed an issue with the preview window displaying an empty space at the bottom, which was caused by the preview container. (UUM-49716)
    - Editor: Fixed an issue with the Windows Player where an incorrect resolution is used and reported by Screen.width and Screen.height. This occurred when the player was started on a monitor with different DPI settings compared to the main Windows monitor. (UUM-41799)
    - Editor: Fixed an issue with word and paragraph selection. (UUM-67715)
    - Editor: Fixed and issue where the TextField selection is too sensitive. (UUM-15800)
    - Editor: Fixed APV data not cleared after increasing Min Render Size. (UUM-58973)
    - Editor: Fixed APV virtual offsets or sky occulsion baking for big meshes. (UUM-52552)
    - Editor: Fixed atmospheric scattering at close range. (UUM-56955)
    - Editor: Fixed baking large APVs by baking in batches. (UUM-58353)
    - Editor: Fixed blinking icon in the Cameras overlay. (UUM-37467)
    - Editor: Fixed blocky artifacts on volumetric clouds when volumetric fog wa enabled. (UUM-59698)
    - Editor: Fixed build errors due when switching between build targets using buildPlayer command line options. (UUM-34899)
    - Editor: Fixed Burst exception callstacks incorrectly excluding first stack frame (UUM-53573)
    - Editor: Fixed case where closing a docked window could result in overlapping sibling windows. (UUM-41817)
    - Editor: Fixed casting integers to memory labels. (UUM-57246)
    - Editor: Fixed Child object not correctly destructed during scene unloading when detached from its parent in OnDestroy V2 (UUM-35019)
    - Editor: Fixed Cmd+Ctrl+Q shortcut closing the Editor on macOS.
      Fixed Ctrl key is ignored when creating shortcuts with Cmd key. (UUM-48077)
    - Editor: Fixed color glyphs not being displayed when using IME. (UUM-55755)
    - Editor: Fixed Color picker preview can now sample from the menu bar and the dock area. (UUM-52823)
    - Editor: Fixed Color Space so it no longer triggers an incorrect RenderTexture warning when you change color space. (UUM-16386)
    - Editor: Fixed compute shaders in Vulkan so you can now use reserved GLSL words as buffer variable names. (UUM-41272)
    - Editor: Fixed context menu not showing up when right-clicking a UnityEvent in Inspector. (UUM-59240)
    - Editor: Fixed context menu search field not showing the Cut, Copy, Paste menu when right clicking and the field was empty. (UUM-51688)
    - Editor: Fixed copy properties on material variants. (UUM-53121)
    - Editor: Fixed copying properties between materials not correctly dealing with color space. (UUM-47973)
    - Editor: Fixed CPU architecture in the Plugin Inspector resetting when the user applied changes. (UUM-45756)
    - Editor: Fixed crash in LMDB_Transaction::AbortAndRestart(). (UUM-70115)
    - Editor: Fixed crash in tlsf when doing large allocation. (UUM-56232)
    - Editor: Fixed crash of an import worker process during asset importing which results in "Unexpected transport error from import worker 0" error in the Editor log. (UUM-64341)
    - Editor: Fixed Crash on ContainerWindow::ToggleMaximize when EditorWindow is closed during Undo (UUM-48402)
    - Editor: Fixed crash that occurs when opening the Occlusion Culling window. (UUM-506)
    - Editor: Fixed crash when opening project with corrupted library (DBVersion corrupted) (UUM-41316)
    - Editor: Fixed crashes in the menu controller that happened during a domain reload. (UUM-34847, UUM-35943)
    - Editor: Fixed creating an Assembly Definition that did not use the correct NewAssembly template rather than the NewTestAssembly template. (UUM-63819)
    - Editor: Fixed creating and cloning new VolumeProfiles through the Global Settings UI so that it no longer creates an empty asset on disk. (UUM-45909)
    - Editor: Fixed data-driven lens flare error when enabling debug lighting mode. (UUM-61085)
    - Editor: Fixed default and secondary action invocation in Search window (keyboard + double-click) (UUM-55883)
    - Editor: Fixed depthnormals texture under 2-pass shader. (UUM-56610)
    - Editor: Fixed Diagnostics Preference Page not showing up correctly after clicking on button in the warning message. (UUM-60295)
    - Editor: Fixed dialogs in Windows so new line characters work correctly. (UUM-42521)
    - Editor: Fixed duplicate menu separator when displaying Undo menu for Show Latest Action First/Last. (UUM-44338)
    - Editor: Fixed edge cases for Same Properties query generation. (UUM-61273)
    - Editor: Fixed editor crash when right clicking on curve field. (UUM-44471)
    - Editor: Fixed Editor freezes when PrefabUtility.LoadPrefabContents is called in AssetPostprocessor.OnPostprocessAllAssets for a moved prefab. (UUM-54362)
    - Editor: Fixed Editor performance issue when opening an ShaderVariantCollection asset containing more than 10k child variant objects by shifting from IMGUI to UI Toolkit. (UUM-41588)
    - Editor: Fixed empty slots appearing in the context menus when separators were grouped together. (UUM-52397)
    - Editor: Fixed error thrown from UnityYAMLMerge when comparing similar sequences. (UUM-31240)
    - Editor: Fixed errors that occurred when selecting Open containing folder in the two-pane Project Browser. (UUM-35952)
    - Editor: Fixed exception when enabling multi-atlas texture on a FontAsset. (UUM-61515)
    - Editor: Fixed flickering due to intensity being changed during the first frame. (UUM-57173)
    - Editor: Fixed flipping scale of water surface. (UUM-54974)
    - Editor: Fixed Floating window does not stay on top of the Editor when clicking anywhere on the main Editor window. (UUM-53157)
    - Editor: Fixed foam accumulation in editor. (UUM-56020)
    - Editor: Fixed foam not following current map. (UUM-51505)
    - Editor: Fixed for 2023.3.X: Calling TrackPropertyValue from ListView.bindItem can throw an exception. (UUM-46918)
    - Editor: Fixed for active indicator being poorly readable in light mode on Build Profile window. (UUM-60941)
    - Editor: Fixed for light mode icon on Build Profile window. (UUM-60552)
    - Editor: Fixed GameObject Prefab in the Hierarchy window having a bigger font size when it is disabled. (UUM-61447)
    - Editor: Fixed GDiagProfileOpenCLJobs is now a compile time constant.
    - Editor: Fixed GPU timings for Ray Tracing shader dispatches and acceleration structure builds on the GPU being always 0 in GPU Profiler module. (UUM-61360)
    - Editor: Fixed graphics tests for APV Sky Occlusion. (UUM-56242)
    - Editor: Fixed hangs in stream socket while profiling player. (UUM-31087)
    - Editor: Fixed how we index folder and folder combinations for the dir: filter. (UUM-56923)
    - Editor: Fixed il2cpp builds on macOS and iOS with Xcode 15b6 or newer.
    - Editor: Fixed IMGUI CalcSize() to take advance space into account. (UUM-46147)
    - Editor: Fixed IMGUI HelpBox text going out of bounds. (UUM-49235)
    - Editor: Fixed import error of symlinks. (UUM-46992)
    - Editor: Fixed incorrect color sample results with the eyedropper tool Color Picker on macOS. (UUM-60339)
    - Editor: Fixed incorrect separator creation behavior that created empty spaces in the context menu. (UUM-46926)
    - Editor: Fixed Index manager doesn't override file or folder if user cancels the OpenDialog. (UUM-58792)
    - Editor: Fixed Index null ObjectReference. These can be searched with <propertyName>=none. (UUM-61256)
    - Editor: Fixed indexing in playmode: when in playmode we do not start asset indexing. When the user stops playmode, the relevant asset indexing tasks will start. (UUM-58793)
    - Editor: Fixed infinite recurssion when loading assemblies with circular references in the Editor. (UUM-68119)
    - Editor: Fixed inspector window refreshing and fields losing focus each time a modification was made to a prefab. (UUM-51430)
    - Editor: Fixed Install with Unity Hub does not select the Standalone module in the Hub. (UUM-59507)
    - Editor: Fixed InvalidOperationException when clearing inactive background progresses. (UUM-54039)
    - Editor: Fixed issue preventing the color picker from selecting colors from the Windows task bar.
    - Editor: Fixed issue that could cause modal windows to be blank when opened. (UUM-927)
    - Editor: Fixed issue when dragging selectable field in IMGUI. (UUM-56528)
    - Editor: Fixed issue where certain monitor layouts will confuse which monitor to open menus on MS Windows. (UUM-48008)
    - Editor: Fixed issue where gizmos would always render in Prefab Context Mode irregardless of gizmos visibility setting. (UUM-47113)
    - Editor: Fixed issue where renaming assets in the project browser sometimes failed to take focus, requiring an extra click before being able to type the new name. (UUM-48858)
    - Editor: Fixed issue where the Selection's active context would be set to null after importing an asset. (UUM-51712)
    - Editor: Fixed issue where the wrong fallback would be used when using styles. (UUM-46002)
    - Editor: Fixed issue where the wrong value would be displayed for stepped curves. (UUM-30927)
    - Editor: Fixed issue where using font-weight tag without a fallback would not apply synthetic bold. (UUM-58666)
    - Editor: Fixed issue where StateMachineBehaviour messages did not send when they were used on Animator Controller Override sync layers. (UUM-41684)
    - Editor: Fixed issue with CharacterTable in FontAsset having duplicated entries. (UUM-61516)
    - Editor: Fixed issue with CharacterTable in FontAsset having duplicated entries. (UUM-61533)
    - Editor: Fixed issue with how the size of the text was being calculated when preserving whitespaces. (UUM-52215)
    - Editor: Fixed issue with IMGUI not calculating text size properly. (UUM-52215)
    - Editor: Fixed issue with imgui text size calculation on multiline (UUM-53863)
    - Editor: Fixed issue with IsEllided property in TextHandle sometimes being invalid. (UUM-58784)
    - Editor: Fixed issue with missing asset notifications for assets with transient artifacts. Notification missing when asset is forced imported or new artifact is generated with source asset is changed. (UUM-47712)
    - Editor: Fixed issue with Mixed lightmodes not working in the Player. (UUM-41407)
    - Editor: Fixed issue with sprite text asset selection in the inspector. (UUM-48683)
    - Editor: Fixed issue with sprites not working in text when using complex text features (UUM-57614)
    - Editor: Fixed issue with text being corrupted under certain circumstances. (UUM-67343)
    - Editor: Fixed issue with text being corrupted under certain circumstances. (UUM-68077)
    - Editor: Fixed issue with text with styling (bold/italic) sometimes disappearing. (UUM-60919)
    - Editor: Fixed issue with WebGL and Android subtarget being incorrect when activating build profiles. (UUM-61956)
    - Editor: Fixed issues with updating IMGUI TextField from code. (UUM-48752)
    - Editor: Fixed issues with updating IMGUI TextField from code. (UUM-49261)
    - Editor: Fixed items added to the Create Menu when a new package is added to the project will be correctly ordered in the menu.
    - Editor: Fixed jam AllAssemblies breaks build profiles window. (UUM-62620)
    - Editor: Fixed light transport package doc.
    - Editor: Fixed lighting tab padding. (UUM-49294)
    - Editor: Fixed Linux editor not responding to modifier keys. (UUM-53997)
    - Editor: Fixed Live subdivision UI for APV. (UUM-49238)
    - Editor: Fixed LODGroup inspector that sometimes collapsed on LOD adding/removal. (UUM-48823)
    - Editor: Fixed low CPU performance issues with entities.graphics/BRG, Vulkan, and large batches of similar meshes. (UUM-33174)
    - Editor: Fixed Mac Editor crash that could occur during Play mode if shaders needed to compile while creating a new Material with the Inspector panel open. (UUM-56959)
    - Editor: Fixed macOS platform not having XcodeApi if iOS platform support is not present. (UUM-56448)
    - Editor: Fixed material preview editor header buttons' functionality. (UUM-49673)
    - Editor: Fixed material variants hierarchy merging with locks. (UUM-59617)
    - Editor: Fixed materials with shaders using grab passes that were generating incompatible keyword space assertions. (UUM-60832)
    - Editor: Fixed memory corruption when closing aux window when dialog box shows up. (UUM-53154)
    - Editor: Fixed memory leak in player connection multicasting. (UUM-57340)
    - Editor: Fixed menu items being displayed in different background colours when they are selected multiple times on OSX. (UUM-41082)
    - Editor: Fixed missing APV icons. (UUM-60578)
    - Editor: Fixed missing APV include in ComplexLit shader. (UUM-39531)
    - Editor: Fixed missing SH vertex evaluation keywords in various secondary URP shaders. (UUM-39531)
    - Editor: Fixed Mouse bindings appearing twice when rebinding a shortcut entry in the Shortcut Manager window. (UUM-56740)
    - Editor: Fixed multiline error/warning compiler messages getting ignored.
    - Editor: Fixed multiline error/warning compiler messages getting igonred.
    - Editor: Fixed null reference exceptions in Build Profile window when domain reload happens. (PLAT-7294)
    - Editor: Fixed null reference exceptions that occurred when using the keyboard to navigate context menu sub-menus on Linux. (UUM-51687)
    - Editor: Fixed ObjectField label not updating when assigning a null value through the Inspector window. (UUM-27629)
    - Editor: Fixed occasional freeze when calling UnityWebRequest.ClearCookieCache. (UUM-54043)
    - Editor: Fixed on windows the UI mouse coordinate which was truncated or with a wrong offset on some scaled screen. (UUM-48527)
    - Editor: Fixed Opaque Layer Mask filters out meshes that use the 31st Layer. (UUM-17764)
    - Editor: Fixed overlay menu option being enabled when overlay menu was closed. (UUM-40162)
    - Editor: Fixed oversized Help Box icon padding on scaled displays. (UUM-49206)
    - Editor: Fixed performance issue when selected objects in the inspector contained cyclic SerializedReferences. (UUM-31375)
    - Editor: Fixed performance regression in TextCore. (UUM-60599)
    - Editor: Fixed player build issue with needed assemblies being omitted from the build. (UUM-44770)
    - Editor: Fixed poor performance and poor code readability of the SpeedTree 9 reader. (UUM-57579)
    - Editor: Fixed Preset Selector shown in text mode since there is no search propositions available. (UUM-62701)
    - Editor: Fixed preset to have their own searchpropositions (query block). (UUM-59118)
    - Editor: Fixed pressing the Esc key changing the values of other properties when editing a property of the RectTransform. (UUM-56007)
    - Editor: Fixed probes debug disappearing after changing subdivision levels. (UUM-58971)
    - Editor: Fixed problem with sending editor.buildPackageList analytics event. (UUM-49560)
    - Editor: Fixed ProgressWindow tab title casing. (UUM-51698)
    - Editor: Fixed Project Browser in AdvanceSearchEngine treats all t: and l: as t= and l=. (UUM-61220)
    - Editor: Fixed Project window content font size not matching the Editor font size when the icons are minimized. (UUM-61754)
    - Editor: Fixed PropertyDrawer not refreshed when using shared [SerializeReference] values fields (UUM-52572)
    - Editor: Fixed Render Graph update of shared resources to update "last used frame" of last shared resource in the list. (UUM-59082)
    - Editor: Fixed render variants not being created if the Materials folder didn't already exist. (UUM-49802)
    - Editor: Fixed renderdoc capture button in linux editor not capturing drawings. (UUM-57914)
    - Editor: Fixed renderqueue override with shadergraph materials. (UUM-42131)
    - Editor: Fixed report windows exes as not runnable on OSX & Linux. (UUM-59940)
    - Editor: Fixed saving a scene causing bloom to become disabled. (UUM-60867)
    - Editor: Fixed scene template dependency list view in inspector window. (UUM-59838)
    - Editor: Fixed Search Sort type is nicified. (UUM-63888)
    - Editor: Fixed searchquery path validation for mac. (UUM-63375)
    - Editor: Fixed shader compilation so DXIL files no longer have an unneeded 38-byte header when Unity compiles shaders for DX12. (UUM-37067)
    - Editor: Fixed sky occlusion UI. (UUM-56889)
    - Editor: Fixed some cases where IMGUI message boxes would clip text.
    - Editor: Fixed splash screen corners alpha issue. (UUM-60433)
    - Editor: Fixed Sprite Atlas assets not being fully checkout when using Perforce (UUM-42695)
    - Editor: Fixed Static Lighting Volumetric Clouds checkbox. (UUM-54025)
    - Editor: Fixed synced layers that were mistakenly deleted when the user removed an unrelated layer in the Animator window. (UUM-59649)
    - Editor: Fixed tangents returning nan in MikkTSpace tangent calculation in strict vertex mode. (UUM-35817)
    - Editor: Fixed tessellation of UI Toolkit masking shapes that was causing "Invalid vertex" error in debug. (UUM-58404)
    - Editor: Fixed the 3D texture preview window in the Editor so volumetric previews of 3D textures now work in DX12 and Vulkan. (UUM-39954)
    - Editor: Fixed the auto-save function on prefab not saving the full entered inputs. (UUM-47822)
    - Editor: Fixed the check for Android Play Libraries to avoid errors when using Core-Common libraries instead of only Play Core.
      Regex now expects a series of digits/dots after the term "core" to avoid the confusion. (UUM-44744)
    - Editor: Fixed the compiled shader output data serialization to avoid writing uninitialized/unused values to disk.
    - Editor: Fixed the context menu function in the Build Profile Inspector so that its reset button no longer produces errors when pressed. (UUM-61000)
    - Editor: Fixed the Editor on macOS so it no longer presents old frames. (UUM-3147)
    - Editor: Fixed the error message that appeared when binding a shortcut with an invalid key. (UUM-43122)
    - Editor: Fixed the focus in signal for secondary container windows in the linux editor to correctly refresh assets change. (UUM-57857)
    - Editor: Fixed the Game view so it no longer flickers to black in Play mode on macOS. (UUM-19574)
    - Editor: Fixed the helper bar so it is visible after exiting Play mode. (UUM-28357)
    - Editor: Fixed the issue where deleting a symlink removes the target file. (UUM-35170)
    - Editor: Fixed the issue with copying and pasting long value on the serialized property field. (UUM-41175)
    - Editor: Fixed the issue with macOS deadlocking in the Editor when leaving the Play mode.
    - Editor: Fixed the issue with the file icon missing in the Inspector window when selecting multiple assets in the Project window. (UUM-34440)
    - Editor: Fixed the issue with the scene-view filtering that would grey out unfiltered objects when using URP Deferred in the RenderGraph's Compatibility mode. (UUM-22103)
    - Editor: Fixed the issue with AsyncOperation.allowSceneActivation being ignored when refocusing the Editor. (UUM-31366)
    - Editor: Fixed the new Input system that was unresponsive on the second monitor. (UUM-46312)
    - Editor: Fixed the Object Selector window title so it used nice names to match the ObjectField label. (UUM-49089)
    - Editor: Fixed the order of available Editor tools in the Scene view tools toolbar. (UUM-42846)
    - Editor: Fixed the Paste operation always being enabled after a Cut operation in the scene view context menu. (UUM-39661)
    - Editor: Fixed the Paste operation being enabled when it should not be in the scene view context menu. (UUM-47739)
    - Editor: Fixed the renaming issue of Project Browser not selecting the edited text on Mac. (UUM-40192)
    - Editor: Fixed the search by shortcut in the Shortcuts Manager window to accept Mouse inputs. (UUM-52017)
    - Editor: Fixed the Search Window to always reflect the state of the searchQueryAssets in the Project. (UUM-41173)
    - Editor: Fixed the shader graph BiRP Lit Target incorrectly displaying a specular block when allowMaterialOverride was enabled. This was a bug and specular workflow is not supported. (UUM-56618)
    - Editor: Fixed the Shader Variant Loading settings in Player settings so the Editor no longer crashes if you set the chunk size to 0. (UUM-36663)
    - Editor: Fixed the shortcut profiles order to display alphabetically. (UUM-34461)
    - Editor: Fixed the size and the styling of the hotkey labels in the context menu.
    - Editor: Fixed the styling of the shortcut manager prompt window when the active shortcut profile has a long name. (UUM-35758)
    - Editor: Fixed the theme selection not applying the correct theme unless the Editor is unfocused and refocused. (UUM-59313)
    - Editor: Fixed the tiling of spotlights in URP's Forward+ renderer, which was wrong in certain conditions. (UUM-32986)
    - Editor: Fixed the TLS Allocator errors that were logged when creating a new project with 3D template with Connect to Unity Cloud enabled. (UUM-61109)
    - Editor: Fixed the UsePass ShaderLab command so it searches all subshaders, not only the first one. (UUM-36470)
    - Editor: Fixed the ExecuteInEditMode warning that displays when entering playmode so that it fits in a dialog box. (UUM-44500)
    - Editor: Fixed the gameassembly.so file to make sure it is copied to the parent folder of the Linux player. (UUM-49550)
    - Editor: Fixed the MissingComponentExceptions thrown every frame error that appeared when removing a TerrainCollider component from a Terrain object. It is replaced with a warning in the Inspector for every tool that involves painting (Paint Terrain, Paint Trees, Paint Details). The warning message also includes a button that allows the user to easily add/enable the TerrainCollider component. (UUM-67250)
    - Editor: Fixed to make sure maxParallelPSOCreationJobs limit is obeyed when using Vulkan. (UUM-54127)
    - Editor: Fixed tooltip and documentation issue for sky occlusion. Disable backface culling by default. (UUM-56870)
    - Editor: Fixed tooltips for mipmap limit groups so they accurately describe limit offset uploads. (UUM-41881)
    - Editor: Fixed touch state always stay as moved on Linux Runtime. (UUM-61865)
    - Editor: Fixed transmission settings so that they're affected by volumetric clouds' shadows. (UUM-69817)
    - Editor: Fixed TwoPaneSplitView anchor style being overridden when shown in an Inspector. (UUM-61755)
    - Editor: Fixed TwoPaneSplitView will now initialize in the default constructor. (UUM-62030)
    - Editor: Fixed type remapping for : asmdef, animation and terrain. (UUM-58791)
    - Editor: Fixed UI related issue due APV. (UUM-49238)
    - Editor: Fixed unexpected closure of the Search Window when opening an Advanced Dropdown. (UUM-62762)
    - Editor: Fixed unresponsive editor when baking a large APV with terrain. (UUM-58017)
    - Editor: Fixed Update Probe Validity so it works after an Editor restart. (UUM-42961)
    - Editor: Fixed volumetric clouds in XR. (UUM-61940)
    - Editor: Fixed VolumetricFog as Fullscreen Debug Mode. (UUM-57063)
    - Editor: Fixed Xcode selection in Build Profiles window for iOS platform ("Other" option). (UUM-64007)
    - Editor: Fixed AnimationWindowCurve evaluation error after step.
    - Editor: Fixed AnimationWindowCurve evaluation error after step. (UUM-31316)
    - Editor: Fixed BuildOptions.ShowBuiltPlayer to now work on Windows machines when the player build path contains ".." as the parent directory. (UUM-40467)
    - Editor: Fixed Camera.GetStereoEnabled() to return true only if the camera is rendering a stereo view. (UUM-47881)
    - Editor: Fixed FrameDebugger so it now displays the proper texture debug name when it uses the RenderPass API. (UUM-42227)
    - Editor: Fixes a memory corruption occurring with IMGUI Text. (UUM-53663)
    - Editor: Force close an Object Selector window when Render Pipeline Asset selection prompt is closed. (UUM-49311)
    - Editor: Frame Debugger: Fix cases where MSAA render textures were not resolved before being displayed. (UUM-54792)
    - Editor: Frame Debugger: Fixed an issue where depth or shadow textures were rendered red/black instead of white/black in the Frame Debugger window. (UUM-54822)
    - Editor: Frame Debugger: Fixed an issue where list of meshes were missing in the Details foldout. (UUM-54821)
    - Editor: GameActivity ANR fix when fullscreen videoplayer playback ends. (UUM-34306)
    - Editor: GameObject shadows could be broken when entities positions are very far away (UUM-46339)
    - Editor: Global Settings will always be ensured no matter what RP is active (UUM-47264)
    - Editor: GlobalSettingsHelpBox correctly works with new Graphics Settings. (UUM-58377)
    - Editor: Graphics Settings no longer opens or focus changes when RP re-created. (UUM-60380)
    - Editor: Graphics Settings window will no longer become focused when reloading. (UUM-60294)
    - Editor: Ignore files/folders which include backslashes on macOS and Linux (they break many things) and warn the user (UUM-3304)
    - Editor: Implemented player settings and asset import overrides for build profile window.
    - Editor: Improve performance hierarchy performance by directly accessing Version and Root directly instead of going through bindings. (UUM-58337)
    - Editor: Improve temp atomic safety handle by temp allocator owns the safety nodes (UUM-41241, UUM-41907)
    - Editor: Improve UI for light culling mask in Forward+ mode. (UUM-41683)
    - Editor: Improved handling of saving a Scene created from MyTemplate. (UUM-42427)
    - Editor: Improved how string properties are indexed. (UUM-54321)
    - Editor: Improved performance when saving Prefabs. (UUM-31437)
    - Editor: Improved the Scene Template options to look consistent in the Inspector window. (UUM-31080)
    - Editor: Improved the GetHashCode function for Vector2Int. (UUM-61776)
    - Editor: Increased the Undo buffer maximum size to prevent 'Failed to create Object Undo, because the action is too large' error in console. (UUM-19657)
    - Editor: Inspector windows are now rebuilt correctly if ModelImporter.SaveAndReimport() is called from another window. (UUM-41835)
    - Editor: Introduced separate drawer for Rendering Layers. (UUM-29285)
    - Editor: Linux CheckedMenu submenu items not displaying as Checked in some occasions. (UUM-58878)
    - Editor: Made it possible to select text in Windows Editor dialog windows to support copy and paste. (UUM-41283)
    - Editor: Menus items are now visible after loading large projects. (UUM-56482)
    - Editor: Modified Asset info (labels and asset bundle) so that it is shown, but in a disabled state, when the asset is not checked out in Perforce. (UUM-36500)
    - Editor: Modified dynamic resolution to be consistent across all platforms and use discrete scale factors in a range between 0.25 and 1.0 and in increments of 0.05.
    - Editor: Modified the Fixedstep value in Project Settings under the Time heading, so it is now rounded to four significant digits. (UUM-43331)
    - Editor: Modified the Shortcut Window so it opens as a regular window that can be docked in the Editor or float behind the main window. (UUM-28944)
    - Editor: Modified the DeleteAsset function to check whether the file path already begins with the "Assets" folder to avoid adding the folder twice. (UUM-48497)
    - Editor: Moving an Asset with same name as a Folder in the destination causes naming conflict. (UUM-33981)
    - Editor: ObservableList.Clear() removes all items from the list. (UUM-42938)
    - Editor: On activity the videoplayer is stuck if called after the standby/resume state. (UUM-54785)
    - Editor: Only log memory and performance statistic reports if editor or player process is passed the "-log-memory-performance-stats" command line switch. (UUM-52358)
    - Editor: Opening a context menu on macOS will now focus the application so all functions in the hierarchy work. (UUM-26081)
    - Editor: Plugins of .androidlib type will by default be marked as only compatible with Android. (UUM-57229)
    - Editor: Prevented blendshape normals calculation when a mesh normal is set to Calculate and blendshape normals is set to None. (UUM-36071)
    - Editor: Profiler timeline labels now clip their baseline to the visible area correctly. (UUM-52690)
    - Editor: Properly report a cancelled build in early build player stage. (UUM-28285)
    - Editor: Protected against crashes when passing invalid dimensions to an editor window (NaN or Infinity). (UUM-53656)
    - Editor: Redesigned the Unity Gaming Services Settings window to be more easy and intuitive to use. (UUM-56134)
    - Editor: refactor out the gtk launch screen code from GtkQuarantine.cpp (UUM-53084)
    - Editor: Refactored CachingManager.cpp file to remove platform specific defines
    - Editor: Remove shortcut duplicates in the Binding Conflicts tab in the Shortcut Manager window. (UUM-55287)
    - Editor: Removed an internal error message that appeared in the console in certain scenarios. (UUM-33746)
    - Editor: Removed architecture selector for EmbeddedLinux and QNX .cpp plugin.
    - Editor: Removed custom binding option from Subgraph Dropdown properties. (UUM-46772)
    - Editor: Removed duplication of the logs entries.
      Limited the amount of allocations while searching and displaying logs in the console.
      Improved search performance for the large amount of entries. (UUM-41481)
    - Editor: Removed empty directories
    - Editor: Removed forgotten meta files (UUM-58028)
    - Editor: Removed obsolete warnings about differing baking backends when using multi-scene setups.
    - Editor: Removed the long deprecated CacheServer (used by V1 asset database).
    - Editor: Removed the transparent input field that showed above the TouchScreenKeyboard when TouchScreenKeyboard.hideInput is active. (UUM-37652)
    - Editor: Removed the scrollview in the New Scene dialog to fix an issue with the Scene template. (UUM-40806)
    - Editor: Rename Probe Volumes to Adaptive Probe Volumes. (UUM-55385)
    - Editor: Rendering Debugger - Correct clean up of Render Graph widgets when disposing the pipeline. (UUM-43908)
    - Editor: Rendering Layers now works correctly with Mixed (UUM-7271)
    - Editor: Replaced SceneViewRenderModes with correct Hoverstates. (UUM-48074)
    - Editor: Resolved issue with unresponsiveness and potential hangs when double clicking dockable area tabs. (UUM-36003)
    - Editor: Reverted a breaking change related to IGraphEventListener.
    - Editor: Reverted a breaking change where LudiqScriptableObject._ data was marked as private.
    - Editor: Set the maximum width of the context menu's search field to the maximum menu width. (UUM-53039)
    - Editor: Setting EditorUserBuildSettings.selectedStandaloneTarget for active windows build profile when the architecture changes.
    - Editor: Share temp allocator and temp safety handle data among multiple threads (UUM-55645)
    - Editor: Show dialog no probe volume in scene only once. (UUM-47695)
    - Editor: SpeedTree Importer Inspector: Fixed 'Null reference exception' when Apply button is clicked after changing an import option. (UUM-1910)
    - Editor: Support scene template where cloneable dependencies have the same file name. (UUM-44026)
    - Editor: The Exit button in the Editor Launch Window no longer overlaps with the "Made With Unity" text. (UUM-57067)
    - Editor: The graphics Tier Settings editor window has been changed back to a horizontal layout with the addition of a scrollbar for when the window is still sized too small to display the full contents. (UUM-59952)
    - Editor: The stage priority for Sprite renderer and Canvas renderer now correctly updates the value. (UUM-35594)
    - Editor: The UnityWebRquest timeout error from Curl no longer appears in the Editor console. (UUM-47110)
    - Editor: The Windows editor now hides secondary windows from the taskbar and alt+tab menu. This can be toggled via the "General > Show All Windows In Taskbar" option in Editor Preferences. (UUM-52117)
    - Editor: Unexposed Per Material blackboard properties now generate material properties using the HideInInspector attribute. This allows for the default property values to be initialized when materials are created. (UUM-46779)
    - Editor: Unity crashes when a new script is deleted before domain reload (UUM-43297)
    - Editor: Updated error message thrown when trying to load a scene not added to the active profile or shared scene list. (UUM-61399)
    - Editor: Updated fsbtool to match the current FMOD version. (UUM-32863)
    - Editor: Updated the BundleTool library version to 1.15.1. (UUM-30196)
    - Editor: Updated the RenderTextureCreationFlags.DynamicallyScalableExplicit value. (UUM-70474)
    - Editor: Updated wrong tooltip when hovering over the "Load In Background" property of an audio clip. (UUM-27581)
    - Editor: Updates the enum maskfield flags in the drop-down menu that are adjusted manually (UUM-46873)
    - Editor: Upgraded libcurl to 8.5.0. (UUM-60184)
    - Editor: Uss customization APIs are removed from core module. (UUM-53086)
    - Editor: When a context contains a single provider, it is correctly listed in the AddNewBlock propositions. (UUM-56451)
    - Editor: [Android] Fixed an issue where Broadcast Receiver in UnityPlayer was removed as it is unneeded and causing crash on Android 14 development due to missing EXPORTED/NOT_EXPORTED flag when registering receiver. (UUM-48068)
    - Editor: [Android] Fixed Samsung S8 crashing after OpenExtractor failing to translate archive (UUM-894)
    - Editor: [Build Profile Window] Fixed an issue for run last build button not showing up for console profiles when clicking on open scene list. (UUM-64043)
    - Editor: [Build Profile Window] Fixed for build and build and run display names not getting updated when duplicating a build profile. (UUM-60034)
    - Editor: [Build Profile] Fixed for active profile pointing to a build profile which its module is not installed. (UUM-62985)
    - Editor: [Frame Debugger] Fixed an issue of flickering output texture when selecting depth only events.
    - Editor: [Frame Debugger] Fixed an issue where incorrect render target was sometimes selected in the dropdown.
    - Editor: [SRP] Element in the lens flare cannot be an SRP Lens Flare Asset. (UUM-42309)
    - Editor: [SRP] LensFlareSRP: Click on thumbnail do not open the the details. (UUM-44237)
    - Editor: [SRP] Minor renaming for SRP lens flare Occlusion text. (UUM-42317)
    - Editor: [Windows] Fixed moving window with .position across monitors with multiple dpi has the wrong size. (UUM-34515)
    - EmbeddedLinux: Fixed touch input while running on secondary display. (UUM-61789)
    - Entities Graphics: Fixed editor selection outline when using shadergraph and vertex deformations. (UUM-51502)
    - GI: Add code signing for the unity denoising DLLs.
    - GI: Added a Null check to the default LSA asset name when cloning it through the Lighting Window. (UUM-30963)
    - GI: Changed 'Spotlight' to Spot Light in a couple of UI elements (UUM-55409)
    - GI: Don't call into VisualisationManager from LightingSettings transfer. (UUM-48685)
    - GI: Ensured that acquired resources related to the worker process are always released when BakeInEditorWorkerProcess() is exited. (LIGHT-1851)
    - GI: Ensured that AsyncReadBuffer_IsAsyncOperationComplete_MustReadWhatWriteBufferWrote passes even when run multiple times in release builds. (UUM-61281)
    - GI: Fix a crash when running the Compute part of the UnifiedRayTracing test suite with an AMD GPU. (UUM-48731)
    - GI: Fixed a crash caused by invalid data in lighting data assets. (UUM-27652)
    - GI: Fixed a memory leak that would occur when a bake was cancelled. (UUM-41988)
    - GI: Fixed a n issue where re-enable disabled optimization which minimized lighting settings used for baked preview mode. (UUM-45463)
    - GI: Fixed an issue here CPU memory allocation failure was not handled in heavy data jobs when baking APV. (UUM-54569)
    - GI: Fixed an issue where baked preview mode would get stuck after clearing lighting. (UUM-45402)
    - GI: Fixed an issue where directional lightmaps would contain large values in some scenes with many texel invalidities. (UUM-46069)
    - GI: Fixed an issue where lights are baked incorrectly when baking in batch mode with a project using URP. (UUM-47683)
    - GI: Fixed an issue where progress state when used in the C# baking API was not initializing. (UUM-55303)
    - GI: Fixed attempts to modify the built-in default Lighting Data Asset when baking Reflection Probes. (UUM-46158)
    - GI: Fixed denoising so it no longer logs warnings about meta files missing their asset files. (UUM-48591)
    - GI: Fixed disc light cookie scale when light is baked. (UUM-51538)
    - GI: Fixed incorrect graphics buffer stride leading to failures when LightTransport_RuntimeTests are executed with AMD GPUs. (UUM-54158)
    - GI: Fixed incorrect reflection probe update logic for projects using ScriptableBakedReflectionSystem when the lightmap encoding setting is updated. (UUM-61206)
    - GI: Fixed memory leak in BakePipelineDriver. (UUM-51529)
    - GI: Fixed minor scene indexing error in Editor (UUM-52841)
    - GI: Fixed MissingComponentException when no MeshFilter is attached to a Terrain tree game object when baking Probe Volumes. (UUM-59879)
    - GI: Fixed public probe bake API's ConvertToUnityFormat returning slightly incorrect results due to a sign flip and incorrect normalization constants. (LIGHT-1683)
    - GI: Improved the speed of cancelling light baking for scenes with many probes. (UUM-38112)
    - GI: Make player compile without runtime GI define. (UUM-52639)
    - GI: Move "Generate Lighting" to the Edit menu. (UUM-52065)
    - GI: Moved Light Probe Groups menu item next to Probe Volumes (UUM-49213)
    - GI: Reduced the default Gaussian filter kernel size to 1 for all filtering options. (UUM-26106)
    - GI: Release temporary copy of lightmap textures after bake. (UUM-56491)
    - GI: Removed logging which has caused users, supporters and developers to waste time and leave the user with no solution. (UUM-64413)
    - GI: Signify that light-baking api are editor only. (UUM-2731)
    - GI: The native plugin binaries of the denoising package now use the multi-threaded statically-linked runtime library.
    - GI: Updated Lightmap Resolution tooltip description with more details of its effects and how it affects the resolution of albedo and emission textures.
    - GI: UpdateLightProbeProxyVolumes is shown as running despite not being active. (UUM-53150)
    - GI: Use the hash of the vertex stream instead of the taking per instance props into account for meta pass. (UUM-55090)
    - Graphics: Added a memory leak for AsyncGPUReadbackRequest in WebGL Player. (UUM-46008)
    - Graphics: Added Adaptive Vsync when using Vulkan.
    - Graphics: Added errors about failed texture decompression instead of letting it silently fail and upload invalid data. (UUM-18354)
    - Graphics: Added missing LoadDOTSInstancedDataOverridden_XXX() shader functions. (UUM-53655)
    - Graphics: Added support for SRP depth-only passes to accept RenderBuffers as store targets, rather than using the whole RenderTexture. (UUM-11868)
    - Graphics: Added the LOD_FADE_CROSSFADE keyword to all shader stages in URP so that it works properly with Batch Render Group based rendering.
    - Graphics: Added tracking of memory going into Metal Buffers. (UUM-21519)
    - Graphics: Calling Reset on Global Settings assets was breaking the rendering. (UUM-57476)
    - Graphics: Calling Reset on Global Settings assets while Graphics Settings window was open, was breaking the UI rendering. (UUM-55839)
    - Graphics: Changed the callback dispatch to a single pass. Now Unity batches all updates together, and only makes a call to a managed job once if there are changes to notify the user about.
    - Graphics: Clarify RenderTexture creation error wording when the volumetric depth is an unexpected value. (UUM-59895)
    - Graphics: Corrected swapped luma weights in Stp.hlsl and fixed a few other small typos.
    - Graphics: Correcting issue of setting mismatched Color and Depth buffers encountered with Single-buffered CustomRenderTextures. (UUM-55999)
    - Graphics: DrawProceduralNow family of functions also provide emulated vertexbuffers. (UUM-51751)
    - Graphics: Enabling Material.enableInstancing is no longer required to be used with the API RayTracingAccelerationStructure.AddInstances, only when the material doesn't use a shader that has INSTANCING_ON variants.
    - Graphics: Enforce SDR for splash screen regardless of HDR display settings. (UUM-46354)
    - Graphics: Ensured non-background materials aren't rendered as six-faced skyboxes. (UUM-62526)
    - Graphics: Fix crash when trying to upload a texture with TextureUploadFlags::kTextureUploadUninitialized and using OpenGL (UUM-53142)
    - Graphics: Fix issue where URP with DX12 and native render passes was causing a crash.
    - Graphics: Fixed 2D texture arrays so they no longer cause a NullReferenceException if you select them in a project or the Frame Debugger. (UUM-43574)
    - Graphics: Fixed a crash in Mesh bounds recalculation when not enough vertices are assigned to the mesh for each sub-mesh. (UUM-5812)
    - Graphics: Fixed a crash or memory leak that happened when procedural geometries inside an axis-aligned bounding box (AABB) existed in a RayTracingAccelerationStructure. (UUM-43293)
    - Graphics: Fixed a crash that happened when destroying a RayTracingAccelerationStructure that was declared as a static member in a C# class. (UUM-42135)
    - Graphics: Fixed a crash when loading a native plugin when on a non-main thread. (UUM-21112)
    - Graphics: Fixed a Metal validation error that occurred when GPU batched skinning generated an empty dispatch call due to empty blendshapes. (UUM-47088)
    - Graphics: Fixed a null reference exception in HDAddditionalLightData, when a Scene was loaded additively. (UUM-58831)
    - Graphics: Fixed a regression in DrawProceduralIndirect in the Directx 11 backend when it was erroneously throwing "Draw indirect argument buffer too small" when using an argument buffer of 4 ints. (UUM-63246)
    - Graphics: Fixed a Vulkan crash when using -screen-quality player parameter. (UUM-60785)
    - Graphics: Fixed an alignment issue in ProjectSettings > Graphics. (UUM-60585)
    - Graphics: Fixed an issue by drawing a full screen quad when the clear command is used inside a render pass. (UUM-41296)
    - Graphics: Fixed an issue causing unnecessary batch breaking when using GPU Resident Drawer & "Use Legacy Lightmaps" option.
    - Graphics: Fixed an issue causing unnecessary batch breaking when using GPU Resident Drawer & LOD crossfade.
    - Graphics: Fixed an issue in Vulkan where attempting to register a sparse external texture 3D would create degenerate 2DArray views on that texture. (UUM-16089)
    - Graphics: Fixed an issue of rendering non-background materials as skybox. (UUM-60017)
    - Graphics: Fixed an issue that occurred when editing a UniversalRenderPipelineAsset that referenced the same Renderers as the UniversalRenderPipelineAsset in use. (UUM-60618)
    - Graphics: Fixed an issue were there was no upport for per-vertex motion vectors with DOTS Deformations on URP. (UUM-55030)
    - Graphics: Fixed an issue when changing the stripping of a setting in consecutive builds, the player was not having the latest state of the RenderPipelineGlobalSettings asset. (XPIPELINE-804)
    - Graphics: Fixed an issue when Mesh Renderers are attempted to be drawn without a vertex position stream. (UUM-48570)
    - Graphics: Fixed an issue where a race condition could occur on a BatchRendererGroup thread when rendering jobs were not expected to be running. (UUM-46934)
    - Graphics: Fixed an issue where asymmetric projection matrix in URP forward plus was not supported. (UUM-58978)
    - Graphics: Fixed an issue where calling "Texture.SetStreamingTextureMaterialDebugProperties" did not properly set debug properties on materials.
    - Graphics: Fixed an issue where creating an AsyncQueueSynchronisation GraphicsFence requires the platform to support AsyncCompute was not clarified. (UUM-47689)
    - Graphics: Fixed an issue where distance culling without a camera was using a non-zero initial position, which resulted in an error.
    - Graphics: Fixed an issue where game view becomes black after undoing setting Output Texture of Camera. (UUM-49339)
    - Graphics: Fixed an issue where it was possible for ReadPixels to crash on Metal API while using render graph due to a bad state with the depth target. (UUM-44404)
    - Graphics: Fixed an issue where maxComputeBufferInputs clamped to its default value when VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers was a max unsigned integer. (UUM-43741)
    - Graphics: Fixed an issue where multiple RayTracingAccelerationStructures bindings did not work in ray generation shaders. (UUM-20257)
    - Graphics: Fixed an issue where static batched geometries were not built correctly in acceleration structures causing missing objects in ray tracing effects or using wrong materials. (UUM-47435)
    - Graphics: Fixed an issue where the culling mode was incorrectly reset for distance-only culling, which resulted in errors.
    - Graphics: Fixed an issue where the GPU Resident drawer was updating object positions after rendering in some stand alone players. Object positions are now updated before rendering. (UUM-63987)
    - Graphics: Fixed an issue with accumulating ambient probe lighting where the sky light multiplier is not equal to one when GPU Resident Drawer is enabled. (UUM-69385)
    - Graphics: Fixed an issue with Buffer resources with RenderGraph, where the native compiler didn't correctly differentiate between the different resource types in several places.
    - Graphics: Fixed an issue with read-only depth in RenderPass handling on Metal. (UUM-64536)
    - Graphics: Fixed an issue with synchronizing speed-up backend data and serialized data for IRenderPipelineGraphicsSettings when the RenderPipelineGlobalSettings asset is edited outside the Editor. (XPIPELINE-795)
    - Graphics: Fixed an ordering of IRenderPipelineGraphicsSettings issue. (UUM-60585)
    - Graphics: Fixed assert and potential crash with 0 length parallel copy job when a mesh renderer has 0 materials in GPU Driven Rendering (UUM-62028)
    - Graphics: Fixed async PSO creation jobs from getting canceled due to localized Vulkan PipelineKey conflicts.
    - Graphics: Fixed asynchronous scene loads so they no longer leak texture memory. (UUM-35265)
    - Graphics: Fixed broken inspector and rendering when deleting user PostProcessVolume script that is still assigned in ProjectSettings > Graphics. (UUM-60204)
    - Graphics: Fixed case where no 2 IRenderPipelineGraphicsSettings can be displayed under the same category. (UUM-60585)
    - Graphics: Fixed CommandBuffer.SetComputeTextureParam when used with a non-RenderTexture rt and a non-default RenderTextureSubElement element parameter could crash due to expecting a RenderTexture. Now the element parameter is correctly ignored for non-RenderTextures. (UUM-63700)
    - Graphics: Fixed cubemap textures on OpenGL ES so that when they're copied, the edges are no longer blurry. (UUM-45754)
    - Graphics: Fixed Custom Render Textures so they no longer display artifacts on sphere GameObjects and the Material Inspector preview. (UUM-43540)
    - Graphics: Fixed D3D12 crash on integrated GPU due to missing constant buffer binding. (UUM-69598)
    - Graphics: Fixed depth prepass sometimes not working with tessellation on Metal. (UUM-59894)
    - Graphics: Fixed editor crash when trying to perform recursive rendering on the frame exiting PlayMode. (UUM-60383)
    - Graphics: Fixed empty VVL errors when an old VK_EXT_debug_report extension were used. (UUM-37283)
    - Graphics: Fixed errors caused by adding the Terrain geometry into ray tracing acceleration structures. (UUM-44754)
    - Graphics: Fixed flickering in shadows when TAA is enabled in the built-in render pipeline. (UUM-63814)
    - Graphics: Fixed foveated rendering graphics caps. (UUM-52321)
    - Graphics: Fixed FrameTiming timestamp issues on some platforms. FrameTimingManager.GetCpuTimerFrequency() now returns the correct CPU timer frequeny and timestamps can be successfully converted to seconds. (PLATGRAPH-2721)
    - Graphics: Fixed GLES anti aliasing samples count fallback being different for post processing on Android Mali Devices. (UUM-741)
    - Graphics: Fixed GraphicsBuffers so they no longer crash the Vulkan and OpenGL graphics APIs if you set the wrong GraphicsBuffer.Target. (UUM-42421)
    - Graphics: Fixed inconsistent naming of STP in code and UI. (UUM-58880)
    - Graphics: Fixed IRenderPipelineResources in package for them to compute the right pass based on [ResourcesPath]. (UUM-46974)
    - Graphics: Fixed lightning precision on platforms with half precision support.
    - Graphics: Fixed metal code generated for Texture.Load with offset. (UUM-56574)
    - Graphics: Fixed missed samplerCubeArrayShadow texture binding when processing GLSLang reflection. (UUM-59188)
    - Graphics: Fixed multisample anti-aliasing (MSAA) so it falls back to the same sample count, no matter which API you use.
    - Graphics: Fixed null pointer exception on the player when none of the quality levels were assigned. (UUM-43265)
    - Graphics: Fixed on-the-fly decompression of ASTC-compressed textures in Editor when width or height is smaller than 4 pixels. (UUM-41708)
    - Graphics: Fixed possible null ref when there is corrupted occlusion tome data that may lead to a crash. (UUM-30735)
    - Graphics: Fixed potential crash in URP Forward+ due to out-of-bounds buffer access. (UUM-64148)
    - Graphics: Fixed race condition when registering Vulkan PSO caches for maintenance.
    - Graphics: Fixed race condition. when shutting down the Vulkan async PSO creation system.
    - Graphics: Fixed RayTracing.DispatchRays calling RayTracingAccelerationStructure.Build in every ray tracing effect in HDRP. This should happen only when a ray tracing effect is using multiple acceleration structures at the same time. (UUM-57237)
    - Graphics: Fixed Renderer custom properties (Renderer.SetPropertyBlock) not overriding Material properties when using Ray Tracing / Path Tracing in HDRP. (UUM-64593)
    - Graphics: Fixed rendering freezes when changing orientation on A14 iPads. (UUM-9480)
    - Graphics: Fixed RenderLists so they now throw an error in all cases if you reuse them. (UUM-22297)
    - Graphics: Fixed renderpass sometimes loosing color clear on metal. (UUM-62464)
    - Graphics: Fixed shader compilation warning in Stp.hlsl due to a typo in 32-bit path. (UUM-58699)
    - Graphics: Fixed shader stripping when the BatchRendererGroup Variants setting was Keep All. (UUM-59364)
    - Graphics: Fixed shadows so they no longer cause a crash in a scene with both Built-In Render Pipeline and Scriptable Render Pipeline materials. (UUM-46685)
    - Graphics: Fixed small sync issue with texture streaming where Texture.graphicsTexture may be updated to the newest mipmap level one frame before Texture.loadedMipmapLevel is updated as well. (UUM-54082)
    - Graphics: Fixed spotlight culling in orthographic camera when using URP ForwardPlus. (UUM-58979)
    - Graphics: Fixed stencil information display error under camera depthNormals mode (UUM-27513)
    - Graphics: Fixed STP platform-specific performance issues and significantly improved image quality in some cases (UUM-57926)
    - Graphics: Fixed support for rendering meshes with lines/points, not just triangles.
    - Graphics: Fixed texture import that was discarding the Alpha channel. This impacted the cube map for Android devices. (UUM-43301)
    - Graphics: Fixed the display position of the Game view for some less common multi-monitor layouts. (UUM-33795)
    - Graphics: Fixed the error 'The transcoded bitstream was invalid' that happened when using Streaming Virtual Texturing (SVT). (UUM-41518)
    - Graphics: Fixed the issue with Shader Graph previews not updating correctly. (UUM-70011)
    - Graphics: Fixed the issue with GraphicsSettings.asset being set to dirty when changes were not performed while registering for RenderPipelineGlobalSetting. (UUM-45842)
    - Graphics: Fixed the mipmap streaming system so it correctly calculates mipmap levels if the texture scale property of a material changes at runtime. (UUM-31184)
    - Graphics: Fixed the MRT Clear command so it now works correctly on the Vulkan graphics API if you clear render targets with different colors. (UUM-46866)
    - Graphics: Fixed the texture Inspector window so it no longer throws errors due to it incorrectly reading native cubemap textures. (UUM-22094)
    - Graphics: Fixed threading error in BatchRendererGroup which shows up as an "out of memory". (UUM-60187)
    - Graphics: Fixed time scale bug when previewing trails. (UUM-45881)
    - Graphics: Fixed two triggered Vulkan validation errors in multiview when using SRPs; VUID-vkCmdClearAttachments-pRects-06937 and VUID-vkCmdClearAttachments-baseArrayLayer-00018. (UUM-39637)
    - Graphics: Fixed undefined behavior in Texture2D.Compress / EditorUtility.CompressTexture / EditorUtility.CompressCubemapTexture when these were dealing with partial mip-chain textures. The APIs now leave the mipmap count of textures untouched. (UUM-35985)
    - Graphics: Fixed Unity shaders so they no longer trigger a warning "Extra space between '\' and newline" in the Inspector when they use the DOTS_INSTANCING_ON keyword. (UUM-46988)
    - Graphics: Fixed unwanted Vulkan Render Pass content discard when trying to end/pause a Render Pass that has pending clear actions. (UUM-59888)
    - Graphics: Fixed VertexLM path lighting setup. (UUM-59676)
    - Graphics: Fixed Vulkan color mask behavior so that color mask is applied to all render targets when separate MRT (multi render targets) blend is disabled. (UUM-69202)
    - Graphics: Fixed Vulkan rendering when viewport or scissor rectangle has negative offset. (UUM-39970)
    - Graphics: Fixed vulkan validation errors of querying PVRTC formats support without VK_IMG_format_pvrtc extension. (UUM-55928)
    - Graphics: Flagged GlobalSettingsAsset as unsaved (dirty) when it is modified through IRenderPipelineGraphicsSettings.SetValueAndNotify. (UUM-43279)
    - Graphics: Free backing memory after deleting Vulkan images. (UUM-49768)
    - Graphics: Improve texture format support on macOS. (UUM-52122)
    - Graphics: Improved Always/Vertex pass to be accepted by the ForwardRenderer loop and receive the main light's screenspace shadowmap. (UUM-36912)
    - Graphics: Improved an error message about SkinnedMeshRenderer mesh compatibility. (UUM-46329)
    - Graphics: Improved warning issued when GraphicsBuffer.LockBufferForWrite is called more than once per frame on D3D11. (UUM-48133)
    - Graphics: Invoke the PostRender callback when SceneView uses EditorDrawOutline. (UUM-57025)
    - Graphics: Metal: when dispatching ComputeShader with missing const buffer bindings, emit warning and skip dispatch to avoid debug layer asserting. (UUM-59107)
    - Graphics: Recreating the current pipeline when the RenderPipelineGlobalSettings are modified from outside the editor. (XPIPELINE-799)
    - Graphics: Reset of Graphics Settings asset was breaking rendering. (UUM-62706)
    - Graphics: Reset of Graphics Settings was throwing exceptions. (UUM-62671)
    - Graphics: Resolved an issue where the Overlay Canvas was occasionally rendered incorrectly following post effects. (UUM-62691)
    - Graphics: Scroll offset is not kept when entering playmode in the Graphics Settings page. (UUM-60374)
    - Graphics: Stop allocating full resolution Vulkan Swapchain images when using an external Swapchain. (UUM-56851)
    - Graphics: Support requesting a DXT compressed texture using ImageConversion.LoadImage and Texture2D.LoadImage on Android. (UUM-52927)
    - Graphics: Surface shader path has correct parameters set when emulating vertexbuffers. (UUM-52930)
    - Graphics: Texture names may occasionally not been set on development build GPU captures, this has been fixed so they match the asset they were loaded from. (UUM-57690)
    - Graphics: The screen space UI overlay now scales correctly in URP with Render Graph. (UUM-54329)
    - Graphics: UI Overlay (IMGUI, Unity UI, UIToolkit) rendering is now triggered by default by SRPs (URP/HDRP).
    - Graphics: Updated Vulkan headers to git tag v1.3.268. (UUM-54089)
    - Graphics: Updated Graphics.CopyTexture so that it no longer prints warning messages when it is called between two compressed textures with a specified copy region. (UUM-56441)
    - Graphics: Using Graphics.CopyTexture to copy the entirety of a texture was briefly more restrictive on allowed formats between source and destination than necessary in 2023.3, this now succeeds without error for compatible formats.
    - Graphics: When using CaptureScreenshotAsTexture during the rendering process with Metal API, if the results are undefined then Unity now outputs an error instead of crashing. (UUM-47096)
    - Graphics: [SRP] Fix adding a default flare asset when adding Lens Flare (SRP) component. (UUM-42304)
    - Graphics: [SRP] Fix Lens Flare became darker with fade/gradient. (UUM-44781)
    - Graphics: [SRP] Light override component is missing when having multiple flare on one object. (UUM-42315)
    - Graphics: [SRP] Missing radial gradient for procedural shapes in lens flare SRP elements. (UUM-42316)
    - HDRP: Added "Include for Path Tracing" checkbox on lights, ensured "Include for Ray Tracing" checkbox is visible on supported lights. (UUM-51531)
    - HDRP: Added a shortcut to modify the Advanced properties within the Water System Inspector:
    - HDRP: Added a warning to the reflection probe editor to prevent a user from baking in a low quality level. (UUM-41531)
    - HDRP: Added an option to fix atmosphere when camera is in space. (UUM-61402)
    - HDRP: Added anFixed the HDRP Global Settings window so it displays an error when Rendering Layer Names is empty. error when the Rendering Layer names in HDRP Global Settings is empty. (UUM-41803)
    - HDRP: Added behavior to enable or disable HDR during run time. (UUM-29770)
    - HDRP: Added missing material deformer input (UUM-37818)
    - HDRP: Added redirection header for TextureXR.hlsl to avoid breaking existing custom shaders. (UUM-58317)
    - HDRP: Added the RemoveFromTUAndAA checkbox in Surface Options to exclude materials from temporal anti aliasing. (UUM-37206)
    - HDRP: Adding missing texture array global mip bias override for texture array grad samplers. (UUM-53676)
    - HDRP: Adds in which space custom velocity should be computed. (UUM-50992)
    - HDRP: Allowed users to change the maximum amount of lights used in a local neighborhood in the HDRP path tracer through the shader config mechanism. (UUM-47230)
    - HDRP: Async compute Presents issues when depending on the first texture read of depth. In some platforms (vulkan/dx12 and some consoles) the first read of depth is actually a write because of decompression / layout / barriers.
      Async compute is inserting the fence before this operation because RenderGraph sees everything as a simple Read / Write.
      Temporarily hacking this so the first read of depth is tagged as a write, so the correct fence is inserted. (UUM-57601)
    - HDRP: Changed lens flare behavior to use the camera culling mask and the GameObject layer. (HDRP-3062)
    - HDRP: Cookie area lights on water surfaces is now supported. (UUM-47074)
    - HDRP: Correct dynamic resolution settings for offscreen UI. (UUM-53449)
    - HDRP: Enabled HDR output for macOS.
    - HDRP: Fix incorrected area light LUT parametrization used by the Water shader.
    - HDRP: Fixed a black spot caused by a point light under a water surface
    - HDRP: Fixed a corruption issue when using a non square atlas and improve blit performance. (UUM-64604)
    - HDRP: Fixed a crash on FSR 2 dx12. In dx12, the FSR2 plugin requires to use the ExecuteCommandList public api from IUnityGraphicsD3D12v7. This event is ran on the submission thread. Because we are in the submission thread, we are not allowed to call TextureFromNativeTexture because it depends on an internal active command buffer to be alive. Which might not be the case! this is then a race condition. (UUM-56967)
    - HDRP: Fixed a culling result sharing issue between custom passes and the camera rendering them. (UUM-53945)
    - HDRP: Fixed a GraphicsBuffer leak in APV binding code.
    - HDRP: Fixed a hole in water geometry.
    - HDRP: Fixed a material pre-integration hang that occurred on some lower end hardware. (UUM-51134)
    - HDRP: Fixed a motion blur blending issue. (UUM-54446)
    - HDRP: Fixed a non-development player crash when using the High Quality Lines feature. (UUM-41319)
    - HDRP: Fixed a null ref exception when baking APV without GPU streaming enabled. (UUM-58735)
    - HDRP: Fixed a performance issue with reflection probe inspector. (UUM-53681)
    - HDRP: Fixed a performance reduction caused by MemClear calls on large frame buffers in HDRP PrepareLightsForGPU.
    - HDRP: Fixed a performance regression in area light evaluation code. (UUM-63204)
    - HDRP: Fixed a Physically Based Sky issue. (UUM-47968)
    - HDRP: Fixed a potential GPU crash/hang when using local volumetric fogs. (HDRP-3051)
    - HDRP: Fixed a SetData error when using more lights in a scene than the configured max light count settings. (UUM-46001)
    - HDRP: Fixed a warning on the Fine Tile Light pruning algorithm (FPTL) compute shader where a loop with a length of 1 required a forced unroll. (UUM-42737)
    - HDRP: Fixed an invalid hair look-up table read / write that was occurring for a graphics format on some platforms. (UUM-48172)
    - HDRP: Fixed an issue caused by inconsistency of the interpretation of the depth parameters on the HDRP parameters.. (UUM-46950)
    - HDRP: Fixed an issue for macOS where passing the Probe Volumes buffer an unexpected stride caused a crash. (UUM-41474)
    - HDRP: Fixed an issue so that the water inspector appears correctly when no SRP is active (UUM-40843)
    - HDRP: Fixed an issue so that volumetric cloud wind works with realtime Reflection probes. (UUM-37387)
    - HDRP: Fixed an issue that caused standalone runtime rebuilds of hair instances to fail when using High Quality Lines. (UUM-45401)
    - HDRP: Fixed an issue that caused warnings for uninitialized variables in pathtracinglight.hlsl. (UUM-58364)
    - HDRP: Fixed an issue where an asynchronous pass would try to synchronize with a culled pass. (UUM-44493)
    - HDRP: Fixed an issue where certain Mipmap Streaming debug views would not show up correctly on Metal.
    - HDRP: Fixed an issue where debug variants of Terrain shaders would sometimes not compile. (UUM-61087)
    - HDRP: Fixed an issue where denoised ray traced shadows were incorrect for box lights. (UUM-48518)
    - HDRP: Fixed an issue where High Quality Line Renderers fail to draw on Metal API. (UUM-48570)
    - HDRP: Fixed an issue where internally created Game Objects were being deallocated on scene changes. (UUM-53128)
    - HDRP: Fixed an issue where non directional light could react to "interact with sky" flag. (UUM-46848)
    - HDRP: Fixed an issue where prefab previews would be rendered too dark until they move. (UUM-42162)
    - HDRP: Fixed an issue where Reflection Proxy Volume would cause artifacts to cover the editor on Apple Silicone devices. (UUM-42099)
    - HDRP: Fixed an issue where the AxF shader only displayed pure black when using the Mipmap Streaming debug views.
    - HDRP: Fixed an issue where the Bloom Mip Bias in a Screen Space Lens Flare overwrote the original Bloom mip map. (UUM-45060)
    - HDRP: Fixed an issue where the material preview texture was the incorrect size. (UUM-31221)
    - HDRP: Fixed an issue where the Mipmap Streaming debug views would show up incorrectly when certain features were enabled (SRP Batcher, Volumetric Fog, Volumetric Clouds, ...).
    - HDRP: Fixed an issue where water deformation wasn't visible in wireframe mode
    - HDRP: Fixed an issue with dual-lobe Subsurface Scattering (SSS) to handle rectangular area lights correctly. (UUM-47069)
    - HDRP: Fixed an issue with High Quality Line Rendering spamming the console with errors in certain frame setting configurations. (UUM-45668)
    - HDRP: Fixed an issue with mixed tracing mode for transparent screenspace reflections so it now mixes both tracing modes as expected instead of only using ray traced reflections. (UUM-33701)
    - HDRP: Fixed an issue with ShaderGraph Decal material position issue by using world space position. (UUM-42716)
    - HDRP: Fixed an issue with the logic used to set up materials featuring displacement mapping that could result in artifacts or suboptimal performance. (UUM-44723)
    - HDRP: Fixed an issuse with viewport flickering when multi-frame rendering API is used with certain parameters. (UUM-59115)
    - HDRP: Fixed argument exception when trying to add to shadowsWithValidData. (UUM-49242)
    - HDRP: Fixed artifacts on low resolution SSGI when dynamic resolution values are low. (UUM-57785)
    - HDRP: Fixed asserts when exiting play mode with STP & HW DRS enabled. (UUM-58316)
    - HDRP: Fixed atmospheric scattering at far range.
    - HDRP: Fixed autoregistered diffusion profiles not getting applied immediately. (UUM-55806)
    - HDRP: Fixed Blackman-Harris filter for temporal AA. (UUM-57155)
    - HDRP: Fixed blending between cascaded shadowmaps and shadowmask as well as cascades border ranges. (UUM-46922)
    - HDRP: Fixed Box Light appearance in HDRP Path Tracing. (UUM-56000)
    - HDRP: Fixed caustics in XR (UUM-54398)
    - HDRP: Fixed cloud rendering being applied in prefab view. (UUM-46854)
    - HDRP: Fixed color checker transform component in full screen sample scene. (UUM-52692)
    - HDRP: Fixed Console errors with ReflectionProxyVolume component Gizmo. (UUM-56069)
    - HDRP: Fixed crash when cleaning up the reflection probe camera cache. (UUM-43926)
    - HDRP: Fixed creating mirror Gameobject not being placed in prefab hierarchy. (UUM-56424)
    - HDRP: Fixed DefaultVolumeEditor assert when multiple inspectors are open. (UUM-53408)
    - HDRP: Fixed diffusion profiles not being unregistered from Default Volume Profile when deleted. (UUM-55807)
    - HDRP: Fixed Directional light PCSS API.
    - HDRP: Fixed Disk Light's property not being updated when changing it's radius using the gizmo in the scene. (UUM-51530)
    - HDRP: Fixed double Shadow Quality UI in HD Lights. (UUM-53779)
    - HDRP: Fixed error when a user assigned non-water material to water. (UUM-46256)
    - HDRP: Fixed errors from HDRP material inspector when URP is active. (UUM-61598)
    - HDRP: Fixed errors when resizing the Scene view while using the water system. (UUM-46552)
    - HDRP: Fixed exception thrown when running projects for an extended amount of time. (UUM-49102)
    - HDRP: Fixed foam generated too far away for shore waves. (UUM-47716)
    - HDRP: Fixed fog on spherical planets. (UUM-47646)
    - HDRP: Fixed fog scattering that didn't take in account the scene color. (UUM-62737)
    - HDRP: Fixed GPU warnings due to water system. (UUM-45540)
    - HDRP: Fixed Helpbox UI for LightProbeGroup Inspector. (UUM-47718)
    - HDRP: Fixed in gpu build light list to avoid crashes on some GPUs.
    - HDRP: Fixed inconsistent text capitalizations in various parts of the Editor. (UUM-70038)
    - HDRP: Fixed interaction between on demand shadow rendering and enable/disable of the light source. (UUM-61098)
    - HDRP: Fixed inverted shadows from transparent objects in HDRP path tracer. (UUM-56536)
    - HDRP: Fixed issues with hardware DRS on console (manifestation is usually bright qnan pixels on the right of the screen) when using half resolution transparent. (UUM-52109)
    - HDRP: Fixed jittering when rendering objects after post process with TAA and Dynamic resolution enabled. (UUM-56716)
    - HDRP: Fixed layered lit displacement. (UUM-49812)
    - HDRP: Fixed lens flare aren't occluded by water surfaces, (UUM-27182)
    - HDRP: Fixed lens flare occlusion not taking in account the volumetric fog for the sun.
    - HDRP: Fixed material previews being rendered black. (UUM-29305)
    - HDRP: Fixed missing foam color parameter. (UUM-47715)
    - HDRP: Fixed missing VFX node to fetch water height at a given point. (UUM-48804)
    - HDRP: Fixed NaN propagation for path traced hair. (UUM-41442)
    - HDRP: Fixed offset in refraction in XR. (UUM-31909)
    - HDRP: Fixed out of bounds access when XR is enabled. (UUM-41445)
    - HDRP: Fixed post-processing when the LUT size is not a power of 2 (UUM-42714)
    - HDRP: Fixed potential leaks when using dynamic resolution and objects with refraction. (UUM-34731)
    - HDRP: Fixed probe volume live subdivision not culling cells correctly. (UUM-51849)
    - HDRP: Fixed refractive material preview when Multisample anti-aliasing (MSAA) is enabled.
    - HDRP: Fixed shader compilation issue in SixWayLit VFX shader when reduced precision types are enabled.
    - HDRP: Fixed ShaderGraph being dirty when opened just after the creation of the asset. (UUM-17912)
    - HDRP: Fixed ShaderGraph with motion vectors enabled overwriting interpolators with previous frames data. (UUM-56632)
    - HDRP: Fixed shadow flickering when dynamic resolution is enabled. (UUM-61508)
    - HDRP: Fixed specular blend in premultiplied alpha. (UUM-48661)
    - HDRP: Fixed TAA frame index logic to ensure that it stays consistent with camera state (set to zero after reset and when TAA is not in use). Also removed logic that was unnecessarily limiting the sequence length to 8. (UUM-54647)
    - HDRP: Fixed the appearance of water excluders when a camera is underwater (UUM-33247)
    - HDRP: Fixed the area light basis used by the Water shader.
    - HDRP: Fixed the depthstencil buffer so that it binds the correct depthBuffer when refraction is enabled. (UUM-37978)
    - HDRP: Fixed the Sample Settings Helper. (UUM-46953)
    - HDRP: Fixed the scroll bar jumping at the top of the window when focusing a settings from the same panel in the project settings. (UUM-53429)
    - HDRP: Fixed the sharpening pass in order to avoid washed-out colors when using a render target with an alpha channel. (UUM-44448)
    - HDRP: Fixed the size of the helpbox in the LightProbeGroup Inspector. (UUM-38113)
    - HDRP: Fixed time step of watersystem for recorder. (UUM-52054)
    - HDRP: Fixed triplanar on alpha clipped geometry. (UUM-56664)
    - HDRP: Fixed tube area lights seemingly scattering light in a single hemisphere with volumetric fog and disappearing volumetric fog effect on area lights depending on the number of activated ones. (UUM-55364)
    - HDRP: Fixed Turkish OS incorrectly deducing DLSS is not available. (UUM-48557)
    - HDRP: Fixed unintentional jitter in prevProjMatrix view constant when AfterPostprocess frame setting is enabled. (UUM-58346)
    - HDRP: Fixed virtual offset on complex geometries. (UUM-47308)
    - HDRP: Fixed visible light clamping in the path tracer when using very low exposure settings and neutral tone mapping. (UUM-56515)
    - HDRP: Fixed water in SSR reflections issue. (UUM-60788)
    - HDRP: Fixed XR occlusion mesh artifact with HDRP camera relative rendering. (UUM-45294)
    - HDRP: Fixed XR SPI is not disabled after processing the render request. (UUM-49454)
    - HDRP: Fixed XR texture 2D creation failure due to invalid slice configuration. The slice is misconfigured to 2 when creating Texture2D, causing internal failures. (UUM-57001)
    - HDRP: Fixed materialValidatorDebugModeEnumIndex so that it does not get stuck in the Rendering Debugger when enabling another mode. (UUM-70780)
    - HDRP: Fixes missing shadergraph include on HDRP (UUM-51851)
    - HDRP: Fixing and Improving the color checker. (UUM-49632)
    - HDRP: Fixing Dropdown serialization and bindings, ctrl Z is now working (UUM-48489)
    - HDRP: Fixing jittered inverse view projection in line rendering: because shading in high quality line rendering (i.e. hair rendering) is done in object space, the unjittered inverse view projection matrix has been added to the matrix constant buffer and is now used for shading hair. (UUM-57985)
    - HDRP: Global Settings always exist when HDRP is the current active pipeline. (XPIPELINE-796)
    - HDRP: Gray out the UI of light cluster override and show the same message as path tracing if raytracing is disabled. (UUM-46736)
    - HDRP: Improved clamping on path tracing. (UUM-56668)
    - HDRP: Improved performance of infinite water surfaces with tessellation on metal. (UUM-47326)
    - HDRP: Improved the Rendering Debugger to allow changing the mat cap values. (UUM-59559)
    - HDRP: Improved VolumetricSky caching and Reduced significantly memory allocation for scenes with multiple realtime reflection probes. (UUM-42724)
    - HDRP: Increase HDRP's maximum cube reflection probes on screen. (UUM-53178)
    - HDRP: Optimize the OnDisable of DecalProjector component when disabling a lot of decals at the same time. (UUM-64279)
    - HDRP: Optimized water foam reprojection when it's unused. (UUM-70590)
    - HDRP: Reduce some artifacts from High-Quality (PCSS) shadows for point and spot lights. (UUM-31577)
    - HDRP: Remove unnecessary shader variants of decal raytracing shaders. (UUM-55347)
    - HDRP: Removed the error message "Decal texture atlas out of space..." in release builds (it now only appears in the Editor or Development Builds). (UUM-64275)
    - HDRP: Removed the Render Graph option from the rendering debugger Rendering panel.
    - HDRP: The lightShadowCasterMode property on Light now only affects shadow caster culling when baked lighting includes shadow mask, as intended. (UUM-26410)
    - HDRP: Update decal projector draw distances when global draw distance changes.
    - HDRP: Updated HDRP shaders to be HLSL2021 compliant. (UUM-64747)
    - HDRP: Updated index seed for path tracing to avoid "sticky" noise patterns when using path tracing in conjunction with Recorder. (UUM-52633)
    - HDRP: Water absorption on transparents in front of excluders (UUM-52534)
    - IL2CPP: Added DivideByZeroChecks to modulo/remainder operator. (UUM-45551)
    - IL2CPP: Fix get_base_method() to behave as mono does, preventing a crash when the method slot is outside of the vtable. (UUM-44323)
    - IL2CPP: Fixed a crash in some cases where a generic type was being used. (UUM-42694)
    - IL2CPP: Fixed a crash when a function pointer appeared as a ref our out parameter. (UUM-53171)
    - IL2CPP: Fixed a deadlock that could occur if Asset GC visited a field of const, value type, whilst il2cpp types were being created on background threads.
      https://github.cds.internal.unity3d.com/unity/il2cpp/pull/5520
      https://jira.unity3d.com/browse/UUM-35018 (UUM-35018)
    - IL2CPP: Fixed a semaphore link in the IL2CPP runtime that could occur during lock contention for multiple threads. (UUM-40104)
    - IL2CPP: Fixed ainalizers being called in a reentrant manner on the Web platform. Finalizers are now invoked explicitly at the end of each frame if needed. (UUM-44732)
    - IL2CPP: Fixed an issue that caused a build failure if a delegate has a first parameter that is a function pointer. (UUM-44037)
    - IL2CPP: Fixed an issue there there were duplicate copies of the --linker-flags argument passed to IL2CPP. (UUM-60988)
    - IL2CPP: Fixed an issue where an ARM64 build would fail when Script Debugging is enabled. (UUM-37939)
    - IL2CPP: Fixed an issue where pointer types could be affected by an unsigned shift right. (UUM-41406)
    - IL2CPP: Fixed an issue where the UnsafeUtililty.IsUnmanaged/UnsafeUtililty.IsBlittable method could return incorrect results. (UUM-43422)
    - IL2CPP: Fixed C++ compilation error on missing type reference is generic code. (UUM-56231)
    - IL2CPP: Fixed C++ compilation error on structs with Charset.Auto and a System.Char field. (UUM-52898)
    - IL2CPP: Fixed C++ compilation error when Enum.HasFlag was called with a Nullable enum value. (UUM-58451)
    - IL2CPP: Fixed C++ compiler error on UnmanagedCallersOnly with user defined struct types. (UUM-58210)
    - IL2CPP: Fixed compilation error on System.Threading.Volatile.Write<T>() when the value parameter was a literal null.
      https://github.cds.internal.unity3d.com/unity/il2cpp/pull/5528
      https://jira.unity3d.com/browse/UUM-45696 (UUM-45696)
    - IL2CPP: Fixed conversion errors on constrained calls in shared generic code. (UUM-55756)
    - IL2CPP: Fixed crash in GC when too many allocation roots are processed. (UUM-59544)
    - IL2CPP: Fixed crash when calling Type.IsGenericTypeParameter and Type.IsGenericMethodParameter. (UUM-56064)
    - IL2CPP: Fixed data races in lazy initialization checks on ARM processors. (UUM-44039)
    - IL2CPP: Fixed ExceptionSupportStack overflow with exception filters in loops. (UUM-42937)
    - IL2CPP: Fixed IL2CPP build errors when Enums are decorated with a GUID attribute. (UUM-52435)
    - IL2CPP: Fixed incorrect and/or missing calls to static constructors on constrained calls.
      https://github.cds.internal.unity3d.com/unity/il2cpp/pull/5554
      https://jira.unity3d.com/browse/UUM-51908 (UUM-51908)
    - IL2CPP: Fixed incorrect parsing of generic limit command line arguments. (UUM-42804)
    - IL2CPP: Fixed issue where a DefaultStream or GZipStream may not decompress all of the bytes in certain compressed files.
      https://github.cds.internal.unity3d.com/unity/il2cpp/pull/5546
      https://jira.unity3d.com/browse/UUM-50168 (UUM-50168)
    - IL2CPP: Fixed leak of cached reflection data on IL2CPP unload. (UUM-58464)
    - IL2CPP: Fixed LoadIndirectNativeInteger to use a temp variable. (UUM-43502)
    - IL2CPP: Fixed MemoryMappedFile on posix systems to query page size from the system, instead of hardcoding it. (UUM-54598)
    - IL2CPP: Fixed null value on P/Invoke method with an [Out] marshalled blittable class parameter. (UUM-57901)
    - IL2CPP: Fixed occasional crash when attaching/detaching the Unity debugger. (UUM-48692)
    - IL2CPP: Fixed rare crash when using ConditionalWeakTable. (UUM-54316)
    - IL2CPP: Fixed socket.send() sending uncatchable SIGPIPE signal on Linux. (UUM-39498)
    - IL2CPP: Fixed the offset of properties in Explicit layout structs with FieldOffset. (UUM-43158)
    - IL2CPP: Fixed to allow IP options IP_HDRINCL, IP_TOS and IP_TTL on some platforms where they are supported but were incorrectly defined out. (UUM-55772)
    - IL2CPP: Prevent the debugger from incorrectly resetting the value of static fields in some cases. (UUM-35358)
    - IL2CPP: Removed extra reference to target on a combined delegate
      https://github.cds.internal.unity3d.com/unity/il2cpp/pull/5548
      https://jira.unity3d.com/browse/UUM-47478 (UUM-47478)
    - IL2CPP: Throw a PlatformNotSupportedException for Process.HasExited. (UUM-55384)
    - IMGUI: Fixed ambient lighting on volumetric clouds when sun is low. (UUM-59874)
    - IMGUI: Fixed an issue where Dedicated Server showed an error when a MonoBehaviour implementing an OnGUI message was initialized. (UUM-55024)
    - IMGUI: Fixed an issue with PropertyFields with multiple subproperties not being aligned properly. (UUM-59601)
    - Input: Added more robust edge checks to simulated mouse input. (UUM-39752)
    - Input System: Downgraded "invalid raw input data size: 0 bytes" from error to warning. (UUM-16523)
    - Input System: Fixed an issue causing older DualShock 4 models (CUH-ZCT1x) appearing as both a DualShock 4 (via HID) and an Xinput device. (UUM-48992)
    - Input System: Fixed for potential corruption in InputManager.asset file.
    - Internal: Updated the Applying default presets to Assets by folder documentation example to prevent an import infinite loop error. (UUM-44046)
    - iOS: Added cutouts and safe areas for iPhone 15. (UUM-56430)
    - iOS: Added iPhone 15 devices to iOS.DeviceGeneration. (UUM-56348)
    - iOS: Added missing privacy manifest entry for System Boot time API usage.
    - iOS: Added phony postprocess buildphase in xcode, and make sure that app extensions add copy buildphases before it. (UUM-53588)
    - iOS: Bring back the applicationDidReceiveMemoryWarning: to UnityAppController. (UUM-55367)
    - iOS: Fixed "Fill percentage" launch screen option only using the iPad value for both iPhone and iPad. (UUM-46824)
    - iOS: Fixed "Size in points" launch screen option only using the iPad value for both iPhone and iPad. (UUM-46824)
    - iOS: Fixed a crash that occured when having Build Postprocessor run after "Sign in with Apple" Unity Plugin (AppleSignInUnity).
    - iOS: Fixed adding multiple plugins with embedded frameworks. (UUM-58170)
    - iOS: Fixed an exception that could occur when adding existing xcode capabilities in append. (UUM-46368)
    - iOS: Fixed an issue when trageting iPhone 15 where forcing an application to Portrait Upside Down orientation caused a crash. (UUM-56345)
    - iOS: Fixed an issue where a Bluetooth audio device was connected, and Prepare iOS for Recording was disabled, the C# Microphone.Start function could cause Unity to hang. (UUM-53849)
    - iOS: Fixed an issue where a location event would cause an application to open in the background.
      Fixed an issue when loading a release build where a black screen appeared between the splash screen and first scene. (UUM-52515)
    - iOS: Fixed an issue where launch screen images weren't being included in builds for iOS and tvOS. (UUM-44326)
    - iOS: Fixed an issue where PBXProject.AddFileToBuild did not handles xcframework files properly. (UUM-56677)
    - iOS: Fixed an issue where RGB9E5F was non-renderable on x64 simulator. (UUM-59695)
    - iOS: Fixed an issue where the managed debugger window didn't display and froze the application. (UUM-39644)
    - iOS: Fixed an issue where the multiline keyboard would not appear after it was closed while editing the text field. (UUM-21521)
    - iOS: Fixed an issue where the safe area didn't report correctly when changing the device orientation. (UUM-41818)
    - iOS: Fixed an issue where ActivityIndicator wasn't accessible on iOS. (UUM-48717)
    - iOS: Fixed an issue where AddLocaleVariantFile wasn't working with Windows file paths. (UUM-56027)
    - iOS: Fixed an issue where WebCamDevice.kind reported incorrect values on devices with a non-English system language. (UUM-56785)
    - iOS: Fixed if Image and Background launch screen was used without proper image setup, issue warning and fallback to default launch screen. (UUM-60545)
    - iOS: Fixed Product Name with non-latin characters to be able to install .ipa to the device. (UUM-30326)
    - iOS: Fixed touches getting stuck when orientation is forced from code while touching the screen. (UUM-53903)
    - iOS: Updated UnityWebRequest to no longer send Content-Length headers of zero for requests other than PUT and POST. (UUM-49237)
    - iOS: [Privacy Manifests] Fixed duplicates elements filtering when merging multiple manifests if the children elements of the duplicates are in different order (UUM-59885)
    - Kernel: Changed player connection to broadcast and connect on all interfaces. This resolves issue where change of iOS16 network interfaces order broke broadcasting of the IP that can be used for debugging. (UUM-29212)
    - Kernel: Fixed a crash that would occur when reallocating persistent memory with the DynamicHeapAllocator to a size greater than 4GB. (UUM-12004)
    - Kernel: Fixed a job system freeze on some mobile platforms due to incorrect thread waking logic. (UUM-41806)
    - Kernel: Fixed synchronize implicit dependencies when using RunReadOnly on IJobParallelForTransform (causing "In-place job must not have dependencies" assert). (UUM-37116)
    - Kernel: TinyXML security issue resolved. (UUM-12070)
    - Kernel: Updated player connection system to handle multiple IP per one player. (UUM-2598)
    - License: Added ARM64 executables to Licensing Client for macOS Editor ARM64 build. (UUM-43931)
    - Linux: Fixed a bug that caused the Editor to get focused when saving script files with Jetbrains Rider. (UUM-36463)
    - Linux: Fixed a bug with surround sound hardware not being detected on Linux. Fixed an issue on Windows where we would not re-init audio output correctly, when the Unity project requested surround sound, and the Editor or player was started with no such hardware available. When surround sound hardware is later enabled and set as the default output, it will now be used. (UUM-348)
    - Linux: Fixed a minor bug in the GetOperatingSystemNumeric Linux API. (UUM-45625)
    - Linux: Fixed a scroll issue when a window is attached to the left half of the secondary monitor. (UUM-43910)
    - Linux: Fixed an issue where Linux Player generated mouse delta values when clicking the left mouse button repeatedly. (UUM-46825)
    - Linux: Fixed an issue where support for new gamepad/controllers was missing. (UUM-52502)
    - Linux: Fixed an issue where the space key dis not work when Shift key was held. (UUM-54226)
    - Linux: Fixed an issue with Vulkan falsely reporting that HDR is supported on Linux. (UUM-43364)
    - Linux: Fixed crash when destroying and rebuilding main GTK menu. (UUM-53175)
    - Linux: Fixed crash when destroying and rebuilding main GTK menu. (UUM-56334)
    - Linux: Fixed CursorLockMode.Confined does not confine cursor when using multiple displays. (UUM-57233)
    - Linux: Fixed GTK error messages in Editor.log. (UUM-57121)
    - Linux: Fixed issue where copying text could replace it with a line break. (UUM-40156)
    - Linux: Fixed issue where text could be duplicated when pasted into a search field. (UUM-39837)
    - Linux: Fixed Linux Standalone player printing validation errors with empty project. (UUM-59818)
    - Linux: Fixed Multi-touch events that weren't being recognized on Linux Player. (UUM-49191)
    - Linux: Fixed New Input System Mouse Click does not work on Secondary Displays. (UUM-55275)
    - Linux: Fixed perspective changes that are slow when quickly scrolling through the Scene View. (UUM-40326)
    - Linux: Fixed the Editor progress window labels that weren't updating. (UUM-51402)
    - Linux: Fixed touch input while running on secondary display. (UUM-61789)
    - Linux: Improved the Unity player from using excessive CPU when the Run in the background option is turned off. (UUM-38092)
    - macOS: Fixed a bug that would cause crashes when creating certain VFX Graphs. (UUM-42943)
    - macOS: Fixed a driver issue that happened when the water system was enabled.
    - macOS: Fixed a regression where Command + Backward Delete would no longer delete on macOS. (UUM-59261)
    - macOS: Fixed an issue in Play mode that caused Unity to crash when using WebCamTexture while opening a second application that accessed the Webcam. (UUM-45255)
    - macOS: Fixed an issue where Crash Reporter failed to upload to cloud due to path not being pre-created. (UUM-60277)
    - macOS: Fixed an issue where focussing on a Modal window that opened in front of an application would cause the application to hang. (UUM-22691)
    - macOS: Fixed an issue where some shortcut keys weren't displaying correctly on macOS. (UUM-56280)
    - macOS: Fixed an issue where the values of a secondary displays refresh rate were invalid. (UUM-37294)
    - macOS: Fixed an issue with the mouse button that was stuck when focusing a window with mouse using Input System. (UUM-69724)
    - macOS: Fixed for custom server build profile getting value of player subtarget when building.
    - macOS: Fixed memory spikes when macOS player is offscreen or minimized (UUM-30049)
    - macOS: Fixed native plugins paths in an XCode project when the plugins have a specific architecture selected. (UUM-49036)
    - macOS: Limit Update loop frequency by target frame rate to not overwhelm the system and not delay input processing. (UUM-59176)
    - macOS: UI integration for dedicated server build profile settings.
    - Mono: Accessing AppContext.BaseDirectory will no longer throw an exception. (UUM-48816)
    - Mono: Add support for stack unwind code registration on Windows Arm64. (UUM-49668)
    - Mono: Correct confusing error printed when using NetworkInterface.OperationalStatus on Linux.
      https://github.com/Unity-Technologies/mono/pull/1848
      https://jira.unity3d.com/browse/UUM-46938 (UUM-46938)
    - Mono: Disallow unrestricted polymorphic deserialization in DataSet. (UUM-62270)
    - Mono: Fixed "ldftn opcode to an icall causes JIT compilation upon every invocation". (UUM-54694)
    - Mono: Fixed a race condition when the number of files in a directory changes while this code is executing. (UUM-58474)
    - Mono: Fixed an issue that caused deadlock when taking a memory profiler snapshot. (UUM-40688)
    - Mono: Fixed an issue where a blittable flag could be incorrect when it was read before MonoClass was initialized. (UUM-35682)
    - Mono: Fixed crash in Rider when hovering a symbol to view it's value. (UUM-43492)
    - Mono: Fixed crash on domain reload, due to domain specific memory stored within image specific data structures. (UUM-60632)
    - Mono: Fixed crash on Windows when certain Global Flags were enabled with the GFlags SDK tool. (UUM-49475)
    - Mono: Fixed crash that would occur when attempting to determine the size of a recursively defined struct. (UUM-58734)
    - Mono: Fixed Editor crash when mini_get_method fails. (UUM-45293)
    - Mono: Fixed issue where a fixed buffer within a valuetype struct would not be passed by value correctly. (UUM-30210)
    - Mono: Fixed issue where invoking a virtual method on a delegate would only consider the method's overrides on the first call. (UUM-55774)
    - Mono: Fixed issue with Socket.ReadAsync where the buffer submitted would not be updated when using a Memory. (UUM-54449)
    - Mono: Fixed min alignment of structures with explicit layout. (UUM-46084)
    - Mono: Fixed runtime crash when accessing a struct field of a null object. (UUM-47983)
    - Mono: Fixed wrong file path reported by mono_ppdb_lookup_location for methods that span multiple files. (UUM-4341)
    - Mono: Produce crash dump when g_assertion_message is called. (UUM-43015)
    - Mono: When processing the methods of an interface, check that a generic method has the virtual flag to avoid corrupting the vtable. (UUM-49018)
    - Multiplayer: Fixed an issue where a Multiplayer Role could be set to an invalid value in the serialized file. (MTT-7545)
    - Networking: Addressed a performance regression with UnityWebRequest when connecting to many HTTPS resources at the same time. (UUM-49389)
    - Networking: Fix crash when quitting application with running UnityWebRequest. (UUM-48042)
    - Networking: Fixed a UnityWebRequest crash that occurred if the texture was queried multiple times and destroyed between queries. (UUM-70009)
    - Networking: Fixed an issue where virtual methods in DownloadHandlerScript were being stripped. (UUM-34034)
    - Networking: Fixed TLS networking issue so that UnityWebRequest can now establish TLS connections with Windows Server 2012 and 2016. (UUM-41557)
    - Networking: Throw exception instead of crashing if UnityWebRequest is sent during app quit, such as from Destroy(). (UUM-63150)
    - Networking: UnityWebRequest scripting API improved and updated.
    - Networking: Update libcurl to version 8.4.0. (UUM-52015)
    - Nintendo Switch: Fixed regression where framerate has worsened in multithreaded rendering mode due to incorrect synchronisation between main thread and render-thread. (UUM-60673)
    - Nintendo Switch: Fixed regression where framerate has worsened in multithreaded rendering mode due to incorrect synchronisation between main thread and render-thread. (UUM-60673)
    - Package: - Add an argument to LiveStreamCaptureDeviceEditor.DrawDefaultLiveStreamInspector to fix the feature that checks the required components for the camera tracking.
      - LiveStream.Properties now uses a Dictionary instead of an IEnumerable to avoid type casting and boxing issues.
    - Package: Fixed serialization of player accounts settings.
    - Package: Updated Localization package to 1.5.0-pre.1.
    - Package: [XR] Updated XR Interaction Toolkit to version 2.4.1.
    - Package Manager: Add a scroll control to the package manifest description field in the Inspector window. (UUM-42618)
    - Package Manager: Added a fix to ignore the ProjectVersion file when importing a package to fix the downgrading of the project version. (UUM-46086)
    - Package Manager: Added a horizontal scrollbar to ensure multi-select buttons are viewable in the Package Manager window. (UUM-45948)
    - Package Manager: Disabled the Clear Filters button when filters aren't applied. (UUM-42518)
    - Package Manager: Fixed a bug where the Editor crashed when a project manifest is saved with UTF-8 with BOM encoding or project manifest begins with a special character. (UUM-46806)
    - Package Manager: Fixed a null reference exception when using the Unity Editor to open the Meta XR Utilities package from the Asset Store. (UUM-48307)
    - Package Manager: Fixed a Package Manager issue so a status message displays when installing a package by name and specifying an explicit version number. (UUM-41690)
    - Package Manager: Fixed a Package Manager issue that prevented button states from refreshing after updating a package. (UUM-44775)
    - Package Manager: Fixed a Package Manager issue that prevented packages from displaying when a local tarball dependency doesn't point to a file on disk. (UUM-63177)
    - Package Manager: Fixed a Package Manager issue to display the Git label for Git packages in the Version History tab in the Details panel. (UUM-70055)
    - Package Manager: Fixed a Package Manager issue where experimental packages weren't showing up in the list of available packages. (UUM-62031)
    - Package Manager: Fixed a Package Manager issue where installing a UPM package from the Asset Store selected a random package in package list. (UUM-62656)
    - Package Manager: Fixed a visual issue in light mode when downloading from the My Assets view. (UUM-36664)
    - Package Manager: Fixed an issue in the Package Manager's Import window, when collapsing the root folder of a package. (UUM-52889)
    - Package Manager: Fixed an issue involving the minimum width of the navigation panel in the Package Manager. (UUM-62121)
    - Package Manager: Fixed an issue where adding packages could fail with the error message "Converting circular structure to JSON". (UUM-63996)
    - Package Manager: Fixed an issue where built-in packages could not be resolved if a dependency version did not exactly match the built-in package version. (UUM-37161)
    - Package Manager: Fixed an issue where bundled packages could not be installed if cached data was found in the wrong format. This fix addresses the error, "Cannot read properties of undefined (reading 'shasum')."
    - Package Manager: Fixed an issue where bundled plugins can't be exported into a .unitypackage file. (UUM-37376)
    - Package Manager: Fixed an issue where custom, local, and git packages weren't getting information from the package.json manifest file. (UUM-47732)
    - Package Manager: Fixed an issue where Git packages were incorrectly displayed in the Unity Registry. (UUM-53183)
    - Package Manager: Fixed an issue where removing a scope from package scoped registry in Project Settings resulted in No package to display in Packman list view. (UUM-65955)
    - Package Manager: Fixed an issue where the Leaderboards Package was not visible in the Services tab of the Package Manager window.
    - Package Manager: Fixed an issue where the Package Manager Diagnose button didn't display the diagnostic tool output on Windows.
    - Package Manager: Fixed an issue where the registeredPackages event would not be raised on startup.
    - Package Manager: Fixed an issue with the Package Manager caused by setting the NODE_OPTIONS environment variable.
    - Package Manager: Removed a folder from the immutable assets backup system, which was preventing installers from building.
    - Package Manager: Removed warning icons when an asset store download is aborted. (UUM-47319)
    - Package Manager: Updated icons and styles to make the installed icon clearly visible in light mode. (UUM-70540)
    - Package Manager: Updated the rules to determine the recommended version of a package. (UUM-46466)
    - Particles: Added Custom Render Queue UI to built-in particle shaders.
    - Particles: Fixed a crash that could happen when particle systems with mesh particles were deleted. (UUM-26623)
    - Particles: Fixed a Noise Module occasional glitches issue. (UUM-58283)
    - Particles: Fixed a random crash with Prewarm and SubEmitter. (UUM-54962)
    - Particles: Fixed an issue that cuased the VFX Manager to attempt to create particles when there was no graphics device present in the Editor. (UUM-41118)
    - Particles: Fixed an issue where ParticleSystems playing in Edit mode would continue playing after undoing changes, applying or reverting prefab instances or copy-pasting. (UUM-28514)
    - Particles: Fixed particles flickering on Vulkan. (UUM-21106)
    - Particles: Fixed regression that was causing a crash in ParticleSystem Stop() when called outside of main thread. (UUM-54561)
    - Particles: Fixed the output array size of GetTriggerParticles to equal the actual number of "trigger particles" so that it isn't larger than it should be and thus contain uninitialized values. (UUM-68018)
    - Particles: Fixed Trail module crash when using Generate Lighting Data checkbox. (UUM-58366)
    - Particles: Improve batching performance of Particle Systems that use Sprites. (UUM-52114)
    - Physics: Added a new parameter to the physics settings called Fast Motion Threshold. It improves the continuous collision detection (CCD) response for fast-moving small phyiscs bodies that collide with larger ones. (UUM-57910)
    - Physics: Fixed a crash that would occur when WheelCollider.rotationSpeed called while no Rigidbody was present up the hierarchy. (UUM-47082)
    - Physics: Fixed a Rigidbody and ArticulationBody issue that allowed the physics system to set quaternions with non-finite components as the inertia tensor rotation value. Unity now discards inertia tensor rotations that contain infinite components. (UUM-49807)
    - Physics: Fixed a spelling issue in a Box Collider warning message. (UUM-57944)
    - Physics: Fixed an issue moving child triggers causing parent bodies to recalculate their center of mass. (UUM-30798)
    - Physics: Fixed an issue that caused Player builds to crash because the physics system released collision meshes into the shutdown sequence of the engine too late. (UUM-61878)
    - Physics: Fixed an issue that caused scaling checks for the Cloth component to register a false positive on x64 non-development player builds. (UUM-26254)
    - Physics: Fixed an issue that caused the Cloth paint tool to be unusable, due to a mismatch between the Mesh's MeshColliderCookingOptions and what the Cloth system requested. (UUM-35062)
    - Physics: Fixed an issue that caused the physics system to generate incorrect contact pair flags, which triggered crashes inside the PhysX solver when kinematic Rigidbody components collided with continuous collision detection (CCD) enabled. (UUM-54007)
    - Physics: Fixed an issue that caused the physics system to rebuild physics scenes every time a preview scene unloaded.
    - Physics: Fixed an issue that caused Unity to crash on the next Physics.Simulate call after moving the target of Joint.connectedBody or Joint.connectedArticulationBody across scenes. (UUM-46877)
    - Physics: Fixed an issue that caused Physics.gravity to attempt to wake up kinematic Rigidbody components, which triggered error messages. (UUM-57939)
    - Physics: Fixed an issue that caused Physics.IgnoreCollision to sometimes override previous entries in the ignorance list for either Collider. This issue caused the colliders within those entries to collide multiple times. (UUM-61078)
    - Physics: Fixed an issue that prevented Rigidbody.Move and Rigidbody.MoveRotation on kinematic Rigidbody components from respecting position constraints. (UUM-61558)
    - Physics: Fixed an issue where Cloth crashed when attempting to bake using a mesh that had duplicate vertices and all the particles pinned. (UUM-34029)
    - Physics: Fixed an issue where small bodies would tunnel through large bodies in continuous collision detection mode at high simulation frequencies (~200Hz). (UUM-19349)
    - Physics: Fixed an issue where Joint::axis could not be initialized during component construction. (UUM-46606)
    - Physics: Fixed an issue where Rigidbody.freezeRotation incorrectly added RigidbodyConstraints.FreezePosition to the Rigidbody constraint flags. (UUM-44454)
    - Physics: Fixed an issue with Rigidbody.MoveRotation that caused false positives. The epsilon that the physics system used to verify that the provided quaternion was close to being unit length was too precise. (UUM-57420)
    - Physics: Fixed incorrect handling of the ArticulationDriveType serialized property of Articulation Drives in the ArticulationBody inspector. (UUM-64175)
    - Physics: Fixed the torque computation of ArticulationBody.AddRelativeTorque to properly move the provided local space torque into world space before applying the inertia tensor world matrix. This change only affects cases where ForceMode.AccelerationandForceMode.VelocityChange` would be used.
    - Physics: Fixed the torque computation of RigidBody.AddRelativeForce to use the inertia tensor world matrix instead of mass. This change only affects cases where ForceMode.Acceleration and ForceMode.VelocityChange would be used. (UUM-54134)
    - Physics: Fixed the torque computation of RigidBody.AddRelativeTorque to properly move the provided local space torque into world space before applying the inertia tensor world matrix. This change only affects cases where ForceMode.Acceleration and ForceMode.VelocityChange would be used.
    - Physics: Re-enabled printing of the Mesh asset's path when a MeshCollider fails to initialize.
    - Physics 2D: Ensure that Static 2D Colliders in the Editor Scene view are updated per-frame rather than per-fixed-update when moving them outside of Play mode. (UUM-15955)
    - Physics 2D: Fixed an accuracy issue when using Physics2D.CapsuleCast where the specified capsule geometry has the same width and height i.e. it is a circle shape. (UUM-54373)
    - Physics 2D: Fixed an issue so that small or thin holes are no longer left inside a Polygon Collider 2D when removing a near-collinear vertex. (UUM-45879)
    - Physics 2D: Fixed an issue when using a CircleCollider2D in a CompositeCollider2D whilst using Transform scaling, the Radius could become invalid. (UUM-61207)
    - Physics 2D: Fixed an issue when using SetEnabled on CompositeCollider2D should have no effect as component isn't able to be disabled. (UUM-59650)
    - Physics 2D: Fixed an issue when using CustomCollider2D.SetCustomShapes using a NativeArray to allow the shape vertices to be non-contiguous i.e each redundant vertex unused by shapes are allowed. (UUM-53717)
    - Physics 2D: Fixed an issue where Animation Root Motion rotation and Animation Transform rotation could not correctly rotate a Rigidbody2D. (UUM-44297)
    - Physics 2D: Fixed an issue where OnTriggerExit2D or OnCollisionExit2D are not called if the Collider2D has existing contacts but then becomes invalid (no shapes) due to an arbitrary rotation around the x and/or y-axis. (UUM-53156)
    - Physics 2D: Fixed an issue where PhysicsShapeGroup2D.Add() produced incorrect PhysicsShape2D.vertexStartIndex. (UUM-57029)
    - Physics 2D: Fixed the issue with scene/prefab corruption that was causing the CompositeCollider2D to crash when any of the referred colliders were missing. (UUM-70051)
    - Physics 2D: Fixed unwanted contacts when a Rigidbody2D set to use Continuous Collision Detection, catches the edges of Colliders placed side-by-side. (UUM-70407)
    - Physics 2D: Modified RelativeJoint2D to show Angular offset in degrees instead of radians when Auto Configuration Offset is enabled. (UUM-42690)
    - Playables: Fixed documentation for FrameData.frameId that was wrong. (UUM-49593)
    - Player: Fixed a memory regression issue in Player. (UUM-40679)
    - Prefabs: Fixed a bug that caused the error "Prefab mismatch: The instance object in the scene is referencing a corresponding source object in the Prefab of a different type." to be thrown when an added GameObject was applied to a Prefab. (UUM-36238)
    - Prefabs: Fixed a bug where the properties of some children were not being reverted when multi-editing a property under one Prefab instance. (UUM-42527)
    - Prefabs: Fixed an editor crash by removing the root GameObject on a prefab instance. (UUM-58461)
    - Prefabs: Fixed Assets referenced in Prefab Mode are not unloaded until a new Scene is opened. Now we also unload unused assets when exited Prefab Mode or changing to another Prefab in Prefab Mode. (UUM-49014)
    - Prefabs: Fixed issue causing crashes by having Unity not destroy removed GameObjects if they are referenced in the scene. (UUM-69243)
    - Prefabs: Fixed the "Active" property in constraint components using the data from its scene data and using the value from its prefab data. (UUM-47009)
    - Profiler: Added capacity argument checks to the ProfilerRecorder api to prevent crashes due to invalid initialization. (UUM-64295)
    - Profiler: Fixed an issue whereby all Rendering statistics could be zero in Play Mode when the application's target frame rate was set. (UUM-58128)
    - Profiler: Fixed an issue whereby the Physics2D module did not display counters in the Profiler. (UUM-57758)
    - Profiler: Fixed FrameTimingManager reported incorrect GPU time on Android GLES. (UUM-52911)
    - Profiler: Fixed Mono not reporting free managed heap segments and internal allocations. (UUM-53413)
    - Profiler: Fixeed null pointer access crash inside ProfilerRecorder. (UUM-53009)
    - Profiler: Profiler preferences UI padding now matches other preferences. (UUM-34446)
    - Profiler: The default Memory module's details view is now scrollable. (UUM-52677)
    - QNX: Fixed signal handler hang. (UUM-61729)
    - QNX: Fixed touch input while running on secondary display. (UUM-61789)
    - Scene Manager: Fixed a crash when replacing a missing prefab asset. (UUM-42461)
    - Scene Manager: Resolved issue so that the prefab scale value does not default to zero when a prefab with canvas is modified with EditPrefabContentsScope. (UUM-47434)
    - Scene/Game View: Fixed a issue where the in-scene context menu would appear outside the Scene View. (UUM-40106)
    - Scene/Game View: Fixed a problem were the scene picking cache could be out of date.
    - Scene/Game View: Fixed a slight pause in the Scene View's camera movement when rapidly changing between arrow keys of opposite directions. (UUM-42170)
    - Scene/Game View: Fixed an issue that caused high CPU usage when more than one Game view was open. (UUM-44719)
    - Scene/Game View: Fixed an issue where clicking on the SceneView with the middle mouse button would not focus it on MacOS. (UUM-57116)
    - Scene/Game View: Fixed an issue where exiting a tool variant triggers another tool variant from the same group. (UUM-54110)
    - Scene/Game View: Fixed an issue where GameObject icon was not visibility responsive to Scene View visibility. (UUM-55801)
    - Scene/Game View: Fixed an issue where GameView would often lose VSync state when re-docked during play mode. (UUM-56228)
    - Scene/Game View: Fixed an issue where maximizing SceneView during playmode would result in a crash. (UUM-60687)
    - Scene/Game View: Fixed an issue where navigating the SceneView using Flythrough mode would cause a system alert sound to be played on macOS. (UUM-56936)
    - Scene/Game View: Fixed an issue where SceneView's context menu would not show up when pressing Control + LMB on macOS. (UUM-60337)
    - Scene/Game View: Fixed an issue where shader dispatch events did not show up in the GameView RenderDoc capture data. (UUM-29955)
    - Scene/Game View: Fixed an issue where the Add button in the GameView's Resolution Size menu was slightly obscured. (UUM-42590)
    - Scene/Game View: Fixed an issue where the curve keyframes context menu would only have the "Add Key" option. (UUM-41464)
    - Scene/Game View: Fixed an issue where the GameView would no longer render after the default editor layout was loaded on macOS. (UUM-60963)
    - Scene/Game View: Fixed an issue where the pop-up overlays would be displayed outside of the editor window. (UUM-62422)
    - Scene/Game View: Fixed an issue where the SceneView's Tools overlay's buttons would not have the correct icon resolution. (UUM-54023)
    - Scene/Game View: Fixed an issue where the Tool Settings overlay was popping in the middle of the scene view rather than at the mouse position.
    - Scene/Game View: Fixed an issue where the Transform Tool would not respect the global handle rotation setting. (UUM-62487)
    - Scene/Game View: Fixed an issue with CamerasOverlay styling when docked in a toolbar and pop-up mode. (UUM-45894)
    - Scene/Game View: Fixed an isuee where a custom collapsed overlay would not opened in collapsed mode. (UUM-49330)
    - Scene/Game View: Fixed center tool handle mode. (UUM-55984)
    - Scene/Game View: Fixed drag and drop action of Skybox material in the SceneView not added to the Undo stack and not dirtying the scene. (UUM-29041)
    - Scene/Game View: Fixed FPS camera navigation not activating when RMB+{W,A,S,D} keys are pressed without mouse movement. (UUM-57993)
    - Scene/Game View: Fixed grid size field not updating after enabling constrained grid size. (UUM-46865)
    - Scene/Game View: Fixed issue where holding the Shift key down and scrolling with the mouse wheel would not change SceneView's camera speed while in Flythrough mode. (UUM-56423)
    - Scene/Game View: Fixed missing Alt + Left Mouse Button pan shortcut when in 2D scene mode. (UUM-61554)
    - Scene/Game View: Fixed Move tool behavior when the parent GameObject changes during manipulation. (UUM-56520)
    - Scene/Game View: Fixed ScrollWheel not working with SceneView Camera Viewpoints. (UUM-53941)
    - Scene/Game View: Fixed styling of collapsed overlays. (UUM-49032)
    - Scene/Game View: Fixed the Edit/Frame Selected setting not focusing the last active Scene view when the Hierarchy window is focused. (UUM-43944)
    - Scene/Game View: Fixed the Scene View mouse jumping to only be set when the view tools are active. (UUM-33675)
    - Scene/Game View: Fixed the ToolSettings popup location to be at the mouse position. (UUM-62764)
    - Scene/Game View: Fixed Transform Tool rotation handle not respecting increment snap setting. (UUM-61749)
    - Scene/Game View: Fixing a Gizmo from disappearing when selecting nested prefabs. (UUM-67501)
    - Scene/Game View: Fixing styling issue in "Move To" label of the Grid Settings overlay. (UUM-49171)
    - Scene/Game View: Fixing styling issue in buttons highlight of the Grid Settings overlay. (UUM-46858)
    - Scripting: ColorUtility.TryParseHtmlString will now remove any whitespace from the start and end of the input string. (UUM-54327)
    - Scripting: Corrected TransformAccess.GetLocalPositionAndRotation() to return accurate results. (UUM-62533)
    - Scripting: Deprecated PrefabUtilitiy.InstantiateAttachedAsset. (UUM-33714)
    - Scripting: Editor crash when trying to determine assembly information for a path without any asmdef (UUM-48054)
    - Scripting: Ensure that we use a Logical Path rather than an Absolute Path when looking up InstanceIDs. (UUM-63675)
    - Scripting: Ensured thread safety for mono gc calls.
    - Scripting: Fixed a couple of issues in AssemblyUpdater with regard to generic type handling. (UUM-16921)
    - Scripting: Fixed a crash that would occur if a coroutine was not persisted when a series of UnityEvents were invoked. (UUM-29293)
    - Scripting: Fixed a possible crash when using the HierarchyCommandList.Add method. (UUM-54518)
    - Scripting: Fixed an Editor crash that occured when trying to determine assembly information for a path does not belong to an assembly. (UUM-64099)
    - Scripting: Fixed an incorrect icon that appeared when a script's name is 'GameManager'. (UUM-46121)
    - Scripting: Fixed an issue that prevented scripts from compiling and filing up the Editor logs. (UUM-45593)
    - Scripting: Fixed an issue where debugging a .net 6 project with Visual Studio would make the editor hang on startup. (UUM-60296)
    - Scripting: Fixed AssemblyUpdater process not never exiting in some scenarios. (UUM-55990)
    - Scripting: Fixed crash when loading a project with script compilation errors (UUM-48740)
    - Scripting: Fixed crash when reflecting over all parameters on all methods in the UnityEngine assembly. (UUM-62295)
    - Scripting: Fixed files not getting added for compilation if GUIDs are detected as a move, and the old file added as new.
    - Scripting: Fixed method Hierarchy.Reserve that would add the specified capacity instead of ensuring that capacity. (UUM-54520)
    - Scripting: Fixed method Hierarchy.SortChildren recursive that would stop prematurely. (UUM-54519)
    - Scripting: Fixed race condition that could cause crashes on startup when native code called into managed code. (UUM-49357)
    - Scripting: Fixed reload not happening when multiple compilations happens in same editor tick. (UUM-62508)
    - Scripting: Fixes regression where clicking on a script compilation error in the Console Window doesn't highlight the script in the Project Window. (UUM-16958)
    - Scripting: Fixesd a console error related to rider pkg (v3.0.25 or later), which appears in Editor SafeMode. (UUM-57097)
    - Scripting: Reduced the noise in Editor logs when ApiUpdater fails to read/write cached configuration files. (UUM-49205)
    - Scripting: Removed the multiple HelpURL attributes warning. (UUM-59630)
    - Search: Do not dig into managedReference when parsing for scene dependencies. (UUM-49308)
    - Search: Fixed "filtermode" not adding a query block. (UUM-61219)
    - Search: Fixed "filtermode" search proposition appearing twice. (UUM-61247)
    - Search: Fixed an issue for a missing square icon for AssetLabel. (UUM-62795)
    - Search: Fixed an issue to ensure Index have a dependency id computed from their type name. (UUM-62159)
    - Search: Fixed an issue when computing dependencies in ScenePRovider we only add reference for root prefab instance. (UUM-45908)
    - Search: Fixed an issue when directory are renamed it was not properly invalidate propertydb. (UUM-59213)
    - Search: Fixed an issue where index types of assets that are not .prefab were not ensured. (UUM-62327)
    - Search: Fixed an issue where items with the same name didn't appear when using the Advanced Search Picker. (UUM-43907)
    - Search: Fixed an issue where Search's placeholder texts overlapped and escaped the search field. (UUM-44349)
    - Search: Fixed an issue which allows index to be saved in local package. (UUM-62277)
    - Search: Fixed EditColumn dialog that was closing if we were opening a PopupField (happens with new menu system). (UUM-48617)
    - Search: Fixed IndexManager by disabling SubObject options editing if the index is Scene or Prefab. (UUM-62150)
    - Search: Fixed ObjectField alignment. (UUM-48555)
    - Search: Fixed search not evaluating content of DontDestroyOnLoad scene. (UUM-49568)
    - Search: Fixed Search Window table view buttons appearing multiple times. (UUM-59166)
    - Search: Fixed Search's "Press Tab to filter" so its icon displays. (UUM-44351)
    - Search: Fixed SearchQueryEditor keeping references to old SerializedProperties, causing NullReferenceExceptions when inspecting other objects. (UUM-48277)
    - Search: Fixed sync items selected when switching between group tabs. (UUM-42246)
    - Search: Fixed Synchronous search at unity startup or after domain reload. Ensure DB are initialized. (UUM-61251)
    - Search: Fixed the Search saved queries sort button to display the dropdown with the ordering options that wasn't showing up briefly. (UUM-41038)
    - Search: Re-enabled search providers priority sorting. (UUM-60991)
    - Search: Remove the Transient Window menu item. (UUM-59187)
    - Serialization: Fix incorrect behaviour of "visited" hash set.
    - Serialization: Fixed a crash by performing a rebuild after the rename of the scriptable object and the scriptable object are updated accordingly. (UUM-41704)
    - Serialization: Fixed a crash that occured in SerializedProperty:CopyInternalImpl when clicking on a specific Asset. (UUM-68293)
    - Serialization: Fixed an Editor crash that occured when creating asset bundle with fully supported inflated types. (UUM-37034)
    - Serialization: Fixed an issue so that the class name of an inflated types does not include the namespace. (UUM-27766)
    - Serialization: Fixed an issue that can cause long or near-infinite loop after insertion from BaseListView. (UUM-41478)
    - Serialization: Fixed calling JsonUtility.FromJson<T>(json) in parallel task. (UUM-46590)
    - Serialization: Fixed player build checks when assembly is modified. (UUM-48662)
    - Serialization: Fixed the TypeDB path in BuildPlayerDataGenerator. (UUM-28069)
    - Serialization: SerializedProperty.boxedValue now works with types containing SerializeReference. (UUM-15022)
    - Shadergraph: Addressed issue with main preview window failing to refresh. (UUM-47201)
    - Shadergraph: Fix an issue where sprite previews were not rendering. (UUM-41514)
    - Shadergraph: Fixed a regression where adding nodes in large graphs caused a major slowdown. (UUM-46770)
    - Shadergraph: Fixed a typo in the generated code for the NAND node. (UUM-47325)
    - Shadergraph: Fixed an issue where InstanceID node did not give the correct values when the ShaderGraph is used with all Draw APIs such as Graphics.DrawMeshInstancedIndirect, Graphics.DrawMeshInstancedProcedural, Graphics.DrawProcedural, Graphics.DrawProceduralIndirect, their CommandBuffer counterparts and the equivalent RenderMesh and RenderPrimitive counterparts.
    - Shadergraph: Fixed an issue where an open asset inspector for subgraphs may mangle the json serialized representation for that subgraph asset. (UUM-56145)
    - Shadergraph: Fixed an issue where drag-out node creation would leave the editor unresponsive. (UUM-53778)
    - Shadergraph: Fixed an issue where hotkeys would be caught by unfocused floating editor windows. (UUM-62262)
    - Shadergraph: Fixed an issue where material override GUIs for Built-In would sometimes get ignored. (UUM-46774)
    - Shadergraph: Fixed an issue where the Save/Save as hotkeys weren't being caught by the Shader Graph window.
    - Shadergraph: Fixed an issue where unexpected slowdowns may occur after dependent saving subgraphs. (UUM-52209)
    - Shadergraph: Fixed an issue where unexpected slowdowns may occur after dependent saving subgraphs. (UUM-61897)
    - Shadergraph: Fixed an issue where value nodes might appear on undo/redo where property nodes would be. (UUM-52909)
    - Shadergraph: Fixed incorrect documentation links from the editor for Custom Interpolators and Property Types.
    - Shadergraph: Fixed issue when selecting options on the HDRP Target's Material Type would result in an unexpected error. (UUM-60129)
    - Shadergraph: Fixed minor usability issues with Custom Function Nodes.
    - Shadergraph: Fixed node creation menu location on macOS. (UUM-47824)
    - Shadergraph: Fixed the ShaderGraph codegen when an InstanceID node is used in a graph with keywords. (UUM-56910)
    - Shadergraph: Fixed typos in the text of the the Node Reference samples. (UUM-58488)
    - Shadergraph: Removed a non-valid character from the name of an imported material sub asset.
    - Shaders: Added mem_flags::mem_texture to AllMemoryBarrier* (UUM-55302)
    - Shaders: do not try to prewarm stereo-instancing variants since they require specific RT setup (for "layered" rendering). (UUM-54697)
    - Shaders: Fixed a performance regression when enumerating shader keywords. (UUM-48152)
    - Shaders: Fixed an editor crash when updating a shader graph referenced by another shader using UsePass. (UUM-46187)
    - Shaders: Fixed an issue to ensured that compute shaders register include dependencies properly in some edge cases. This way fixing errors in include files will recompile the shader as expected. (UUM-35111)
    - Shaders: Fixed an issue where internal shader compiler errors such as losing connection to a compiler process were cached like compilation errors are. (UUM-28802)
    - Shaders: Fixed an issue where internal shader compiler errors such as losing connection to a compiler process were cached like compilation errors are. (UUM-28802)
    - Shaders: Fixed an issue with HLSL to Metal codegen when loading a specific sample index from a Texture2DMSArray. (UUM-46480)
    - Shaders: Fixed code generated for Texture.Load with offset. (UUM-56574)
    - Shaders: Fixed compilation errors when compiling shaders using GLSL reserved words for Vulkan. (UUM-54225)
    - Shaders: Fixed compiling geometry and tessellation shaders for the Vulkan graphics API, so it no longer generates a "gl_" identifiers error. (UUM-30365)
    - Shaders: Fixed crashes on some platforms due to trying to allocate too many lock objects. (UUM-57249)
    - Shaders: Fixed dynamic shader keywords so they longer create a keyword space mismatch when you use them with UsePass. (UUM-44739)
    - Shaders: Fixed HLSLcc issue that was causing compilation errors when SV_RenderTargetArrayIndex was read in the fragment stage in desktop GL environments. (UUM-59021)
    - Shaders: Fixed PackageRequirements block in ShaderLab not recognizing experimental package versions. (UUM-43288)
    - Shaders: Fixed pragma only_renderers and pragma exclude_renderers being ignored in .raytrace shaders. (UUM-61120)
    - Shaders: Fixed shader compiling so shaders with the Native16Bit requirement no longer compile with FXC instead of DXC for the Metal graphics API.
    - Shaders: Fixed shader importing so it no longer sometimes crashes the Editor. (UUM-42369)
    - Shaders: Fixed shader warmup when a scriptable render pipeline initializes in OpenGL. The GPU no longer hangs if you specify a shader preloading asset. (UUM-43199)
    - Shaders: Fixed the WarmupAllShaders API so it warms up all variants instead of only a single variant per pass. (UUM-45992)
    - Shaders: Fixed UsePass shader to update its state whenever the pass owner shader is being modified. (UUM-5582)
    - Shaders: Fixed \#include_with_pragmas directives deleting other lines of code during raytracing and compute shader compilation. (UUM-35030)
    - Shaders: For shaders compiled using DXC for Vulkan, fixed "maximal supported UAV limit" errors being generated on UAV resource declarations when they shouldn't be. (UUM-56264)
    - Shaders: Improved CPU-side performance when using shaders with dynamic_branch directives. (UUM-52979)
    - Shaders: Improved message in the player log when sending the shader variant to the GPU driver. (UUM-62527)
    - Shaders: Improved shader import performance. (UUM-66848)
    - Source Code Build: VisionOS no longer makes building il2cpp from source fail. (UUM-48881)
    - SpeedTree: Fixed an issue where meshes did not calculate UV distribution metrics when imported. (UUM-27636)
    - SpeedTree: Fixed popping Level Of Detail (LOD) transitions for the Crossfade mode for URP. (UUM-40046)
    - SpeedTree: Fixed very poor performance of speed tree wind GPU shader parameters computation in SpeedTreeWindManager. (UUM-13879)
    - SRP Core: Add XR for Lens Flare Data Driven. (UUM-33648)
    - SRP Core: Added CreateSkyboxRendererList in Render Graph API. (UUM-60100)
    - SRP Core: Allowing buffer read through NRP RenderGraph API. (UUM-48872)
    - SRP Core: Avoid getting UnityEditor.SceneManagement.PrefabStage with reflection from the static ctor of CoreUtils. (UUM-43722)
    - SRP Core: Bump MaxReaders (UUM-54010)
    - SRP Core: Fixed 'Remove All' context action for Volume Profile not working in VolumeEditor. (UUM-56409)
    - SRP Core: Fixed a crash caused by the Volume Profile context menu in the HDRP or URP Asset. (UUM-46030)
    - SRP Core: Fixed amemory leak from NativeList in RenderGraph. (UUM-60154)
    - SRP Core: Fixed an issue in the Rendering Debugger where APV was not shown on editor when Strip runtime debug shaders was enabled in the global settings. (UUM-43597)
    - SRP Core: Fixed an issue where Screen Space UI Overlay would not rendered again without a camera in URP/HDRP. (UUM-58403)
    - SRP Core: Fixed CurrentPipelineHelpURLAttribute.URL returning null when render no pipeline is active, causing errors. (UUM-53661)
    - SRP Core: Fixed issue where errors could be thrown by debug action registration if deleting all axes in Input Manager. (UUM-45496)
    - SRP Core: Fixed issue where using BiRP-only Camera APIs with active SRP didn't display a warning as expected. (UUM-60381)
    - SRP Core: Fixed left eye's Lens Flare light in XR. (UUM-35075)
    - SRP Core: Fixed lens flare so that it performs occlusion with a certain Occlusion Offset value when the camera is facing a light (UUM-3984)
    - SRP Core: Fixed some leaks / missing calls to Dispose() in GI probe baking code.
    - SRP Core: Fixed Stripping.meta corrupted metal file. (UUM-46994)
    - SRP Core: Fixed volume profile reset action in graphics settings. (UUM-57245)
    - SRP Core: Improve reliability of shader variance list regex parser. Current parser includes time stamps which cause duplicates to not be parsed correctly. Changes improve regex parsing and sanitize the liens from the log (which include time stamps). (UUM-59758)
    - SRP Core: Improved the compiler logic that detects if the current render target is being used outside the current native render pass (e.g., when the pass is broken up by an unsafe pass), and determines the store action for this case. The fix now ensures that the StoreAndResolve action is used when the resource is read by an Unsafe Pass. (UUM-67135)
    - SRP Core: NullReferenceException when trying to display VolumeComponents overrides. (UUM-53816)
    - SRP Core: Rendering Debugger - Fixed Render Graph Debug Display Reset behaviour. (UUM-62760)
    - SRP Core: Tier0 rendering ignores the scene visibility toggle. (UUM-56162)
    - SRP Core: When changing the Global Settings asset, the UI was not being refreshed to and the old asset was being displayed. (UUM-46874)
    - Terrain: Fixed a player crash when a terrain tile completely made of holes was viewed from a distance. (UUM-45970)
    - Terrain: Fixed motion blur for terrain with non-default transform. (PPB-52)
    - Terrain: Fixed Terrain shaders for grass and SpeedTree to ensure billboard grass and trees are visible for all depth priming modes. (UUM-31371)
    - Test Framework: Fixed an issue where a memory tracking fixture would not print callstacks when used in leak mode. (UUM-42432)
    - Text: Fixed managed exception thrown from the FontAsset finalizer. (UUM-59143)
    - Text: Fixed un-detected sprite asset changes after adding new sprites. (UUM-55614)
    - TextCore: Added Nirmala UI font family as the global fallback for Hindi (Indian language) script on Windows.
    - TextCore: Ensure Dynamic FontAsset have a readable Atlas. (UUM-59596)
    - TextCore: Ensure GetPreferredValues and GenerateTextMesh return the same size. (UUM-61577)
    - TextCore: Ensure only Kernings are populated for UITK and IMGUI. (UUM-37691)
    - TextCore: Fixed a bug that caused a crash when upgrading materials. (UUM-32513)
    - TextCore: Fixed an issue in selection index evaluation (UUM-49603)
    - TextCore: Fixed an issue were errors were thrown for incorrectly formatted tags. (UUM-11753)
    - TextCore: Fixed an issue where Kerning was applied to Sprites. (UUM-57103)
    - TextCore: Fixed Ideographic Variation Selector. (UUM-63538)
    - TextCore: Fixed FontAsset menu items. (UUM-36040)
    - TextMeshPro: Added a fix to ensure PreferredHeight handles the line height settings correctly.
    - TextMeshPro: Added missing _ScaleRatioA to HDRP and URP shaders.
    - TextMeshPro: Applied a fix to ensure that PreferredHeight handles various line height correctly and does not cut off text.
    - TextMeshPro: Custom validator ignores the returned character from the validate function. (UUM-42147)
    - TextMeshPro: Editing a textfield on mobile and then submitting throws an exception. (UUM-37282)
    - TextMeshPro: Ensure Sprites can be reordered within a SpriteAsset. (UUM-49349)
    - TextMeshPro: Ensured that sprites now use the correct indexes.
    - TextMeshPro: Fixed a bug that would crash the Editor when upgrading materials.
    - TextMeshPro: Fixed a Dropdown creation issue that was causing a crash after undoing. (UUM-60214)
    - TextMeshPro: Fixed an issue where enabling and disabling Canvases caused a regeneration of the text. (UUM-45320)
    - TextMeshPro: Fixed an issue where there were missing grey and lightblue tags. (UUM-54820)
    - TextMeshPro: Fixed an issue with Surrounding dropdown not closing correctly in certain situations. (UUM-33691)
    - TextMeshPro: Fixed issue in editor where a null mesh may be set with still present submesh data, not having the canvas update. (UUM-59216)
    - TextMeshPro: Fixed margin values of TMP Text object can't be set when having specific anchors (UUM-46117)
    - TextMeshPro: Fixed submesh deactivation where base mesh was null. (UUM-58083)
    - TextMeshPro: Fixed the Maskable property so it propagates to SubMesh.
    - TextMeshPro: Fixed the TMP Importer window so it does not repeatedly pop up. (UUM-41289)
    - TextMeshPro: Fixed TMP_InputField line limit behavior to mean unlimited when the value is set to zero or negative. (UUM-57192)
    - TextMeshPro: Introduce a shim version of TextMesh Pro for packages that had a hard dependency on it. (UUM-58068)
    - TextMeshPro: Set the FaceInfo setter to public.
    - TextMeshPro: Setting the game object layer for the Dropdown blocker game object to match the Canvas value. (UUM-62470)
    - Timeline: Fixed a MissingReferenceException when editing a Timeline that is an instance of a prefab and a bound Animator is destroyed. (TB-222)
    - Timeline: Fixed an issue with playback and recording when Timeline is linked with the Animation Window. (TB-221)
    - Timeline: Fixed issue where a warning would be logged in the console for TrackAsset. (TB-229)
    - Timeline: Fixed issue where changing the name of a group track was not undoable. (TB-218)
    - uGUI: Fixed alphaHitTestMinimumThreshold using the wrong pixel value when the sprite had a non-zero position. (UUM-59732)
    - uGUI: Fixed an issue when Interacting with Occluded Button Areas using UGUI and GraphicRaycaster, the clickability is now consistent. (UUM-60672)
    - uGUI: Fixed an issue where the Canvas inspector would not allow all possible choices of the "Additional Shader Channels" property. (UUM-64603)
    - uGUI: Fixed an issue with Surrounding dropdown not closing correctly in certain situations.
    - uGUI: Fixed editor crash on Camera::GetCameraRect on a nested Canvas GameObject. (UUM-42366)
    - uGUI: Fixed issue that dirties prefab upon opening it when configured with a layout group + content size fitter. (UUM-19577)
    - uGUI: Fixed issue with Buttons triggering a different Button when using multiple Canvas instances in multiple windows. (UUM-36255)
    - uGUI: Fixed Multi Line Newline input field from not accepting any new line past the set line limit. (UUM-42585)
    - uGUI: Fixed the order of game object selection by passing only the root game object when building gizmos. (UUM-52935)
    - uGUI: Fixed the virtual keyboard of InputField not closing upon Enter/Newline on Android. (UUM-57150)
    - uGUI: Fixed underline when use at end of text. (UUM-55135)
    - uGUI: Fixed Physics2DRaycaster returning the wrong distance between the sorting groups and the raycast. (UUM-45893)
    - uGUI: Setting the game object layer for the Dropdown blocker game object to match the Canvas value. (UUM-62470)
    - UI: Optimized CanvasManager to avoid dynamic memory allocations. (UUM-41760)
    - UI Elements: Added a way to opt out of asset monitoring on specific editor windows to avoid performance issues with panels that contain many VisualElements. (UUM-60233)
    - UI Elements: Addressed the ScrollToItem behaviour after detachment so that it no longer scroll all the way up to the first item in a list randomly. (UUM-68280)
    - UI Elements: Fixed an issue to ensure UnicodeLineBreakingRules are applied to text. (UUM-12413)
    - UI Elements: Fixed ASAN crash on MacOS. (UUM-48790)
    - UI Elements: Fixed Enum field changes that are not reflecting when multi-editing GameObjects with different values. (UUM-40715)
    - UI Elements: Fixed multiple changes being lost in UI Builder when they were all applied during a single update. (UUM-49256)
    - UI Elements: Fixed the multicolumn control not calling DestroyItem when clearing its itemsSource and calling a Rebuild. (UUM-54832)
    - UI Elements: Fixed the sorting behavior applied to default sort mode on the collection view controls. (UUM-56895)
    - UI Elements: Fixed the TreeView's expandedItemIds being persisted when viewDataKey was not present. (UUM-54505)
    - UI Elements: Fixed the UI Builder hierarchy element duplicate command. (UUM-60026)
    - UI Elements: Fixed touchscreen keyboard input not being updated in TextFields on Platforms where input is only provided after the keyboard has closed
    - UI Elements: Prevent the array size field to be recreated when a property was being updated. (UUM-55415)
    - UI Elements: Resolved an issue with ScrollToItem so that it does not block the scroll action if it's invoked prior to a Rebuild. (UUM-67721)
    - UI Elements: Reverted back the multiline validation being applied to single line TextField. (UUM-21496)
    - UI Elements: Updated the logic to use the proper source count removing the dependency from the source type and layout version. (UUM-55415)
    - UI Toolkit: Added a Save Event data in the UI Builder to detect Uxml Serialization and UxmlTraits custom elements.
    - UI Toolkit: Added a warning to display when a UXML file contains more than one UxmlObject type defined in a single instance attribute. (UIT-1544)
    - UI Toolkit: Added an option to the Library's settings that allows you to use a blank VisualElement by default when adding from the Library. (UUM-19254)
    - UI Toolkit: Added missing description labels for PanelSettings properties. (UUM-44278)
    - UI Toolkit: Added missing workflow for creating targeted selectors. (UUM-63335)
    - UI Toolkit: Added multi-column tree view and multi-column list view to the standard controls library in the UI Builder. (UIT-2214)
    - UI Toolkit: Added support for math operations in the Slider and SliderInt text input field. (UUM-49342)
    - UI Toolkit: Added support for setting ListView.ScrollToItem and ScrollView.scrollOffset when the content container size is still being calculated. (UUM-33784)
    - UI Toolkit: Added tooltips on all data binding fields.
    - UI Toolkit: Adjusted UI builder library so all rows items are aligned. Fixed alignment of Toolbar items so they all match. (UUM-58684)
    - UI Toolkit: Changed Builder's default binding from TwoWay to ToTarget.
    - UI Toolkit: Clarified bindings "converter" label and references.
    - UI Toolkit: Fixed "FormatException" error is thrown when generating the schema and using a system region that uses ',' as a decimal point. (UUM-55945)
    - UI Toolkit: Fixed "invalid vertex" errors (UUM-42891)
    - UI Toolkit: Fixed a bug that caused the UI Builder new selector text to display incorrectly after a select is added. (UUM-39626)
    - UI Toolkit: Fixed a bug that caused EnumField to not update its displayed text when it changed back from showMixedValue mode. (UUM-41395)
    - UI Toolkit: Fixed a regression that introduced extra allocations on TextElement instances. (UUM-60597)
    - UI Toolkit: Fixed alignment of UI Builder binding buttons Object/Type. (UUM-49204)
    - UI Toolkit: Fixed an exception that was thrown when adding a hidden column to a multi-column control. (UUM-39648)
    - UI Toolkit: Fixed an issue by lowering the default max character bound of value fields. (UUM-61180)
    - UI Toolkit: Fixed an issue in the UI Builder that caused an exception when using a CustomRenderTexture where a RenderTexture was expected. (UUM-37729)
    - UI Toolkit: Fixed an issue in the UI Builder where editing an element in-canvas would sometimes have an offset. (UUM-17577)
    - UI Toolkit: Fixed an issue in the UI Builder where it wouldn't use the custom uxml type name defined in the UxmlFactory class. (UUM-41831)
    - UI Toolkit: Fixed an issue in the UI Builder where the hierarchy did not display a control's icon properly. (UUM-53355)
    - UI Toolkit: Fixed an issue that occurred when binding a ListView to a field marked as [HideInInspector]. (UUM-69780)
    - UI Toolkit: Fixed an issue when pressing the delete key on a selected style sheet in the explore will now remove it. (UUM-36848)
    - UI Toolkit: Fixed an issue where a binding instance marked as dirty would not update all usages of that binding. (UUM-62267)
    - UI Toolkit: Fixed an issue where a driver bug could cause UI Toolkit textures to show incorrectly. (UUM-13134)
    - UI Toolkit: Fixed an issue where a Unity.UI.Builder.UnityUIBuilderSelectionMarker would be cloned in play mode and in builds. (UUM-60883)
    - UI Toolkit: Fixed an issue where adding a UXML Object to the UI Builder caused errors to appear in the console. (UUM-43340)
    - UI Toolkit: Fixed an issue where applying the [UxmlElement] tag to a custom control featuring a UxmlFactory/UxmlTraits led to duplicate entries in the UI Builder's Project panel. (UIT-2013)
    - UI Toolkit: Fixed an issue where generic type UI controls appeared in the UI Builder's Library panel. (UIT-2014)
    - UI Toolkit: Fixed an issue where itemsChosen event was not triggered when using Input System UI Input Model. (UUM-53680)
    - UI Toolkit: Fixed an issue where PropertyField was incorrectly resolving the type when displaying an ObjectField, and a class shared the same name as a built-in type. (UUM-29499)
    - UI Toolkit: Fixed an issue where PropertyFields could incorrectly bind to a child property if it had the same name as the field. (UUM-27252)
    - UI Toolkit: Fixed an issue where sorting change events were sent during reapplication of view data state. (UUM-36302)
    - UI Toolkit: Fixed an issue where the attribute overrides would not be applied correctly across uxml templates. (UUM-49718)
    - UI Toolkit: Fixed an issue where the context menu for bound attribute fields showed wrong items. (UUM-46157)
    - UI Toolkit: Fixed an issue where the ContextMenu width was too large when containing a search field. (UUM-53864)
    - UI Toolkit: Fixed an issue where the Data Binding Source completion popup being updated when the UI Builder window was moved or resized. (UIT-1849)
    - UI Toolkit: Fixed an issue where the ListView would bind to an incorrect property path when the list items were being reused. (UUM-61896)
    - UI Toolkit: Fixed an issue where the ListView would not display serialized values correctly when the list items were being reused. (UUM-56957)
    - UI Toolkit: Fixed an issue where the PopupField would not report a change to the index property properly. (UUM-52070)
    - UI Toolkit: Fixed an issue where the UI Builder databinding popup window didn't close, resize, and wasn't displayed because of some focus actions. (UUM-43981)
    - UI Toolkit: Fixed an issue where the UI Builder would not recognize attributes starting with an uppercase letter as bindable. (UUM-55555)
    - UI Toolkit: Fixed an issue where the UI Toolkit controls from the com.unity.dt.app-ui package would not show up in the UI Builder's Library. (UUM-60553)
    - UI Toolkit: Fixed an issue where the url Style sheet value did not use speech marks instead of apostrophes. (UUM-59416)
    - UI Toolkit: Fixed an issue where the xml namespaces provided by the user were not kept when saving a UXML file in the UI Builder. (UUM-39907)
    - UI Toolkit: Fixed an issue where the MultiColumnTreeView and MultiColumnListView view controllers lost reference to the sortColumnDescriptions after deserializing from UXML. (UUM-33663)
    - UI Toolkit: Fixed an issue where there was a limit on the canvas size in the UI Builder. (UUM-57996)
    - UI Toolkit: Fixed an issue where there was a missing "Properties.." context menu item to ObjectFields. (UUM-53671)
    - UI Toolkit: Fixed an issue where UI Builder Library regenerated unnecessarily.
    - UI Toolkit: Fixed an issue where UI Builder Viewport background turned white after docking or undocking the UI Builder window. (UUM-47261)
    - UI Toolkit: Fixed an issue where UI Document Live Reload feature was systematically triggered when you entered Play mode with the UI Builder window open. (UUM-43595)
    - UI Toolkit: Fixed an issue where UI Toolkit + IPointerClickHandler. IPointerClickHandler did not counts click correctly. (UUM-47980)
    - UI Toolkit: Fixed an issue where users could not update UXML schema for custom controls created with UxmlElementAttribute.
    - UI Toolkit: Fixed an issue where when you set SetValueWithoutNotify on the Vector3Field element would trigger the RegisterValueChangedCallback. (UUM-43504)
    - UI Toolkit: Fixed an issue where PanelSettingsInspector displayed the wrong scale mode. (UUM-35021)
    - UI Toolkit: Fixed an issue with IMGUI container being misaligned. (UUM-55037)
    - UI Toolkit: Fixed an issue with ListView items being rebound to the parent SerializedObject when hierarchy traversal kicks in, instead of keeping the binding from bindItem. (UUM-54716)
    - UI Toolkit: Fixed an issue with refreshing ListView on Undo/Redo when using custom callbacks on a bound list. (UUM-69779)
    - UI Toolkit: Fixed an issue with the Unset all option not unsetting the data in the Data Binding window. (UUM-37010)
    - UI Toolkit: Fixed an issue with the height of generic dropdown which was not set properly because of which the menu items weren't visible. (UUM-68404)
    - UI Toolkit: Fixed an issue with the selection not refreshed when calling RefreshItems. (UUM-69848)
    - UI Toolkit: Fixed an issue with ListView.itemsChosen being incorrectly called when clicking on two separate items. (UUM-42450)
    - UI Toolkit: Fixed an issue with ListView being stuck when trying to scroll up. (UUM-28510)
    - UI Toolkit: Fixed and reenabled all previously instable UGUIEventSystemTests. (UUM-22461)
    - UI Toolkit: Fixed attributes loading the wrong asset when the reference was to a subasset. (UUM-41963)
    - UI Toolkit: Fixed Command event modifier for pointer events on MacOS. (UUM-43481)
    - UI Toolkit: Fixed comment parsing in the ExCSS library. (UUM-44485)
    - UI Toolkit: Fixed composite field values remain displayed as mixed when their showMixedValue is set back to falsen (UUM-33760)
    - UI Toolkit: Fixed CompositeField subfield value setting when multi-editing. (UUM-63331)
    - UI Toolkit: Fixed ContextualMenuPopulateEvent is now triggered when showing the context menu for an element that is bound to a SerializedProperty. (UUM-14801)
    - UI Toolkit: Fixed controls sometimes ignoring clicks on MacOS after a Contextual Menu is opened with a right click. (UUM-54650)
    - UI Toolkit: Fixed CurveFIeld not applying the ranges to the CurveEditorWindow. (UUM-61075)
    - UI Toolkit: Fixed default runtime theme creation in the UI Builder. (UUM-56954)
    - UI Toolkit: Fixed disappearing elements when an ancestor goes to a null-scale transform. (UUM-62401)
    - UI Toolkit: Fixed documentation links for UI Toolkit assets and scripts. (UUM-28715)
    - UI Toolkit: Fixed duplicating elements in UI Builder does not copy UXML objects and bindings.
    - UI Toolkit: Fixed editor failing to load layout preset when it includes the UI Builder (UUM-48802)
    - UI Toolkit: Fixed elastic scrollview jittery on drag. (UUM-56550)
    - UI Toolkit: Fixed elements size when a new control is dragged onto the UI Builder hierarchy. (UUM-61553)
    - UI Toolkit: Fixed elements sometimes remaining in the hover pseudo-state after a touch pointer input followed by hiding and showing the element. (UUM-8750)
    - UI Toolkit: Fixed elements sometimes remaining in the hover pseudo-state after a touch pointer input has left the them. (UUM-4156)
    - UI Toolkit: Fixed errors when PropertyField was drawing an IMGUI property drawer and the SerializedObject was no longer valid. (UUM-69862)
    - UI Toolkit: Fixed exception being thrown from showPlaceholderText when Button text was null. (UUM-60291)
    - UI Toolkit: Fixed exception when editing UXML file in the UI Builder and an external change is made to the file causing the asset to be re-imported. (UUM-59305)
    - UI Toolkit: Fixed exceptions when searching for Transition Properties in UI Builder (UUM-47429)
    - UI Toolkit: Fixed fields status indicator not refreshing on foldout style fields. (UUM-53358)
    - UI Toolkit: Fixed first KeyDown event sometimes being ignored after calling Focus() on an element in runtime. (UUM-32184)
    - UI Toolkit: Fixed FloatField showMixedValue has a different behavior than IMGUI's showMixedValue. (UUM-3456)
    - UI Toolkit: Fixed focus-related events not received when switching EditorWindow tab. (UUM-57083)
    - UI Toolkit: Fixed for authoring of attribute overrides being disabled in the UI Builder inspector when UXML Serialization was used. (UUM-56475)
    - UI Toolkit: Fixed for changes after project launch are not discarded properly in UI Builder. (UUM-55872)
    - UI Toolkit: Fixed gaps between background repeat stamps. (UUM-36753)
    - UI Toolkit: Fixed generic dropdown menu issues, where the dropdown was not dismissible after the first one was opened. (UUM-68406)
    - UI Toolkit: Fixed GenericDropdownMenu unnecessarily removing focus from elements created during a menu action. (UUM-37790)
    - UI Toolkit: Fixed GUIDepth error when changing Color property in Gradient Editor. (UUM-47254)
    - UI Toolkit: Fixed GUIDepth error when changing Search filter dropdown in Test Runner. (UUM-40283)
    - UI Toolkit: Fixed incorrect color in the StyleSheetsPane view in Light mode. (UUM-48895)
    - UI Toolkit: Fixed invalid elements tessellation when NaN values are set in the style transform values. (UUM-48759)
    - UI Toolkit: Fixed issue with inspector in debug mode. (UUM-43460)
    - UI Toolkit: Fixed issues with editor bindings throwing exceptions when the object was changed but then disposed. ('SerializedObject of SerializedProperty has been Disposed') (UUM-57406)
    - UI Toolkit: Fixed jittery animation produced by ScrollView when playing PostPointerUpAnimation. (UUM-40352)
    - UI Toolkit: Fixed ListView null reference exceptions flooding the console when trying to unbind it from a disposed SerializedProperty. (UUM-46364)
    - UI Toolkit: Fixed loading of resources by path when a fragment was included in the URI but the asset requested was not a sub-asset. (UUM-49355)
    - UI Toolkit: Fixed local bounds of world-space UIDocuments. (UUM-59008)
    - UI Toolkit: Fixed missing help documentation for SpriteAsset component in TextCore. (UUM-48801)
    - UI Toolkit: Fixed missing picking overlay of runtime panels in game view. (UUM-62288)
    - UI Toolkit: Fixed missing update trigger field in the binding window when editing a custom binding.
    - UI Toolkit: Fixed new default runtime theme being created after an existing default runtime theme was renamed (UUM-48266)
    - UI Toolkit: Fixed null reference exception that occured when pressing the Enter key on a ListView. (UUM-70108)
    - UI Toolkit: Fixed NullReferenceExceptions in the UI Builder when changing style values and the element was set to display:None. (UUM-36707)
    - UI Toolkit: Fixed NullReferenceExceptions when reordering animated list views. (UUM-45896)
    - UI Toolkit: Fixed ObjectDisposedException on undoing creation of element in the builder. (UUM-53334)
    - UI Toolkit: Fixed ObjectField showing the wrong label when the asset was missing. (UUM-40335)
    - UI Toolkit: Fixed pointer and mouse events sometimes not sent exclusively to capturing element during the TrickleDown phase. (UUM-60384)
    - UI Toolkit: Fixed pointer events on the secondary display received as though they were occuring on the main display when using new Input System and adding an EventSystem on the scene. (UUM-47650)
    - UI Toolkit: Fixed reopening UI Builder with the same document ignoring USS changes on disk while the builder was closed. (UUM-53147)
    - UI Toolkit: Fixed resolved bindings when a data source is set in UI Builder (UUM-62271)
    - UI Toolkit: Fixed SaveToVectorImage() bounds wrongly calculated. (UUM-41589)
    - UI Toolkit: Fixed ScrollView's Elastic mode is unrestricted when scrolling with the Scrollbar's arrows. (UUM-27737)
    - UI Toolkit: Fixed Search window saved searches double-click to rename not working. (UUM-36486)
    - UI Toolkit: Fixed SerializeField enum resets to the first value in the Inspector when selecting multiple objects with different enum values. (UUM-59183)
    - UI Toolkit: Fixed setting variable makes position text fields disappear. (UUM-36708)
    - UI Toolkit: Fixed ShaderGraph input renaming not reacting to clicks on MacOS after a Contextual Menu is opened with a right click (UUM-15297)
    - UI Toolkit: Fixed silent crash in source generator when UxmlObjectReference field was an object type. This is not supported. (UUM-53267)
    - UI Toolkit: Fixed some UI Builder style tooltips that incorrectly mentioned percentage support. (UUM-49020)
    - UI Toolkit: Fixed StackOverflowException from EnumFlagsField when showing mixed values. (UUM-56605)
    - UI Toolkit: Fixed textured background UVs when inset because of opaque border. (UUM-35321)
    - UI Toolkit: Fixed the Dynamic height ListView scrolling to the wrong item when using ScrollToItem. (UUM-40674)
    - UI Toolkit: Fixed the inconsistent Bezier offset issue when using Painter2D.
    - UI Toolkit: Fixed the incorrect selection types for elements instantiated by a template within a custom control. (UUM-32501)
    - UI Toolkit: Fixed the issue preventing the setting the sortColumnDescriptions property after the columns property in multi-column controls. (UIT-2124)
    - UI Toolkit: Fixed the issue with GenericDropdownMenu that appeared cropped when displaed at the bottom of a window. (UUM-68407)
    - UI Toolkit: Fixed the issue with ObjectField not clearing up when using the Backspace key. (UUM-35034)
    - UI Toolkit: Fixed the misalignments found in the composite controls. (UUM-25403)
    - UI Toolkit: Fixed the order of the spacing and border fields in the UI Builder inspector to match Unity Style Sheets (USS) order.
    - UI Toolkit: Fixed the UXML Attributes view in the builder so its margin matches the other sections.
    - UI Toolkit: Fixed the vertical scroller visibilty issue of the TextField control. (UIT-2027)
    - UI Toolkit: Fixed the contentContainer for RadioButtonGroup. (UUM-39830)
    - UI Toolkit: Fixed the ListView single-click issue when EventSystem and StandaloneInputModule are used in the scene. (UUM-42106)
    - UI Toolkit: Fixed the TreeView element not being expanded fully when trying to expand it more than once. (UUM-27589)
    - UI Toolkit: Fixed Timeline and Animation windows cannot record script component changes (UUM-57154)
    - UI Toolkit: Fixed TreeView showing blank when applying view data and the scroll view scroll offset was non-zero. (UUM-27288)
    - UI Toolkit: Fixed UI Builder "Read more about the UI Builder" URL so it links to the correct version of Unity documentation. (UUM-54027)
    - UI Toolkit: Fixed UI builder so a warning box does not display when entering play mode. (UUM-37271)
    - UI Toolkit: Fixed UI Toolkit PropertyFields are missing labels if not set explicitly. (UUM-44045)
    - UI Toolkit: Fixed UIElementsGenerator to include shorthand properties when generating UssNameToCSharpName and vice versa.
    - UI Toolkit: Fixed UIToolkit memory leak in webgl for safari. (UUM-57628)
    - UI Toolkit: Fixed UIToolkit property field background does not change color when the property was animated. (UUM-26208)
    - UI Toolkit: Fixed undo on text based attribute fields deals with each character separately. (UUM-32599)
    - UI Toolkit: Fixed unset not working on composite style fields in the UI Builder. (UUM-55325)
    - UI Toolkit: Fixed USS alias variables are not displayed in the USS variable list. (UUM-60500)
    - UI Toolkit: Fixed USS files reordering in UI Builder. (UUM-37728)
    - UI Toolkit: Fixed USS variable property inspector does not stay open when holding on a USS variablen. (UUM-60502)
    - UI Toolkit: Fixed UXML previews showing black screen. (UUM-62175)
    - UI Toolkit: Fixed UxmlObjects overriding other UxmlObjects in the UI Builder. (UUM-55902)
    - UI Toolkit: Fixed view data persistence not preserving the ListView and TreeView selected items. (UUM-29291)
    - UI Toolkit: Fixed view data states not being saved for children of ListView. (UUM-62717)
    - UI Toolkit: Fixed wrong clickCount during PointerDown when using InputSystemUIInputModule after clicking on another object. (UUM-57082)
    - UI Toolkit: Fixed wrong help link for TextMeshPro Sprite Asset. (UUM-48801)
    - UI Toolkit: Fixed wrong pointer event target when an element's visibility or pickingMode is modified without moving the pointer. (UUM-20723)
    - UI Toolkit: Fixed RadioButtonGroup such that its choices clear properly. (UUM-40687)
    - UI Toolkit: hanged the Text Alignment field so that the vertical alignment group will wrap when the inspector width becomes too small. (UUM-61202)
    - UI Toolkit: Improved comparison of overridden list values in UI Builder when one is empty and the other null. They are now considered the same.
    - UI Toolkit: Improved performance of selecting and adding elements in the UI Builder.
    - UI Toolkit: Improved performance when deserializing attribute overrides.
    - UI Toolkit: Improved the error message when a UxmlObjectReference field type is not a UxmlObject. (UUM-48264)
    - UI Toolkit: Improved the ListView content container to prevent resizing smaller than it should be when reordering items. (UUM-42365)
    - UI Toolkit: Improved unregistering of editing callbacks.
    - UI Toolkit: In the UI Builder, there is now more information available about inherited data sources.
    - UI Toolkit: Invalid style enum values will now produce an error instead of throwing an exception in the UI Builder. (UUM-60964)
    - UI Toolkit: ListView no longer throws an exception when an item is dragged out and back into a window. (UUM-36495)
    - UI Toolkit: Modified EnumFlagsField so they can have the Everything and None flags declared anywhere in the enum. (UUM-40696)
    - UI Toolkit: Prevent single line text fields from translating new lines characters, unless escaped, when setting this through its value property through script. (UUM-21496)
    - UI Toolkit: Removed unused valueAsString from Hash128Field.
    - UI Toolkit: Removing an element or uxml object will now remove its uxml object children.
    - UI Toolkit: UXML Enum attributes are no longer case sensitive. (UUM-33414)
    - UI Toolkit: You can now use single clicks to select the data binding source path in the popup in UI Builder.
    - UI Toolkit: [Properties] Fixed an issue where the source generator would output reflection code when direct access was possible. (UUM-59924)
    - UI Toolkit: [UI Builder] Fixed an issue where typing an invalid selector string would sometimes use a banner to display the error and sometimes use the console. The banner will now be used. (UUM-63589)
    - Undo System: Fixed an issue where detect scripts would destroy object when they are added to during Reset. (UUM-40624)
    - Undo System: Fixed Redo restoration of multiple ScriptableObject added via AddObjectToAsset. (UUM-53904)
    - Undo System: Improved performance on Undo Flush when using the serialization system. (UUM-10900)
    - Universal RP: Added a test scene in URP's Foundation project for UseBufferRandomAccess and UseTextureRandomAccess.
    - Universal RP: Added an RTHandle pool to fix the RTHandle reallocation at runtime. (UUM-40249)
    - Universal RP: Added depth and stencil operations to FullScreenPassRendererFeature and allowed users to opt-out of depth-stencil being bound per feature in the "Additional Properties" section. (UUM-26399)
    - Universal RP: Added GBuffer (fill) passes to ComplexLit and Unlit shaders to prevent GBuffer data holes. (UUM-21919)
    - Universal RP: Added logic to enforce consistent hardware dynamic resolution settings during rendering to avoid issues when external code changes the global setting. (UUM-58686)
    - Universal RP: Added UI features to encourage the use of Rendering Layers in URP to control selective lighting, instead of using culling mask. The former works across Deferred, Forward and Forward+, while the latter only works with Forward. (UUM-64171)
    - Universal RP: Correctly handle missing motion vectors for TAA. Fixes black screen on the 2D renderer when TAA is enabled. (UUM-57570)
    - Universal RP: Disabled Motion Blur effect in EditMode to keep the game view clear while editing. Motion Blur works as before in PlayMode and standalone builds. (UUM-43739)
    - Universal RP: Disabled Soft Shadow Quality per-light levels on Quest and HoloLens platforms to improve XR performance. (UUM-33025)
    - Universal RP: Fix VRR performance regression (UUM-53551)
    - Universal RP: Fixed an "floating point division by zero" warning in Shadows.hlsl(189)
    - Universal RP: Fixed an "Implicit truncation of vector type" warning in ShaderPassDecal.hlsl(221).
    - Universal RP: Fixed an "Output value 'fragmentOutput' is not completely initialized" warning in ShaderPassDecal.hlsl(179).
    - Universal RP: Fixed an "undeclared identifier 'RemapFoveatedRenderingNonUniformToLimear" in ShaderPassDecal.hlsl(252). (UUM-59886)
    - Universal RP: Fixed an error in Bloom.shader for foveated when the debug check is enabled inside FoveatedRendering.hlsl.
    - Universal RP: Fixed an issue causing 'implicit truncation of vector type' warning when using ShaderGraph shaders in the Forward+ Rendering Path (UUM-46851)
    - Universal RP: Fixed an issue causing decals to be culled erroneously when using the Screen Space technique (UUM-35569)
    - Universal RP: Fixed an issue that caused Game View not to render after enabling URP Dynamic Resolution with DirectX 12. (UUM-29260)
    - Universal RP: Fixed an issue where additional lights were not rendering correctly when using a mix of shadow settings in deferred. (UUM-46577)
    - Universal RP: Fixed an issue where an obsolete attribute from EnqueuePass API was not removed.
    - Universal RP: Fixed an issue where building a project using deferred with batchmode and nographics resulted in incorrect variant stripping. (UUM-47782)
    - Universal RP: Fixed an issue where cameras flickered when using deferred rendering, rendering layers and two cameras. (UUM-61041)
    - Universal RP: Fixed an issue where data-driven lens-flare was missing occlusion. (UUM-31662)
    - Universal RP: Fixed an issue where decals were not affecting grass when using Deferred Rendering. (UUM-21928)
    - Universal RP: Fixed an issue where disabling SSAO feature didn't work in built projects when the SSAO disabled keyword had been stripped out. (UUM-56165)
    - Universal RP: Fixed an issue where downsampled SSAO had serious artefacts on Android. (UUM-49557)
    - Universal RP: Fixed an issue where Evaluate SH and SoftShadow keywords were incorrectly declared in ShaderGraph shaders. (UUM-59974)
    - Universal RP: Fixed an issue where IndexOutOfRangeException was thrown when creating a stacked camera from script. (UUM-6763)
    - Universal RP: Fixed an issue where it wasn't possible to add a Renderer Feature on a renderer if another feature had a missing or broken script. This issue impacted the Universal Render Pipeline. (UUM-45664)
    - Universal RP: Fixed an issue where keywords were incorrectly enabled/disabled when shadows were enabled in the URP Asset and "Transparent Receive Shadows" was disabled on the renderer. (UUM-64416)
    - Universal RP: Fixed an issue where Light Layers did not check scene lighting setting when enabling the keyword. (UUM-33751)
    - Universal RP: Fixed an issue where LOD Crossfade was declared twice in Unlit ShaderGraph.
    - Universal RP: Fixed an issue where NativeRenderPass was not disabled when RenderGraph is enabled on editor GLES. (UUM-48989)
    - Universal RP: Fixed an issue where NullReferenceException was thrown when camera prefab referenced a camera outside the prefab in the camera stack. (UUM-23148)
    - Universal RP: Fixed an issue where NullReferenceExceptions appeared when switching between Quality Levels with Post Processing Volume Update mode set to ViaScripting. (UUM-59882)
    - Universal RP: Fixed an issue where reflection probes were not updating correctly when using Forward+. (UUM-44032)
    - Universal RP: Fixed an issue where renderer features didn't pass validation if they inherit from another renderer feature. (UUM-56639)
    - Universal RP: Fixed an issue where RenderGraph didn't enable the Panini Projection keyword correctly.
    - Universal RP: Fixed an issue where Rendering Layers didn't work properly when opening a project. (UUM-44741)
    - Universal RP: Fixed an issue where Screen Space Decals keyword was missing when Strip Unused Variants was turned off.
    - Universal RP: Fixed an issue where screen space decals would not calculate ambient lighting correctly. (UUM-47142)
    - Universal RP: Fixed an issue where screen would in some cases be dark when using Decals and SSAO in RenderGraph. (UUM-58842)
    - Universal RP: Fixed an issue where selecting a stacked camera caused the editor to freeze and sometimes crash. (UUM-49234)
    - Universal RP: Fixed an issue where Shader ID's weren't reset properly in the DepthNormals pass. (UUM-36069)
    - Universal RP: Fixed an issue where SMAA blend weights were didn't apply stencil information. (UUM-56217)
    - Universal RP: Fixed an issue where SSAO would not apply to a scene when using the Deferred Rendering Path and with no Directional light active. (UUM-29957)
    - Universal RP: Fixed an issue where the RenderGraph CopyDepth pass injection point location now matches the non-RenderGraph path. (UUM-52283)
    - Universal RP: Fixed an issue where transparent materials were marked as dirty during material UI updates and project saving. (UUM-45752)
    - Universal RP: Fixed an issue where Unlit shaders would not output correct normals when using deferred and Accurate GBuffer Normals.
    - Universal RP: Fixed an issue where using Alpha Clipped shaders and Depth Priming resulted in invisible objects. (UUM-64447)
    - Universal RP: Fixed an issue where _AmbientOcclusionParam wasn't updated correctly in RenderGraph.
    - Universal RP: Fixed an issue with corrupt cookie sampling when targeting mobile platforms. (UUM-70600)
    - Universal RP: Fixed an issue with offscreen depth when using RenderGraph. (UUM-56486)
    - Universal RP: Fixed an issue with Screen Space Decals where dark artefacts appeared in the editor. (UUM-40885)
    - Universal RP: Fixed an IndexOutOfRangeException error that occurred when using Native RenderPass on the Deferred Rendering Path. (UUM-47178)
    - Universal RP: Fixed Animation Preview artifacts.
    - Universal RP: Fixed ArgumentNullException when trying to use a FullScreenPassRenderer feature with "None" in the requirements mask with Render Graph. (UUM-27276)
    - Universal RP: Fixed blackscreen and NullReferenceException when using wireframe. (UUM-49154)
    - Universal RP: Fixed bloom shader not working with non uniform rasterisation based foveated rendering on VR platforms that support it. (UUM-61885)
    - Universal RP: Fixed bright pixels when using a camera with skybox and MSAA rendering opaque objects with alpha clipping together with a transparent object if additive blending. (UUM-52949)
    - Universal RP: Fixed depth buffer disappearing after using SwapColorBuffer. (UUM-44446)
    - Universal RP: Fixed Depth of Field for URP RenderGraph. (UUM-62801)
    - Universal RP: Fixed early return for renderer features which required color when color didn't exist for depth only output texture.
    - Universal RP: Fixed FRAMEBUFFER_INPUT redefinition warnings when compiling some shaders
    - Universal RP: Fixed FullScreenPassRendererFeature only using the material of the last full screen feature in a frame, this allows multiple passes to work correctly within one frame. (UUM-30970)
    - Universal RP: Fixed GLES color grading banding artifacts and MSAA resolve surface errors. (UUM-54912)
    - Universal RP: Fixed HDR Debug Views break the native render pass when enabled once. (UUM-51844)
    - Universal RP: Fixed HDR Debug Views rendering a black screen with Render Graph. (UUM-45541)
    - Universal RP: Fixed incorrect alpha-clip behavior on transparent surfaces. (UUM-56601)
    - Universal RP: Fixed incorrect viewport size adjustment logic in CopyDepthPass that caused issues when dynamic resolution was active. (UUM-60392)
    - Universal RP: Fixed issue so that Native RenderPass no longer produces errors when using RenderingLayers. (UUM-34728)
    - Universal RP: Fixed memory leak from render texture when rtHandle realloc failed to be added to pool. (UUM-46882)
    - Universal RP: Fixed missing "_BlitScaleBias" upload for text shaders using the CoreRP Blit.hlsl header. (UUM-35591)
    - Universal RP: Fixed missing padding at the bottom of URP's Global Settings. (UUM-49319)
    - Universal RP: Fixed NativeRenderPass store action. (UUM-27132)
    - Universal RP: Fixed noise and flicker caused by TAA when the Very High option is in use. (UUM-37582)
    - Universal RP: Fixed Overdraw and Wireframe debugger views that were not rendering correctly.
    - Universal RP: Fixed overlay cameras so they always have their clear flag set to nothing during Play mode. (UUM-2386)
    - Universal RP: Fixed reflection probes are now sorted correctly for Forward+. (UUM-61590)
    - Universal RP: Fixed Rendering Debugger issues when RenderGraph is enabled. (UUM-52950)
    - Universal RP: Fixed scene elements not being sorted correctly when RenderGraph is enabled on M1/M2 Mac. (UUM-47698)
    - Universal RP: Fixed scene elements not being sorted correctly when RenderGraph is enabled on OS.
    - Universal RP: Fixed scene wireframe mode when RenderGraph is enabled. (UUM-51101)
    - Universal RP: Fixed SH vertex evaluation mode in URPLit shader graph. (UUM-39531)
    - Universal RP: Fixed shader stripping when using APV. (UUM-42601)
    - Universal RP: Fixed shadow flickering when using Screen Space shadows and have depth priming enabled. (UUM-48838)
    - Universal RP: Fixed Skipped RenderObjects when rendering preview cameras. (UUM-59428)
    - Universal RP: Fixed the FinalPostPass executing before "AfterRenderingPostProcessing" instead of after it. (UUM-48857)
    - Universal RP: Fixed the NativeRenderPass camera target MSAA logic to match the non-NRP path. (UUM-56396)
    - Universal RP: Fixed the URP Debug Rendering map overlays when RenderGraph is enabled. (UUM-48979)
    - Universal RP: Fixed the missing _Color exception for the Shader property. (UUM-35520)
    - Universal RP: Fixed UniversalRendererResources settings getting incorrectly stripped from player builds. (UUM-57954)
    - Universal RP: Fixed URP post-processing script template potentially trying to sample the backbuffer (not forcing intermediate texture rendering). (UUM-57806)
    - Universal RP: Fixed y-flip issues on GL platforms. (UUM-54335)
    - Universal RP: Fixing an issue with RenderRequest using the wrong renderer. (UUM-38158)
    - Universal RP: Making sure the new renderer feature template sets up a render target (UUM-57144)
    - Universal RP: Reduce the number of active unique samplers by using shareable inline samplers for most of the URP internal textures and buffers. Helps to avoid hitting the graphics API limit in URP Lit or custom shaders. (UUM-49317)
    - Universal RP: RenderGraph: Fixed an issue where an incorrect texture was used when using Empty Additional Shadow path.
    - Universal RP: RenderGraph: Fixed an issue with YFlip on some platforms.
    - Universal RP: RenderGraph: Removed unnecessary clear passes of the bloom pyramid render targets. (UUM-60550)
    - Universal RP: The Fullscreen Render Feature doesn't cause rendering layers to run in the depth normals prepass anymore. (UUM-56003)
    - Universal RP: URP Renderer Features are now ignored if they are color dependent and drawing to an offscreen depth camera target. (UUM-14679)
    - Universal RP: Use local random state for post-processing. (UUM-53146)
    - Universal Windows Platform: Added UI code for Windows Standalone and UWP build profile platform settings.
    - Universal Windows Platform: Corrects Application.runInBackground internal implementation which sometimes caused crashes when the option is set to false after the application has lost focus. (UUM-43306)
    - Universal Windows Platform: Fixed "Create App Packages..." option is greyed out when trying to Create App Packages in Visual Studio. (UUM-47116)
    - Universal Windows Platform: Fixed an issue where Player would not store the previous UnityPlayer.log under UnityPlayer-prev.log. (UUM-55652)
    - Universal Windows Platform: Fixed an issue where"Executable Only" UWP builds failed after running a "D3D Project" build. (UUM-58153)
    - Universal Windows Platform: Fixed an issue with invalid characters appearing at the beginning of the StoreManifest.xml file in UWP. (UUM-42689)
    - Universal Windows Platform: Fixed payload file does not exist errors when Cloud Diagnostics is enabled. (UUM-56483)
    - URP: Added a warning the Scene to inform users about light limits. (UUM-56213)
    - URP: Fix partially corrupted Android screen when Vulkan display rotation during rendering is enabled (UUM-48569)
    - URP: Fixed a bug with Light Layers not working correctly when Additional Lights are set to Per Vertex. (UUM-40810)
    - URP: Fixed a warning in Lens flare shader for URP. (UUM-62715)
    - URP: Fixed an issue to ensure motion vector depth buffer is valid for cameras with motion vectors enabled. (UUM-61466)
    - URP: Fixed an issue where debug variants of the "TerrainDetailLit" shader would not compile. (UUM-61087)
    - URP: Fixed an issue where the "Sprite-Lit-Default" did not function with certain debug views.
    - URP: Fixed broken scene view depth. (UUM-54166)
    - URP: Fixed Color Grading Mode set to Low Dynamic Range on one camera in the stack despite HDR output active. (UUM-41948)
    - URP: Fixed compile error in some shaders when Lightmapping and APV are used at the same time
    - URP: Fixed DefaultVolumeEditor assert when multiple inspectors are open. (UUM-53408)
    - URP: Fixed errors when calling RTHandles.Alloc() inside ScriptableRendererFeature.Create(). (UUM-44048)
    - URP: Fixed HDR output persisting even if the user explicitly turned it off. (UUM-45838)
    - URP: Fixed inconsistent text capitalizations in various parts of the Editor. (UUM-70038)
    - URP: Fixed issue so that the Editor creates color textures in custom render passes for 2D. (UUM-14400)
    - URP: Fixed Native Render Pass to render RenderTextureDescriptor with the correct dimensions when the render scale is not equal to one. (UUM-61468)
    - URP: Fixed redundant pipeline recreate when opening Graphics settings. (UUM-58084)
    - URP: Fixed the issue causing shadows at segments and corners of a Sprite Shape to sometimes not properly render. (UUM-18513)
    - URP: Fixed the Overlay UI so it does not disappear when the Render Graph and HDR display support is used in the Editor. (UUM-45545)
    - URP: Global Settings always exist when URP is the current active pipeline. (XPIPELINE-796)
    - URP: Modified shaders so that there is no longer a visible outline there is transparency overlap with composited Shadow Caster 2D components. (UUM-38076)
    - URP: Y-flip for reflection probe atlas lookup is now handled correctly for OpenGL and GLES3. (UUM-36629)
    - UTR: Fixed the conversion of total duration in the PlayerBuildInfo message.
    - Version Control: Fixed Add to ignored/hidden changes list from the Project window creating a negative rule.
    - Version Control: Fixed an issue where an existing checkout operation has locked the workspace, which was triggered by saving the current scene at check-in.
    - Version Control: Fixed an issue where the Unity Version Control toolbar icon would disappear.
    - Version Control: Fixed failed operations when the workspace is already locked.
    - Version Control: Fixed Switch to changeset not working on Gluon partial workspace.
    - VFX Graph: A compilation issue occured when declaring a gradient in ShaderGraph blackboard. (UUM-69751)
    - VFX Graph: Added support for more HLSL function prototype declaration. (UUM-64314)
    - VFX Graph: Avoid names which doesn't fit in node search window. (UUM-47283)
    - VFX Graph: Blackboard menu entries are better human readable. (UUM-17666)
    - VFX Graph: Disable MeshToSDFBaker shaders on GLES3 to avoid warnings. (UUM-53994)
    - VFX Graph: Enabled Dynamic Resolution Scaling on blocks and operators that sample depth or color (UUM-546)
    - VFX Graph: Fixed a build failure on HDRP Linux using Sphere Output. (UUM-61566)
    - VFX Graph: Fixed a compilation error caused by Cube outputs that share a texture with another context (UUM-41037)
    - VFX Graph: Fixed a console error caused by deleting a VFX asset. (UUM-41333)
    - VFX Graph: Fixed a corruption error caused by creating a new VFX in an open VFX (UUM-41334)
    - VFX Graph: Fixed a Custom HLSL used in ShaderGraph Output issue. (UUM-56958)
    - VFX Graph: Fixed a PCache exporter issue to insure color in linear space. (UUM-41837)
    - VFX Graph: Fixed a performance issue with parameter gizmos. (UUM-41329)
    - VFX Graph: Fixed a space conversion error that occurred when copy-pasting a system. (UUM-43273)
    - VFX Graph: Fixed an error in the the six-way Smoke Lit Shader Graph that happened when using more than one SRP in a project. (UUM-45422)
    - VFX Graph: Fixed an error where a VFX asset was overwritten with a VFX that contains different systems from the original file. (UUM-42188)
    - VFX Graph: Fixed an exception that could be raised when deleting all graph nodes in some specific cases. (UUM-61929)
    - VFX Graph: Fixed an exception that happened when seting a fabric material to transparent. (UUM-41220)
    - VFX Graph: Fixed an issue that allowed you to resize the details panel to zero width, which led to a messy layout. Now it has a minimum width of 200px. (UUM-47506)
    - VFX Graph: Fixed an issue that caused an unexpected Shader Compilation error while using unsupported ShaderGraphs. (UUM-48670)
    - VFX Graph: Fixed an issue that caused template items to have uneven width when the left panel is too small. (UUM-47453)
    - VFX Graph: Fixed an issue that caused the template item hit box to be slightly bigger than its visual representation. (UUM-47505)
    - VFX Graph: Fixed an issue that prevented the Position gizmo from appearing correctly in the Scene View. (UUM-41199)
    - VFX Graph: Fixed an issue that prevented the built-in templates category from displaying when there was no user-defined category. (UUM-47192)
    - VFX Graph: Fixed an issue where a material's size increased in runtime and caused a reduction in performance. (UUM-40722)
    - VFX Graph: Fixed an issue where an event at frame zero in Timeline were not handled correctly. (UUM-42283)
    - VFX Graph: Fixed an issue where multithreaded camera expression were not allowed. (UUM-55730)
    - VFX Graph: Fixed an issue where spawner callbacks were only working on the first instance of an instanced effect. (UUM-51509)
    - VFX Graph: Fixed an issue where the "materials" and "sharedMaterials" properties returned all materials instead of returning only the active materials. (UUM-21328)
    - VFX Graph: Fixed an issue where the old style dropdown in Add, Divide (and many others) style had not been updated to new design. (UUM-46336)
    - VFX Graph: Fixed an issue where the overlay is offset when a VisualEffect component is rotated in HDRP (UUM-13531)
    - VFX Graph: Fixed an issue where the sample of Camera Buffer isn't available in compute passes. (UUM-55734)
    - VFX Graph: Fixed an issue with the wrong size used for updates in strips with immortal particles. (UUM-46154)
    - VFX Graph: Fixed an issue with wrong texture or flickering when two instances of the same VFX use different textures (via exposed texture) and if that texture is connected to another block in an output context. (UUM-43274)
    - VFX Graph: Fixed an unexpected JSON error that occurred while using ShaderGraph. (UUM-56300)
    - VFX Graph: Fixed automatic sorting mode on SpriteLit and SpriteUnlit materials. (UUM-22486)
    - VFX Graph: Fixed copy/paste a parameter node was also duplicating the parameter itself. (UUM-56902)
    - VFX Graph: Fixed custom attribute broke compilation if name was starting with a capital letter. (UUM-49725)
    - VFX Graph: Fixed decal normal map handling of non-uniform scale. (UUM-51810)
    - VFX Graph: Fixed editor freeze when selecting all properties/custom attributes from the blackboard (UUM-56620)
    - VFX Graph: Fixed error feedback context menu could not be displayed anymore. (UUM-54781)
    - VFX Graph: Fixed error log raised by VFX analytics while building a project. (UUM-41321)
    - VFX Graph: Fixed incompatibility issue with HLSL 2021. (UUM-63956)
    - VFX Graph: Fixed issue with null value in slots preventing it to be changed. (UUM-55313)
    - VFX Graph: Fixed missing node links when copy/pasting a system with missing PointCacheAsset. (UUM-46548)
    - VFX Graph: Fixed missing particles with strip systems using instancing. (UUM-61194)
    - VFX Graph: Fixed node search window could not be opened through the context menu (UUM-59173)
    - VFX Graph: Fixed normal handling of odd-negative scales. (UUM-55304)
    - VFX Graph: Fixed property not visible in blackboard with creating using ALT+Drag shortcut. (UUM-51652)
    - VFX Graph: Fixed RenderTexture could not be used anymore in VFXGraph. (UUM-55153)
    - VFX Graph: Fixed shader compilation error when using a Custom HLSL node. (UUM-49770)
    - VFX Graph: Fixed Shader graph outputs were not being rendered using instancing. (UUM-59160)
    - VFX Graph: Fixed ShaderGraph keywords so that they are now correctly supported in VFX Graph Output. (UUM-5692)
    - VFX Graph: Fixed shadows being cast by Mesh Output when "cast shadows" was disabled (URP only). (UUM-566)
    - VFX Graph: Fixed some sanitation failures with new merged Position and Collision blocks. (UUM-61948)
    - VFX Graph: Fixed strip output could not be created anymore. (UUM-56685)
    - VFX Graph: Fixed the error "Option to clear stale reference" while using a SpriteLit or Sprite Unlit target material. (UUM-22349)
    - VFX Graph: Fixed undefined behavior of SpawnerSetAttribute when an expression is connected to activation slot. (UUM-35461)
    - VFX Graph: Fixed undo/redo did not work anymore with selection. (UUM-42481)
    - VFX Graph: Fixed undoing port value change that did not restore correct value. (UUM-29244)
    - VFX Graph: Fixed unexpected behavior when outputting to multiple meshes during material setup. (UUM-35755)
    - VFX Graph: Fixed unexpected behavior while switching to AfterPostProcess with ShaderGraph. (UUM-41462)
    - VFX Graph: Fixed unexpected inspector in case of Sprite Custom/Lit/Unlit. (UUM-48667)
    - VFX Graph: Fixed unexpected NaN direction values on primitives with a position and scale of 0 (UUM-41463)
    - VFX Graph: Fixed unexpected warning message in the console. (UUM-59122)
    - VFX Graph: Fixed very very long system name could lead to freeze the Editor. (UUM-55369)
    - VFX Graph: Improved CustomHLSL to consider custom HLSL and includes workflow. (UUM-69735)
    - VFX Graph: Improved the error feedback message that appears when a shader graph is missing and no path is found. (UUM-28009)
    - VFX Graph: Indeterminate state object fields were hidden instead of greyed out. (UUM-56691)
    - VFX Graph: Instancing when gradient selection was based on a branch was wrong. (UUM-58615)
    - VFX Graph: Logical operators And (logical) and And (Bitwise) could be mixed up in the node search window when search for "and" (same for Or operator). (UUM-1259)
    - VFX Graph: Remove warning from VFX init for strips (GetParticleIndex). (UUM-51867)
    - VFX Graph: Removed SetDirty calls that triggered assertions in debug mode. (UUM-59923)
    - VFX Graph: Removed the option to support VFX Graph on incompatible targets. (UUM-26673)
    - VFX Graph: Resolved a corner case issue where the presence of multiple instances of the same buffer led to a compilation failure. (UUM-66018)
    - VFX Graph: Switch property binder from ExecuteInEditMode in ExecuteAlways. (UUM-56866)
    - VFX Graph: The behavior of the VFX graph toolbar button to open the template window has slightly changed (UUM-47255)
    - VFX Graph: Trigger over distance now takes into account change in position (not just velocity). (UUM-4754)
    - VFX Graph: Understeministic skin mesh sampling when previous and current were fetch within the same VFX (UUM-45920)
    - VFX Graph: Unexpected material listing in animation window. (UUM-46719)
    - VFX Graph: Updated of curve & gradient were missing when edited directly in VFX View Window. (UUM-52510)
    - VFX Graph: VFX Graph: Fixed gizmo overlay's drop down was cut at the bottom. (UUM-48125)
    - VFX Graph: Visual Effects back in Scene FX window. (UUM-56829)
    - VFX Graph: We could not change the selected gizmo for nodes with multiple gizmos (for instance: Set Position Sequential Line). (UUM-52509)
    - Video: Error "0xc00d36b4 while reading" was being thrown when turning on Transcode in the Import Settings of Video Clip Assets. (UUM-56816)
    - Video: Fixed a crash on BaseVideoTexture::InitVideoMemory when capturing Theta V's output texture. (UUM-60361)
    - Video: Fixed a crash when editor was using ShareX. [screen-capture-recorder-to-video](https://github.com/rdp/screen-capture-recorder-to-video-windows-free\) webcam. (UUM-44750)
    - Video: Fixed a freeze when the video has a variable framerate on Android. (UUM-14136)
    - Video: Fixed an issue on iOS where a white screen appeared instead of a video and logged a "Cannot read file" error. (UUM-40973)
    - Video: Fixed an issue that caused irregular playback speed in the Video Player component for Web platform applications. (UUM-33747)
    - Video: Fixed an issue where after changing the scene, WebCamTextures did not properly destroy the internal GraphicsTexture which crashed the Editor. (UUM-44774)
    - Video: Fixed an issue where OnFrameReady was called twice when setting the time in VideoPlayer. (UUM-40971)
    - Video: Fixed an issue where the video was freezing when building a project on Android. (UUM-65398)
    - Video: Fixed an issue where WEBM files were stuttering when the number of remaining frames is less than the number of the pre-buffered frames. (UUM-43721)
    - Video: Fixed an issue with the Video Player component that caused performance degradation when using the linear color space for Web platform applications. (UUM-32755)
    - Video: Fixed choppy video playback when Application.targetFrameRate is set lower than the video frame rate. (UUM-48911)
    - Video: Fixed the WebCamTexture API so it no longer cause errors with the GraphicsTexture API when you use it to create a texture.
    - Video: Fixed VideoPlayer doesn't play videos when demux buffer size is too small. (UUM-49480)
    - Video: Fixed VideoPlayer.DecodeNextFrame that continued decoding in Profiler even after the Video Clip stops playing after reaching the end. (UUM-64898)
    - Video: Improved VP8Encoder compression and encoding speed. (UUM-20744)
    - Video: Resolved an issue so that video playback can be resumed when returning from the background when VideoPlayer.isLooping is enabled. (UUM-60922)
    - Video: The video keeps playing in the background when Play Mode is paused (UUM-21980)
    - Video: VideoPlayer support of multiple audio tracks is broken on a few platforms. (UUM-55268)
    - Video: [Android] Player often crashes when playing the Video Player Seek frame that's more than a minute away from the current frame (UUM-3364)
    - Video: [Video] Add .buginfo for Code Ownership & Issue Handling.
    - Video: [WebGL]Fixed VideoPlayer Rendering stops when setting FilterMode of a texture downloaded with UnityWebRequestTexture.GetTexture(). (UUM-52266)
    - Virtual Texturing: Disabled a PVT-specific tile resolving importance tracking metric that was enabled for SVT. (UUM-58895)
    - VisionOS: Fixed an issue where VR apps would crash when the user opened the OS menu or Control Center.
    - VisionOS: Fixed an issue where VR apps would present frames in the background, resulting in logs that say Insufficient Permission (to submit GPU work from background).
    - VisionOS: Fixed compiler errors in generated Xcode projects when application attempts to use web cam APIs. (UUM-64167)
    - Visual Scripting: Added a warning icon in the Project Settings window, next to assemblies that reference Editor assemblies. (UVSB-2382)
    - Visual Scripting: Fixed a memory leak that occurred when you tried to destroy a game object. (UVSB-2427)
    - Visual Scripting: Fixed a migration deserialization bug that was introduced in version 1.8.0 of the Visual Scripting package. (UVSB-2492)
    - Visual Scripting: Fixed an issue that caused Gradient graph variables to reset when the Editor is placed in Play Mode. (UVSB-2334)
    - Visual Scripting: Fixed an issue that prevented the Exceptions dropdown menu in the Try Catch node from loading. (UVSB-2463)
    - Visual Scripting: Fixed an issue where a null check of a scene variable in a script with an "OnDrawGizmos" event in the Editor caused an infinite amount of GameObjects to be created in Prefab mode. (UVSB-2453)
    - Visual Scripting: Fixed an issue where code for custom nodes was being stripped in AOT builds when Managed Stripping Level is set to High. (UVSB-2437)
    - Visual Scripting: Fixed an issue where OnInputSystemEvent doesn't trigger until Input Vector increases past 0.5. (UVSB-2435)
    - Visual Scripting: Fixed an issue where Script Graph Asset string data wasn't unloaded after deserialization. (UVSB-2366)
    - Visual Scripting: Fixed an issue with assemblies disappearing from the Node Library after a domain reload. (UVSB-2459)
    - Visual Scripting: Fixed an issue with custom inspectors not being generated. (UVSB-2466)
    - Visual Scripting: Removed a corrupt mdb file which was causing the ScriptUpdater to fail. (UVSB-2360)
    - Web: Fixed a syntax issue that caused Web platform builds to fail when multithreading was enabled. (UUM-44273)
    - Web: Fixed a typo in the Memory Growth web player setting. (UUM-51958)
    - Web: Fixed an issue in the Web platform's FMOD implementation that caused the console to be flooded with errors when using the PlayOneShot API. (UUM-40643)
    - Web: Fixed default compression format from Brotli to Gzip. (UUM-52223)
    - Web: Set PYTHONUTF8 env var to enable UTF-8 encoding by default. (UUM-20185)
    - Web: WebGPU: ASTC6x6 compressed texture format was incorrectly mapped to WebGPU.
    - Web: WebGPU: Enable filtering of Float32 and Depth textures when the Filterable Float32 extension is available.
    - Web: WebGPU: Fix for MSAA when HDR rendering is enabled.
    - Web: WebGPU: Fix for UInt32 index buffers used for indirect drawing.
    - Web: WebGPU: Fix for video player textures.
    - WebGL: Added new Build Setting options for master builds with Link Time Optimizations (LTO) to get faster release builds and to enable sidestepping any issues stemming from LLVM LTO optimizer. This is helpful if you need to iterate in the Release mode because iterating on development builds isn't possible. (UUM-43755)
    - WebGL: Fixed a bug that caused for input to not be released when focus was removed from canvas on Windows Chrome. (UUM-53519)
    - WebGL: Fixed a bug that causes a parsing error due to misplaced regex. (UUM-21896)
    - WebGL: Fixed a syntax issue that caused Web platform applications to establish connections on unsupported network ports.
    - WebGL: Fixed an issue by removing mention of IndexedDB from web cache log message.
    - WebGL: Fixed an issue causing audio to skip forward when using AudioClip.Pause() and AudioClip.Resume(). (UUM-54675)
    - WebGL: Fixed an issue that caused for an error to be thrown when passing a large string using SendMessage(...). (UUM-49331)
    - WebGL: Fixed an issue that causes the timestamp to be inaccurate on desktop Safari browsers. (UUM-61116)
    - WebGL: Fixed an issue that prevented background images from loading when compression was enabled for Web platform applications. (UUM-8692)
    - WebGL: Fixed an issue that prevented multithreaded builds from working if user repeatedly upgraded and then downgraded their project. (UUM-33218)
    - WebGL: Fixed an issue with stripping of functions with long, float, double, ... return value. (UUM-44225)
    - WebGL: Fixed for Render Texture depth buffers sometimes not being cleared properly. (UUM-57343)
    - WebGL: Fixed for Render Texture depth buffers sometimes not being cleared properly. (UUM-57343)
    - WebGL: Fixed rendering issues on Apple M1 GPUs when Depth Priming is enabled for URP. (UUM-40225)
    - WebGL: Fixed the Orientation Lock code to not crash when run on iOS Safari's new partially completed implementation of screen.orientation API. (UUM-49634)
    - WebGL: Fixed UnityLoader.js to be loadable in Use Strict mode. (UUM-52155)
    - WebGL: Update AudioClip.frequency to return the effective WebAudio AudioBuffer sampleRate value. (UUM-47637)
    - WebGL: [WebGPU] Add support for SRP Batcher to WebGPU.
    - WebGL: [WebGPU] Enable WebGPU for VFX Graph shaders.
    - WebGL: [WebGPU] Fixed an error with ShaderGraph Lit shaders that use textures.
    - WebGL: [WebGPU] Fixed banding in some post process effects.
    - WebGL: [WebGPU] Fixed error when Unity thinks WebGPU is available when it's not.
    - WebGL: [WebGPU] Fixed error with built-in deferred renderer.
    - WebGL: [WebGPU] Fixed error with MSAA depth textures.
    - WebGL: [WebGPU] Fixed resolution error with URP RenderGraph.
    - WebGL: [WebGPU] Fixed texture error with URP lens flare post process effect.
    - WebGL: [WebGPU] Fixed uniformity analysis errors for compute shaders that use built-in variables like WorkGroupID.
    - Windows: Added UI code for Windows Standalone and UWP build profile platform settings.
    - Windows: Fixed a crash when reading data from non-compliant HID peripherals. (UUM-59628)
    - Windows: Fixed a possible crash when the non-client area is redrawn before the player is fully initialized. (UUM-43075)
    - Windows: Fixed an issue where support for FullScreenMode.MaximizedWindow was missing. (UUM-22592)
    - Windows: Fixed an issue where the window size was not preserved when switching to Windowed mode using Alt+Enter. (UUM-49091)
    - Windows: Fixed automatic resizing of an unfocused player window once the mouse button is released. (UUM-49236)
    - Windows: Fixed Double backslash becoming single backslash when passing a Network path as a command line argument. (UUM-55979)
    - Windows: Fixed for custom server build profile getting value of player subtarget when building.
    - Windows: Fixed the Restart Unity as a standard user button so it now works when the Editor is run as an administrator because the Unity Hub is running as administrator or due to Unity's executable compatibility flags being configured to be run as administrator. (UUM-42508)
    - Windows: Fixed unreliable Cursor.SetCursor behaviour. (UUM-46718)
    - Windows: Profiler marker names are now correctly shown in NVidia NSight captures. (UUM-64026)
    - Windows: Removed undesirable HID warning messages. (UUM-56489)
    - XR: Add support for Visions OS keyboard.
    - XR: Added support for foveation maps on platforms, such as DX12 and Vulkan, where the origin of the y-axis is at the top of the RenderTarget. (UUM-40561)
    - XR: Fixed a crash in XRWindowsLocatableCamera.UnregisterProvider so it does not crash when Application.Quit() triggers. (OXRB-179)
    - XR: Fixed a crash that occured in CreateRenderTexture when booting a scene on Vulkan. (UUM-64258)
    - XR: Fixed a crash that occured in CreateRenderTexture when booting a scene on Vulkan. (UUM-68323)
    - XR: Fixed an issue that caused a Android VideoPlayer crash on some devices when using YCbCr video decoding. (UUM-46315)
    - XR: Fixed the render graph occlusion mesh pass in XR so that it renders and does not emit warnings.
    - XR: Setting XRSettings.useOcclusionMask = false will disable the occlusion mask when using the Built-in Rendering Pipeline. (UUM-53822)
    - XR: Single pass shader support for visionOS.
    - XR: Support MSAA on VisionOS when using single pass rendering.
    Package changes in 6000.0.1f1
    Packages updated
    - com.unity.inputsystem: 1.8.1 to 1.8.2
    - com.unity.services.vivox: 16.2.0 to 16.3.0
    - com.unity.test-framework: 1.4.3 to 1.4.4
    - com.unity.netcode.gameobjects: 1.8.1 to 1.9.1
    - com.unity.sharp-zip-lib: 1.3.7 to 1.3.8
Version: 6000.0.1f1
ReleaseTime: 2024-05-08T15:11:21.9000000Z
