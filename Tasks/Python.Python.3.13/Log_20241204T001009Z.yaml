Installer:
- Architecture: x86
  InstallerUrl: https://www.python.org/ftp/python/3.13.1/python-3.13.1.exe
  InstallerSha256: F9EF49FC0B41AD9DC5759992A1F455E27F13AD4037CFC1961D859773CA96E7BA
  ProductCode: '{2b28ae8b-5e6b-4898-a79e-c812597aa40f}'
  AppsAndFeaturesEntries:
  - DisplayName: Python 3.13.1 (32-bit)
    DisplayVersion: 3.13.1150.0
    ProductCode: '{2b28ae8b-5e6b-4898-a79e-c812597aa40f}'
    UpgradeCode: '{D931076A-D223-5314-A7DC-5C755C936363}'
- Architecture: x64
  InstallerUrl: https://www.python.org/ftp/python/3.13.1/python-3.13.1-amd64.exe
  InstallerSha256: 6B33FA9A439A86F553F9F60E538CCABC857D2F308BC77C477C04A46552ADE81F
  ProductCode: '{1abbd55d-059a-4d1e-bdf1-35bb74697f5a}'
  AppsAndFeaturesEntries:
  - DisplayName: Python 3.13.1 (64-bit)
    DisplayVersion: 3.13.1150.0
    ProductCode: '{1abbd55d-059a-4d1e-bdf1-35bb74697f5a}'
    UpgradeCode: '{F96F59BD-3E48-5E4E-B1A4-6CAFADEFEAE8}'
- Architecture: arm64
  InstallerUrl: https://www.python.org/ftp/python/3.13.1/python-3.13.1-arm64.exe
  InstallerSha256: AC801819A5EED2203E19A2F75AD37458EB5EEECA69BD4916DC5134160880CA92
  ProductCode: '{084f682c-ce6d-4094-944d-da5f3d819861}'
  AppsAndFeaturesEntries:
  - DisplayName: Python 3.13.1 (ARM64)
    DisplayVersion: 3.13.1150.0
    ProductCode: '{084f682c-ce6d-4094-944d-da5f3d819861}'
    UpgradeCode: '{303A4F18-F0C9-5E9F-8F29-42EA62697711}'
Locale:
- Key: ReleaseNotesUrl
  Value: https://docs.python.org/release/3.13.1/whatsnew/changelog.html#python-3-13-1
- Locale: en-US
  Key: ReleaseNotes
  Value: |-
    macOS
    - gh-124448: Update bundled Tcl/Tk in macOS installer to 8.6.15.
    Windows
    - gh-126911: Update credits command output.
    - gh-118973: Ensures the experimental free-threaded install includes the _tkinter module. The optional Tcl/Tk component must also be installed in order for the module to work.
    - gh-126497: Fixes venv failure due to missing redirector executables in experimental free-threaded installs.
    - gh-126074: Removed unnecessary DLLs from Windows embeddable package
    - gh-125315: Avoid crashing in platform due to slow WMI calls on some Windows machines.
    - gh-126084: Fix venvwlauncher to launch pythonw instead of python so no extra console window is created.
    - gh-125842: Fix a SystemError when sys.exit() is called with 0xffffffff on Windows.
    - gh-125550: Enable the Python Launcher for Windows to detect Python 3.14 installs from the Windows Store.
    - gh-124448: Updated bundled Tcl/Tk to 8.6.15.
    Tools/Demos
    - gh-126807: Fix extraction warnings in pygettext.py caused by mistaking function definitions for function calls.
    - gh-126167: The iOS testbed was modified so that it can be used by third-party projects for testing purposes.
    Tests
    - gh-126909: Fix test_os extended attribute tests to work on filesystems with 1 KiB xattr size limit.
    - gh-125041: Re-enable skipped tests for zlib on the s390x architecture: only skip checks of the compressed bytes, which can be different between zlib’s software implementation and the hardware-accelerated implementation.
    - gh-124295: Add translation tests to the argparse module.
    Security
    - gh-126623: Upgrade libexpat to 2.6.4
    - gh-125140: Remove the current directory from sys.path when using PyREPL.
    - gh-122792: Changed IPv4-mapped ipaddress.IPv6Address to consistently use the mapped IPv4 address value for deciding properties. Properties which have their behavior fixed are is_multicast, is_reserved, is_link_local, is_global, and is_unspecified.
    Library
    - gh-127321: pdb.set_trace() will not stop at an opcode that does not have an associated line number anymore.
    - gh-127303: Publicly expose EXACT_TOKEN_TYPES in token.__all__.
    - gh-123967: Fix faulthandler for trampoline frames. If the top-most frame is a trampoline frame, skip it. Patch by Victor Stinner.
    - gh-127182: Fix io.StringIO.__setstate__() crash, when None was passed as the first value.
    - gh-127217: Fix urllib.request.pathname2url() for paths starting with multiple slashes on Posix.
    - gh-127035: Fix shutil.which on Windows. Now it looks at direct match if and only if the command ends with a PATHEXT extension or X_OK is not in mode. Support extensionless files if “.” is in PATHEXT. Support PATHEXT extensions that end with a dot.
    - gh-122273: Support PyREPL history on Windows. Patch by devdanzin and Victor Stinner.
    - gh-127078: Fix issue where urllib.request.url2pathname() failed to discard an extra slash before a UNC drive in the URL path on Windows.
    - gh-126766: Fix issue where urllib.request.url2pathname() failed to discard any ‘localhost’ authority present in the URL.
    - gh-127065: Fix crash when calling a operator.methodcaller() instance from multiple threads in the free threading build.
    - gh-126997: Fix support of STRING and GLOBAL opcodes with non-ASCII arguments in pickletools. pickletools.dis() now outputs non-ASCII bytes in STRING, BINSTRING and SHORT_BINSTRING arguments as escaped (\xXX).
    - gh-126316: grp: Make grp.getgrall() thread-safe by adding a mutex. Patch by Victor Stinner.
    - gh-126618: Fix the representation of itertools.count objects when the count value is sys.maxsize.
    - gh-85168: Fix issue where urllib.request.url2pathname() and pathname2url() always used UTF-8 when quoting and unquoting file URIs. They now use the filesystem encoding and error handler.
    - gh-67877: Fix memory leaks when regular expression matching terminates abruptly, either because of a signal or because memory allocation fails.
    - gh-126789: Fixed the values of sysconfig.get_config_vars(), sysconfig.get_paths(), and their siblings when the site initialization happens after sysconfig has built a cache for sysconfig.get_config_vars().
    - gh-126188: Update bundled pip to 24.3.1
    - gh-126780: Fix os.path.normpath() for drive-relative paths on Windows.
    - gh-126766: Fix issue where urllib.request.url2pathname() failed to discard two leading slashes introducing an empty authority section.
    - gh-126727: locale.nl_langinfo(locale.ERA) now returns multiple era description segments separated by semicolons. Previously it only returned the first segment on platforms with Glibc.
    - gh-126699: Allow collections.abc.AsyncIterator to be a base for Protocols.
    - gh-126654: Fix crash when non-dict was passed to several functions in _interpreters module.
    - gh-104745: Limit starting a patcher (from unittest.mock.patch() or unittest.mock.patch.object()) more than once without stopping it
    - gh-126595: Fix a crash when instantiating itertools.count with an initial count of sys.maxsize on debug builds. Patch by Bénédikt Tran.
    - gh-120423: Fix issue where urllib.request.pathname2url() mishandled Windows paths with embedded forward slashes.
    - gh-126565: Improve performances of zipfile.Path.open() for non-reading modes.
    - gh-126505: Fix bugs in compiling case-insensitive regular expressions with character classes containing non-BMP characters: upper-case non-BMP character did was ignored and the ASCII flag was ignored when matching a character range whose upper bound is beyond the BMP region.
    - gh-117378: Fixed the multiprocessing "forkserver" start method forkserver process to correctly inherit the parent’s sys.path during the importing of multiprocessing.set_forkserver_preload() modules in the same manner as sys.path is configured in workers before executing work items.
      This bug caused some forkserver module preloading to silently fail to preload. This manifested as a performance degration in child processes when the sys.path was required due to additional repeated work in every worker.
      It could also have a side effect of "" remaining in sys.path during forkserver preload imports instead of the absolute path from os.getcwd() at multiprocessing import time used in the worker sys.path.
      The sys.path differences between phases in the child process could potentially have caused preload to import incorrect things from the wrong location. We are unaware of that actually having happened in practice.
    - gh-125679: The multiprocessing.Lock and multiprocessing.RLock repr values no longer say “unknown” on macOS.
    - gh-126476: Raise calendar.IllegalMonthError (now a subclass of IndexError) for calendar.month() when the input month is not correct.
    - gh-126489: The Python implementation of pickle no longer calls pickle.Pickler.persistent_id() for the result of persistent_id().
    - gh-126313: Fix an issue in curses.napms() when curses.initscr() has not yet been called. Patch by Bénédikt Tran.
    - gh-126303: Fix pickling and copying of os.sched_param objects.
    - gh-126138: Fix a use-after-free crash on asyncio.Task objects whose underlying coroutine yields an object that implements an evil __getattribute__(). Patch by Nico Posada.
    - gh-126220: Fix crash in cProfile.Profile and _lsprof.Profiler when their callbacks were directly called with 0 arguments.
    - gh-126212: Fix issue where urllib.request.pathname2url() and url2pathname() removed slashes from Windows DOS drive paths and URLs.
    - gh-126223: Raise a UnicodeEncodeError instead of a SystemError upon calling _interpreters.create() with an invalid Unicode character.
    - gh-126205: Fix issue where urllib.request.pathname2url() generated URLs beginning with four slashes (rather than two) when given a Windows UNC path.
    - gh-126105: Fix a crash in ast when the ast.AST._fields attribute is deleted.
    - gh-126106: Fixes a possible NULL pointer dereference in ssl.
    - gh-126080: Fix a use-after-free crash on asyncio.Task objects for which the underlying event loop implements an evil __getattribute__(). Reported by Nico-Posada. Patch by Bénédikt Tran.
    - gh-126083: Fixed a reference leak in asyncio.Task objects when reinitializing the same object with a non-None context. Patch by Nico Posada.
    - gh-125984: Fix use-after-free crashes on asyncio.Future objects for which the underlying event loop implements an evil __getattribute__(). Reported by Nico-Posada. Patch by Bénédikt Tran.
    - gh-125969: Fix an out-of-bounds crash when an evil asyncio.loop.call_soon() mutates the length of the internal callbacks list. Patch by Bénédikt Tran.
    - gh-125966: Fix a use-after-free crash in asyncio.Future.remove_done_callback(). Patch by Bénédikt Tran.
    - gh-125789: Fix possible crash when mutating list of callbacks returned by asyncio.Future._callbacks. It now always returns a new copy in C implementation _asyncio. Patch by Kumar Aditya.
    - gh-124452: Fix an issue in email.policy.EmailPolicy.header_source_parse() and email.policy.Compat32.header_source_parse() that introduced spurious leading whitespaces into header values when the header includes a newline character after the header name delimiter (:) and before the value.
    - gh-125884: Fixed the bug for pdb where it can’t set breakpoints on functions with certain annotations.
    - gh-125355: Fix several bugs in argparse.ArgumentParser.parse_intermixed_args().
      - The parser no longer changes temporarily during parsing.
      - Default values are not processed twice.
      - Required mutually exclusive groups containing positional arguments are now supported.
      - The missing arguments report now includes the names of all required optional and positional arguments.
      - Unknown options can be intermixed with positional arguments in parse_known_intermixed_args().
    - gh-125666: Avoid the exiting the interpreter if a null byte is given as input in the new REPL.
    - gh-125710: [Enum] fix hashable<->nonhashable comparisons for member values
    - gh-125631: Restore ability to set persistent_id and persistent_load attributes of instances of the Pickler and Unpickler classes in the pickle module.
    - gh-125378: Fixed the bug in pdb where after a multi-line command, an empty line repeats the first line of the multi-line command, instead of the full command.
    - gh-125682: Reject non-ASCII digits in the Python implementation of json.loads() conforming to the JSON specification.
    - gh-125660: Reject invalid unicode escapes for Python implementation of json.loads().
    - gh-125259: Fix the notes removal logic for errors thrown in enum initialization.
    - gh-125590: Allow FrameLocalsProxy to delete and pop if the key is not a fast variable.
    - gh-125519: Improve traceback if importlib.reload() is called with an object that is not a module. Patch by Alex Waygood.
    - gh-125451: Fix deadlock when concurrent.futures.ProcessPoolExecutor shuts down concurrently with an error when feeding a job to a worker process.
    - gh-125422: Fixed the bug where pdb and bdb can step into the bottom caller frame.
    - gh-100141: Fixed the bug where pdb will be stuck in an infinite loop when debugging an empty file.
    - gh-125115: Fixed a bug in pdb where arguments starting with - can’t be passed to the debugged script.
    - gh-53203: Fix time.strptime() for %c, %x and %X formats in many locales that use non-ASCII digits, like Persian, Burmese, Odia and Shan.
    - gh-125398: Fix the conversion of the VIRTUAL_ENV path in the activate script in venv when running in Git Bash for Windows.
    - gh-125316: Fix using functools.partial() as enum.Enum member. A FutureWarning with suggestion to use enum.member() is now emitted when the partial instance is used as an enum member.
    - gh-125245: Fix race condition when importing collections.abc, which could incorrectly return an empty module.
    - gh-125243: Fix data race when creating zoneinfo.ZoneInfo objects in the free threading build.
    - gh-125254: Fix a bug where ArgumentError includes the incorrect ambiguous option in argparse.
    - gh-125235: Keep tkinter TCL paths in venv pointing to base installation on Windows.
    - gh-61011: Fix inheritance of nested mutually exclusive groups from parent parser in argparse.ArgumentParser. Previously, all nested mutually exclusive groups lost their connection to the group containing them and were displayed as belonging directly to the parser.
    - gh-52551: Fix encoding issues in time.strftime(), the strftime() method of the datetime classes datetime, date and time and formatting of these classes. Characters not encodable in the current locale are now acceptable in the format string. Surrogate pairs and sequence of surrogatescape-encoded bytes are no longer recombinated. Embedded null character no longer terminates the format string.
    - gh-125118: Don’t copy arbitrary values to _Bool in the struct module.
    - gh-125069: Fix an issue where providing a pathlib.PurePath object as an initializer argument to a second PurePath object with a different parser resulted in arguments to the former object’s initializer being joined by the latter object’s parser.
    - gh-125096: If the

      PYTHON_BASIC_REPL environment variable is set, the site module no longer imports the _pyrepl module. Moreover, the site module now respects -E and -I command line options: ignore

      PYTHON_BASIC_REPL in this case. Patch by Victor Stinner.
    - gh-124969: Fix locale.nl_langinfo(locale.ALT_DIGITS) on platforms with glibc. Now it returns a string consisting of up to 100 semicolon-separated symbols (an empty string in most locales) on all Posix platforms. Previously it only returned the first symbol or an empty string.
    - gh-124960: Fix support for the barry_as_FLUFL future flag in the new REPL.
    - gh-124984: Fixed thread safety in ssl in the free-threaded build. OpenSSL operations are now protected by a per-object lock.
    - gh-124958: Fix refcycles in exceptions raised from asyncio.TaskGroup and the python implementation of asyncio.Future
    - gh-53203: Fix time.strptime() for %c and %x formats in many locales: Arabic, Bislama, Breton, Bodo, Kashubian, Chuvash, Estonian, French, Irish, Ge’ez, Gurajati, Manx Gaelic, Hebrew, Hindi, Chhattisgarhi, Haitian Kreyol, Japanese, Kannada, Korean, Marathi, Malay, Norwegian, Nynorsk, Punjabi, Rajasthani, Tok Pisin, Yoruba, Yue Chinese, Yau/Nungon and Chinese.
    - gh-124917: Allow calling os.path.exists() and os.path.lexists() with keyword arguments on Windows. Fixes a regression in 3.13.0.
    - gh-124653: Fix detection of the minimal Queue API needed by the logging module. Patch by Bénédikt Tran.
    - gh-124858: Fix reference cycles left in tracebacks in asyncio.open_connection() when used with happy_eyeballs_delay
    - gh-124390: Fixed AssertionError when using asyncio.staggered.staggered_race() with asyncio.eager_task_factory.
    - gh-124651: Properly quote template strings in venv activation scripts.
    - gh-116850: Fix argparse for namespaces with not directly writable dict (e.g. classes).
    - gh-58573: Fix conflicts between abbreviated long options in the parent parser and subparsers in argparse.
    - gh-124594: All asyncio REPL prompts run in the same context. Contributed by Bartosz Sławecki.
    - gh-61181: Fix support of choices with string value in argparse. Substrings of the specified string no longer considered valid values.
    - gh-80259: Fix argparse support of positional arguments with nargs='?', default=argparse.SUPPRESS and specified type.
    - gh-120378: Fix a crash related to an integer overflow in curses.resizeterm() and curses.resize_term().
    - gh-123884: Fixed bug in itertools.tee() handling of other tee inputs (a tee in a tee). The output now has the promised n independent new iterators. Formerly, the first iterator was identical (not independent) to the input iterator. This would sometimes give surprising results.
    - gh-58956: Fixed a bug in pdb where sometimes the breakpoint won’t trigger if it was set on a function which is already in the call stack.
    - gh-124345: argparse vim supports abbreviated single-dash long options separated by = from its value.
    - gh-104860: Fix disallowing abbreviation of single-dash long options in argparse with allow_abbrev=False.
    - gh-63143: Fix parsing mutually exclusive arguments in argparse. Arguments with the value identical to the default value (e.g. booleans, small integers, empty or 1-character strings) are no longer considered “not present”.
    - gh-72795: Positional arguments with nargs equal to '*' or argparse.REMAINDER are no longer required. This allows to use positional argument with nargs='*' and without default in mutually exclusive group and improves error message about required arguments.
    - gh-59317: Fix parsing positional argument with nargs equal to '?' or '*' if it is preceded by an option and another positional argument.
    - gh-53780: argparse now ignores the first "--" (double dash) between an option and command.
    - gh-124217: Add RFC 9637 reserved IPv6 block 3fff::/20 in ipaddress module.
    - gh-81691: Fix handling of multiple "--" (double dashes) in argparse. Only the first one has now been removed, all subsequent ones are now taken literally.
    - gh-123978: Remove broken time.thread_time() and time.thread_time_ns() on NetBSD.
    - gh-124008: Fix possible crash (in debug build), incorrect output or returning incorrect value from raw binary write() when writing to console on Windows.
    - gh-123935: Fix parent slots detection for dataclasses that inherit from classes with __dictoffset__.
    - gh-122765: Fix unbalanced quote errors occurring when activate.csh in venv was sourced with a custom prompt containing unpaired quotes or newlines.
    - gh-123370: Fix the canvas not clearing after running turtledemo clock.
    - gh-116810: Resolve a memory leak introduced in CPython 3.10’s ssl when the ssl.SSLSocket.session property was accessed. Speeds up read and write access to said property by no longer unnecessarily cloning session objects via serialization.
    - gh-120754: Update unbounded read calls in zipfile to specify an explicit size putting a limit on how much data they may read. This also updates handling around ZIP max comment size to match the standard instead of reading comments that are one byte too long.
    - gh-70764: Fixed an issue where inspect.getclosurevars() would incorrectly classify an attribute name as a global variable when the name exists both as an attribute name and a global variable.
    - gh-118289: posixpath.realpath() now raises NotADirectoryError when strict mode is enabled and a non-directory path with a trailing slash is supplied.
    - gh-119826: Always return an absolute path for os.path.abspath() on Windows.
    - gh-117766: Always use str() to print choices in argparse.
    - gh-101955: Fix SystemError when match regular expression pattern containing some combination of possessive quantifier, alternative and capture group.
    - gh-88110: Fixed multiprocessing.Process reporting a .exitcode of 1 even on success when using the "fork" start method while using a concurrent.futures.ThreadPoolExecutor.
    - gh-71936: Fix a race condition in multiprocessing.pool.Pool.
    - bpo-46128: Strip unittest.IsolatedAsyncioTestCase stack frames from reported stacktraces.
    - bpo-14074: Fix argparse metavar processing to allow positional arguments to have a tuple metavar.
    IDLE
    - gh-122392: Increase currently inadequate vertical spacing for the IDLE browsers (path, module, and stack) on high-resolution monitors.
    Documentation
    - gh-126622: Added stub pages for removed modules explaining their removal, where to find replacements, and linking to the last Python version that supported them. Contributed by Ned Batchelder.
    - gh-125277: Require Sphinx 7.2.6 or later to build the Python documentation. Patch by Adam Turner.
    - gh-124872: Added definitions for context, current context, and context management protocol, updated related definitions to be consistent, and expanded the documentation for contextvars.Context.
    - gh-125018: The importlib.metadata documentation now includes semantic cross-reference targets for the significant documented APIs. This means intersphinx references like importlib.metadata.version() will now work as expected.
    - gh-70870: Clarified the dual usage of the term “free variable” (both the formal meaning of any reference to names defined outside the local scope, and the narrower pragmatic meaning of nonlocal variables named in co_freevars).
    - gh-121277: Writers of CPython’s documentation can now use next as the version for the versionchanged, versionadded, deprecated directives.
    - gh-60712: Include the object type in the lists of documented types. Change by Furkan Onder and Martin Panter.
    - bpo-34008: The Py_Main() documentation moved from the “Very High Level API” section to the “Initialization and Finalization” section.
      Also make it explicit that we expect Py_Main to typically be called instead of Py_Initialize rather than after it (since Py_Main makes its own call to Py_Initialize). Document that calling both is supported but is version dependent on which settings will be applied correctly.
    Core and Builtins
    - gh-113841: Fix possible undefined behavior division by zero in complex’s _Py_c_pow().
    - gh-127020: Fix a crash in the free threading build when PyCode_GetCode(), PyCode_GetVarnames(), PyCode_GetCellvars(), or PyCode_GetFreevars() were called from multiple threads at the same time.
    - gh-126980: Fix __buffer__() of bytearray crashing when READ or WRITE are passed as flags.
    - gh-126881: Fix crash in finalization of dtoa state. Patch by Kumar Aditya.
    - gh-126341: Now ValueError is raised instead of SystemError when trying to iterate over a released memoryview object.
    - gh-126688: Fix a crash when calling os.fork() on some operating systems, including SerenityOS.
    - gh-126066: Fix importlib to not write an incomplete .pyc files when a ulimit or some other operating system mechanism is preventing the write to go through fully.
    - gh-126312: Fix crash during garbage collection on an object frozen by gc.freeze() on the free-threaded build.
    - gh-126139: Provide better error location when attempting to use a future statement with an unknown future feature.
    - gh-126018: Fix a crash in sys.audit() when passing a non-string as first argument and Python was compiled in debug mode.
    - gh-125942: On Android, the errors setting of sys.stdout was changed from surrogateescape to backslashreplace.
    - gh-125859: Fix a crash in the free threading build when gc.get_objects() or gc.get_referrers() is called during an in-progress garbage collection.
    - gh-125703: Correctly honour tracemalloc hooks in specialized Py_DECREF paths. Patch by Pablo Galindo
    - gh-125593: Use color to highlight error locations in traceback from exception group
    - gh-125444: Fix illegal instruction for older Arm architectures. Patch by Diego Russo, testing by Ross Burton.
    - gh-124375: Fix a crash in the free threading build when the GC runs concurrently with a new thread starting.
    - gh-125221: Fix possible race condition when calling __reduce_ex__() for the first time in the free threading build.
    - gh-125038: Fix crash when iterating over a generator expression after direct changes on gi_frame.f_locals. Patch by Mikhail Efimov.
    - gh-123378: Fix a crash in the __str__() method of UnicodeError objects when the UnicodeError.start and UnicodeError.end values are invalid or out-of-range. Patch by Bénédikt Tran.
    - gh-116510: Fix a crash caused by immortal interned strings being shared between sub-interpreters that use basic single-phase init. In that case, the string can be used by an interpreter that outlives the interpreter that created and interned it. For interpreters that share obmalloc state, also share the interned dict with the main interpreter.
    - gh-122878: Use the pager binary, if available (e.g. on Debian and derivatives), to display REPL help().
    - gh-124188: Fix reading and decoding a line from the source file witn non-UTF-8 encoding for syntax errors raised in the compiler.
    - gh-123930: Improve the error message when a script shadowing a module from the standard library causes ImportError to be raised during a “from” import. Similarly, improve the error message when a script shadowing a third party module attempts to “from” import an attribute from that third party module while still initialising.
    - gh-122907: Building with HAVE_DYNAMIC_LOADING now works as well as it did in 3.12. Existing deficiences will be addressed separately. (See https://github.com/python/cpython/issues/122950.)
    - gh-118950: Fix bug where SSLProtocol.connection_lost wasn’t getting called when OSError was thrown on writing to socket.
    - gh-113570: Fixed a bug in reprlib.repr where it incorrectly called the repr method on shadowed Python built-in types.
    - gh-109746: If _thread.start_new_thread() fails to start a new thread, it deletes its state from interpreter and thus avoids its repeated cleanup on finalization.
    C API
    - gh-126554: Fix error handling in ctypes.CDLL objects which could result in a crash in rare situations.
    - gh-125608: Fix a bug where dictionary watchers (e.g., PyDict_Watch()) on an object’s attribute dictionary (__dict__) were not triggered when the object’s attributes were modified.
    - bpo-34008: Added Py_IsInitialized to the list of APIs that are safe to call before the interpreter is initialized, and updated the embedding tests to cover it.
    Build
    - gh-123877: Set wasm32-wasip1 as the WASI target. The old wasm32-wasi target is deprecated so it can be used for an eventual WASI 1.0.
    - gh-89640: Hard-code float word ordering as little endian on WASM.
    - gh-125940: The Android build now supports 16 KB page sizes.
    - gh-89640: Improve detection of float word ordering on Linux when link-time optimizations are enabled.
    - gh-125269: Fix detection of whether -latomic is needed when cross-compiling CPython using the configure script.
    - gh-121634: Allow for specifying the target compile triple for WASI.
    - gh-122578: Use WASI SDK 24 for testing.
    - gh-115382: Fix cross compile failures when the host and target SOABIs match.
Version: 3.13.1
ReleaseTime: 2024-12-03
